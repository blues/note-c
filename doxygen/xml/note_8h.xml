<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="note_8h" kind="file" language="C++">
    <compoundname>note.h</compoundname>
    <includes local="no">float.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="n__cjson_8h" local="yes">n_cjson.h</includes>
    <incdepgraph>
      <node id="6">
        <label>n_cjson.h</label>
        <link refid="n__cjson_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/note-c/note-c/note.h</label>
        <link refid="note_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>float.h</label>
      </node>
      <node id="3">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_note_m_d5_context" prot="public">NoteMD5Context</innerclass>
    <innerclass refid="struct_note_payload_desc" prot="public">NotePayloadDesc</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" prot="public" static="no">
        <name>NOTE_C_DEPRECATED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="23" column="10" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3b68a470a03c1aaee013c71208cf6033" prot="public" static="no">
        <name>NOTE_C_NO_DEPRECATED_ATTR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="24" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" prot="public" static="no">
        <name>_NOTE_C_STRINGIZE</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="39" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa0eaf84658de3c39c7263959f4950e41" prot="public" static="no">
        <name>NOTE_C_STRINGIZE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" kindref="member">_NOTE_C_STRINGIZE</ref>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="40" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ad3ef8b1d9585fb28c46942ab96815b20" prot="public" static="no">
        <name>NOTE_C_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="42" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a15af17c840e4dee0e552124fde744773" prot="public" static="no">
        <name>NOTE_C_VERSION_MINOR</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="43" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a9a66291724eb8ba8bc651dc90ed441f9" prot="public" static="no">
        <name>NOTE_C_VERSION_PATCH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="44" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa4cdd0eed41940a458709f2034b706e8" prot="public" static="no">
        <name>NOTE_C_VERSION</name>
        <initializer><ref refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" kindref="member">NOTE_C_STRINGIZE</ref>(<ref refid="note_8h_1ad3ef8b1d9585fb28c46942ab96815b20" kindref="member">NOTE_C_VERSION_MAJOR</ref>) &quot;.&quot; <ref refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" kindref="member">NOTE_C_STRINGIZE</ref>(<ref refid="note_8h_1a15af17c840e4dee0e552124fde744773" kindref="member">NOTE_C_VERSION_MINOR</ref>) &quot;.&quot; <ref refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" kindref="member">NOTE_C_STRINGIZE</ref>(<ref refid="note_8h_1a9a66291724eb8ba8bc651dc90ed441f9" kindref="member">NOTE_C_VERSION_PATCH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="46" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" prot="public" static="no">
        <name>ERRSTR</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="77" column="10" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" prot="public" static="no">
        <name>JINTEGER_MIN</name>
        <initializer>INT64_MIN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="93" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a445107097b19783483070744407468d9" prot="public" static="no">
        <name>JINTEGER_MAX</name>
        <initializer>INT64_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="94" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa4e6f9fe285abae5dec0312c1dda3f06" prot="public" static="no">
        <name>NoteNewBody</name>
        <initializer><ref refid="n__cjson_8h_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="305" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a09e55e06b045772b4fc105c0329c73a1" prot="public" static="no">
        <name>NoteAddBodyToObject</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="n__cjson_8h_1a3430617fcd905e9d3d997354cb7e23cc" kindref="member">JAddItemToObject</ref>(a, &quot;body&quot;, b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="306" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aada0fea556f714e917ac330c87c7c2c1" prot="public" static="no">
        <name>NoteGetBody</name>
        <param><defname>a</defname></param>
        <initializer><ref refid="n__cjson__helpers_8c_1a0fd01d5fe6235d3b194449a8e6ce4f9c" kindref="member">JGetObject</ref>(a, &quot;body&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="307" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6081d56bf39642758465b3c1d155f853" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_MAJOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="393" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a17656ac3ed2c4e6a77b115417bf75a7a" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_MINOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="394" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1acdd8348847658b936879035020767bab" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_DETAILED</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="395" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a148902b910ba060dac353c3871183403" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_ALGORITHMIC</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="396" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a11bc43f4578ce909ad4403cc3b15e79f" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_ALL</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="397" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1acd6f73358d95a8188495babd142c5977" prot="public" static="no">
        <name>NoteResponseError</name>
        <param><defname>rsp</defname></param>
        <initializer>(!<ref refid="n__cjson__helpers_8c_1aafb4b69e85bd5d9c2d1534688fd4176d" kindref="member">JIsNullString</ref>(rsp, &quot;err&quot;))</initializer>
        <briefdescription>
<para>Check if the Notecard response contains an error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>The response to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if there&apos;s an error and <computeroutput>false</computeroutput> if there&apos;s not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="462" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aebc81ad84af23cc172214e6bfae7a00f" prot="public" static="no">
        <name>NoteResponseErrorContains</name>
        <param><defname>rsp</defname></param>
        <param><defname>errstr</defname></param>
        <initializer>(<ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp, &quot;err&quot;, errstr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="463" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a5e957ef70b05d1b5173ba34ea7b60588" prot="public" static="no">
        <name>NoteDeleteResponse</name>
        <param><defname>rsp</defname></param>
        <initializer><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(rsp)</initializer>
        <briefdescription>
<para>Free a response from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>The response to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="469" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3107c5344909029555deedfacb21b43a" prot="public" static="no">
        <name>NOTE_I2C_ADDR_DEFAULT</name>
        <initializer>0x17</initializer>
        <briefdescription>
<para>The default I2C address of the Notecard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="812" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa043f18c8e0b59eef37008116957dbfa" prot="public" static="no">
        <name>NOTE_I2C_HEADER_SIZE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="816" column="11" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" prot="public" static="no">
        <name>NOTE_I2C_MAX_MAX</name>
        <initializer>(UCHAR_MAX - <ref refid="note_8h_1aa043f18c8e0b59eef37008116957dbfa" kindref="member">NOTE_I2C_HEADER_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="828" column="17" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ae354e639aef31cd771bd0a22ec84a9fe" prot="public" static="no">
        <name>NOTE_I2C_MTU_MAX</name>
        <initializer><ref refid="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" kindref="member">NOTE_I2C_MAX_MAX</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="832" column="11" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a029462dd63c2f85402fa69f5466082f2" prot="public" static="no">
        <name>NOTE_I2C_MAX_DEFAULT</name>
        <initializer>30</initializer>
        <briefdescription>
<para>The maximum number of bytes to request from or transmit to the Notecard in a single chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="859" column="13" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a163b1c2136ac105797aab34b532367dc" prot="public" static="no">
        <name>NOTE_I2C_MTU_DEFAULT</name>
        <initializer><ref refid="note_8h_1a029462dd63c2f85402fa69f5466082f2" kindref="member">NOTE_I2C_MAX_DEFAULT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="863" column="11" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6c208024da45b2b4150b2f98d951efb4" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_ERROR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="936" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_WARN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="937" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_INFO</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="938" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_DEBUG</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="939" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" prot="public" static="no">
        <name>NOTE_C_LOG_FILE_AND_LINE</name>
        <param><defname>lvl</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="969" column="10" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a87c75bac44560f4cbb8573dc0048169a" prot="public" static="no">
        <name>NOTE_C_LOG_ERROR</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>); \
  <ref refid="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>, &quot;[ERROR] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>, msg); \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="973" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="973" bodyend="977"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7ac988c4204339520399f37a04eb4110" prot="public" static="no">
        <name>NOTE_C_LOG_WARN</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" kindref="member">NOTE_C_LOG_LEVEL_WARN</ref>); \
  <ref refid="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" kindref="member">NOTE_C_LOG_LEVEL_WARN</ref>, &quot;[WARN] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" kindref="member">NOTE_C_LOG_LEVEL_WARN</ref>, msg); \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="981" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="981" bodyend="985"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a260d740972b2082c72f77b416713f5a0" prot="public" static="no">
        <name>NOTE_C_LOG_INFO</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref>); \
  <ref refid="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref>, &quot;[INFO] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref>, msg); \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="989" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="989" bodyend="993"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3123fd4930117eb19b75fef8199d6032" prot="public" static="no">
        <name>NOTE_C_LOG_DEBUG</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" kindref="member">NOTE_C_LOG_LEVEL_DEBUG</ref>); \
  <ref refid="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" kindref="member">NOTE_C_LOG_LEVEL_DEBUG</ref>, &quot;[DEBUG] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" kindref="member">NOTE_C_LOG_LEVEL_DEBUG</ref>, msg); \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="997" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="997" bodyend="1001"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a8cfae267b7197e9e2249c2618fc35db8" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_DEFAULT</name>
        <initializer><ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1005" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL</name>
        <initializer><ref refid="note_8h_1a8cfae267b7197e9e2249c2618fc35db8" kindref="member">NOTE_C_LOG_LEVEL_DEFAULT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1011" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1abb2f3b5f9047911dfa9ae2249ae4ad58" prot="public" static="no">
        <name>JTYPE_NOT_PRESENT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1370" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a1dde42a8f9d06851b91f73dcadb48067" prot="public" static="no">
        <name>JTYPE_BOOL_TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1371" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a33c56f9e059f017b5f73a7207b5f690a" prot="public" static="no">
        <name>JTYPE_BOOL_FALSE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1372" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7fd70bf9265ce886f8370b4fb8eebb92" prot="public" static="no">
        <name>JTYPE_BOOL</name>
        <initializer><ref refid="note_8h_1a1dde42a8f9d06851b91f73dcadb48067" kindref="member">JTYPE_BOOL_TRUE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1373" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ab65facde73aab39c8c078c8f328badb0" prot="public" static="no">
        <name>JTYPE_NULL</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1374" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a34cb28204f46e15dc57b5b82181e2e1d" prot="public" static="no">
        <name>JTYPE_NUMBER_ZERO</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1375" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a73cc27bda4c0d44bffca5dbc353e8d65" prot="public" static="no">
        <name>JTYPE_NUMBER</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1376" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a88bdd6cb77b65bec7d1a12d512a021a7" prot="public" static="no">
        <name>JTYPE_STRING_BLANK</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1377" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a05967fa1a39c824fce62fe31a645ca08" prot="public" static="no">
        <name>JTYPE_STRING_ZERO</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1378" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ab081e08668cdcbaed0bf2506cb666f9b" prot="public" static="no">
        <name>JTYPE_STRING_NUMBER</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1379" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ad5597cf60a093c2986fb5451e69ea43e" prot="public" static="no">
        <name>JTYPE_STRING_BOOL_TRUE</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1380" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a9db7f1f3c20bfd4aa66d563cde2d3bef" prot="public" static="no">
        <name>JTYPE_STRING_BOOL_FALSE</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1381" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aeba8ddb49a982975aff58fbc5a44b37d" prot="public" static="no">
        <name>JTYPE_STRING</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1382" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7f3ba7ec204fbe5e43714b514236a1c7" prot="public" static="no">
        <name>JTYPE_OBJECT</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1383" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3029c9e9a021cf404acbc2178b94470f" prot="public" static="no">
        <name>JTYPE_ARRAY</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1384" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a5427874049e8ce6e2211214d93f232c7" prot="public" static="no">
        <name>JGetObjectItemName</name>
        <param><defname>j</defname></param>
        <initializer>(j-&gt;string)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1410" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a20c36388ecbae9120b19c30118891097" prot="public" static="no">
        <name>JNTOA_PRECISION</name>
        <initializer>(16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1413" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a2554bdccd902653258af24e049abaccb" prot="public" static="no">
        <name>JNTOA_MAX</name>
        <initializer>(44)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1414" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ada955eca3890263865a0f8b15afc052d" prot="public" static="no">
        <name>NOTE_MD5_HASH_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1498" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a1bb87c25941d1a303245efbe489929e7" prot="public" static="no">
        <name>NOTE_MD5_HASH_STRING_SIZE</name>
        <initializer>(((<ref refid="note_8h_1ada955eca3890263865a0f8b15afc052d" kindref="member">NOTE_MD5_HASH_SIZE</ref>)*2)+1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1499" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="1499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a2468ed01b499ba8fc72fefa3500cad90" prot="public" static="no">
        <name>NoteSend</name>
        <initializer><ref refid="note_8h_1a859c73fcda95741f545f2996d0d4d50a" kindref="member">NoteAdd</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2003" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" prot="public" static="no">
        <name>NP_SEGTYPE_LEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2072" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2072" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a21ad183750f7d93528d707af3339b200" prot="public" static="no">
        <name>NP_SEGLEN_LEN</name>
        <initializer>sizeof(uint32_t)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2073" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6bd262ffa71c6e153f70b1fcbfbe9150" prot="public" static="no">
        <name>NP_SEGHDR_LEN</name>
        <initializer>(<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref> + <ref refid="note_8h_1a21ad183750f7d93528d707af3339b200" kindref="member">NP_SEGLEN_LEN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2074" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a18eddc8e4f0522a438b6475058e5ad32" prot="public" static="no">
        <name>TBOOL</name>
        <initializer>true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2152" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6186fd56a505b415b2ab2f50233c157f" prot="public" static="no">
        <name>TINT8</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2153" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a91ba007692878e4a02154c04ae390f39" prot="public" static="no">
        <name>TINT16</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2154" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a2011bffb5bae1513306b0615f885ecc3" prot="public" static="no">
        <name>TINT24</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2155" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ab1bbd49f40d8d7722f8ca7347bd83513" prot="public" static="no">
        <name>TINT32</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2156" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a8437f26572687d03e061a0113af0cb0c" prot="public" static="no">
        <name>TINT64</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2157" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ade35b42a310f0bde7e6741c9ee7673b4" prot="public" static="no">
        <name>TUINT8</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2158" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a1d8690165d7e8509f58efd34fd45041e" prot="public" static="no">
        <name>TUINT16</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2159" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a5a5e5e167c6cb206ea61d86cf030adb5" prot="public" static="no">
        <name>TUINT24</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2160" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7f2af02b4c87ac0d4804ad8b5437d48d" prot="public" static="no">
        <name>TUINT32</name>
        <initializer>24</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2161" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a154fa3416f08de2b073fe6aef8c0104d" prot="public" static="no">
        <name>TFLOAT16</name>
        <initializer>12.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2162" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a340a46ea4717ab906196ee4ada26c0a0" prot="public" static="no">
        <name>TFLOAT32</name>
        <initializer>14.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2163" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a05a270325382e9d22be6317760dc800a" prot="public" static="no">
        <name>TFLOAT64</name>
        <initializer>18.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2164" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ad7d1fa7b9a59ec5eba97dd784cbc29e9" prot="public" static="no">
        <name>TSTRING</name>
        <param><defname>N</defname></param>
        <initializer><ref refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" kindref="member">_NOTE_C_STRINGIZE</ref>(N)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2165" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a465bf5c669736c4f4d64d185d736c5bb" prot="public" static="no">
        <name>TSTRINGV</name>
        <initializer><ref refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" kindref="member">_NOTE_C_STRINGIZE</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2166" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="2166" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="note_8h_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" prot="public">
          <name>NOTE_C_INTERFACE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" prot="public">
          <name>NOTE_C_INTERFACE_SERIAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" prot="public">
          <name>NOTE_C_INTERFACE_I2C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="33" column="1" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="33" bodyend="37"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" prot="public" static="no">
        <type>double</type>
        <definition>typedef double JNUMBER</definition>
        <argsstring></argsstring>
        <name>JNUMBER</name>
        <briefdescription>
<para>The floating point type used for JSON handling in note-c. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="86" column="16" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t JINTEGER</definition>
        <argsstring></argsstring>
        <name>JINTEGER</name>
        <briefdescription>
<para>The signed integer type used for JSON handling in note-c. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="92" column="17" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1aa40439c159fdacb5de8314453a6cc241" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t JUINTEGER</definition>
        <argsstring></argsstring>
        <name>JUINTEGER</name>
        <briefdescription>
<para>The unsigned integer type used for JSON handling in note-c. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="99" column="18" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" prot="public" static="no">
        <type><ref refid="note_8h_1aa40439c159fdacb5de8314453a6cc241" kindref="member">JUINTEGER</ref></type>
        <definition>typedef JUINTEGER JTIME</definition>
        <argsstring></argsstring>
        <name>JTIME</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="104" column="19" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" prot="public" static="no">
        <type>void(*</type>
        <definition>delayMsFn</definition>
        <argsstring>)(uint32_t ms)</argsstring>
        <name>delayMsFn</name>
        <briefdescription>
<para>The type for the millisecond delay hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to delay for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="123" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" prot="public" static="no">
        <type>void(*</type>
        <definition>freeFn</definition>
        <argsstring>)(void *mem)</argsstring>
        <name>freeFn</name>
        <briefdescription>
<para>The type for the memory freeing hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="132" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>getMsFn</definition>
        <argsstring>)(void)</argsstring>
        <name>getMsFn</name>
        <briefdescription>
<para>The type for the millisecond counter hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the millisecond counter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="141" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" prot="public" static="no">
        <type>size_t(*</type>
        <definition>debugOutputFn</definition>
        <argsstring>)(const char *text)</argsstring>
        <name>debugOutputFn</name>
        <briefdescription>
<para>The type for the debug output hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug text to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of characters written, or 0 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="152" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" prot="public" static="no">
        <type>const char *(*</type>
        <definition>i2cReceiveFn</definition>
        <argsstring>)(uint16_t address, uint8_t *rxBuf, uint16_t rxBufSize, uint32_t *available)</argsstring>
        <name>i2cReceiveFn</name>
        <briefdescription>
<para>The type for the I2C receive hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to receive a buffer of bytes from the Notecard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard sending the data to receive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to hold the data received from the Notecard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of rxBuf. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes remaining to be received, if any.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success and an error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="182" column="15" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1ab18cc9957da000e5a05db53d4543d26b" prot="public" static="no">
        <type>bool(*</type>
        <definition>i2cResetFn</definition>
        <argsstring>)(uint16_t address)</argsstring>
        <name>i2cResetFn</name>
        <briefdescription>
<para>The type for the I2C reset hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to reset the I2C peripheral used to communicate with the Notecard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="195" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a841b338ac017194680b08ec57c179efc" prot="public" static="no">
        <type>const char *(*</type>
        <definition>i2cTransmitFn</definition>
        <argsstring>)(uint16_t address, uint8_t *txBuf, uint16_t txBufSize)</argsstring>
        <name>i2cTransmitFn</name>
        <briefdescription>
<para>The type for the I2C transmit hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to send a buffer of bytes to the Notecard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard to transmit the data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of bytes to transmit to the Notecard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of <computeroutput>txBuf</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success and an error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="210" column="15" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1af700faf8575fb2f45c3881786624b4d6" prot="public" static="no">
        <type>void *(*</type>
        <definition>mallocFn</definition>
        <argsstring>)(size_t size)</argsstring>
        <name>mallocFn</name>
        <briefdescription>
<para>The type for the memory allocation hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly allocated memory or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="222" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1ac9d4324784f851631c22f78099225463" prot="public" static="no">
        <type>void(*</type>
        <definition>mutexFn</definition>
        <argsstring>)(void)</argsstring>
        <name>mutexFn</name>
        <briefdescription>
<para>The type for the various mutex (i.e. lock/unlock) hooks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="229" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a58f8d48fe891877b7702a013e63e6991" prot="public" static="no">
        <type>bool(*</type>
        <definition>serialAvailableFn</definition>
        <argsstring>)(void)</argsstring>
        <name>serialAvailableFn</name>
        <briefdescription>
<para>The type for the serial available hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if there&apos;s data to read and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="238" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" prot="public" static="no">
        <type>char(*</type>
        <definition>serialReceiveFn</definition>
        <argsstring>)(void)</argsstring>
        <name>serialReceiveFn</name>
        <briefdescription>
<para>The type for the serial receive hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The received byte. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="247" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a75873a7790764116d88f80aaaf23263b" prot="public" static="no">
        <type>bool(*</type>
        <definition>serialResetFn</definition>
        <argsstring>)(void)</argsstring>
        <name>serialResetFn</name>
        <briefdescription>
<para>The type for the serial reset hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to reset the serial peripheral used to communicate with the Notecard.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> on success and <computeroutput>false</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="259" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" prot="public" static="no">
        <type>void(*</type>
        <definition>serialTransmitFn</definition>
        <argsstring>)(uint8_t *txBuf, size_t txBufSize, bool flush)</argsstring>
        <name>serialTransmitFn</name>
        <briefdescription>
<para>The type for the serial transmit hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of bytes to transmit to the Notecard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of <computeroutput>txBuf</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, flush the serial peripheral&apos;s transmit buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="270" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" prot="public" static="no">
        <type>bool(*</type>
        <definition>txnStartFn</definition>
        <argsstring>)(uint32_t timeoutMs)</argsstring>
        <name>txnStartFn</name>
        <briefdescription>
<para>The type for the transaction start hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>Transaction timeout in milliseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the transaction was started successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="281" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a563ad03ff093058d955306e551e32c0d" prot="public" static="no">
        <type>void(*</type>
        <definition>txnStopFn</definition>
        <argsstring>)(void)</argsstring>
        <name>txnStopFn</name>
        <briefdescription>
<para>The type for the transaction stop hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="288" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="288" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="note_8h_1a6358096b5a9e5c69a4f56b12e80092fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteReset</definition>
        <argsstring>(void)</argsstring>
        <name>NoteReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset the Notecard, clearing any error state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reset was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
Reset the Notecard, clearing any error state.</para>
<para><simplesect kind="return"><para>True if the reset was successful and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="297" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="766" bodyend="772" declfile="/home/runner/work/note-c/note-c/note.h" declline="297" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6c62afa66443f9dbb0a36bf9f76e9896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteResetRequired</definition>
        <argsstring>(void)</argsstring>
        <name>NoteResetRequired</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Mark that a Notecard reset is required on the next transaction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets an internal flag indicating that the Notecard should be reset before the next communication attempt.</para>
<para>Mark that a Notecard reset is required on the next transaction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="304" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="756" bodyend="759" declfile="/home/runner/work/note-c/note-c/note.h" declline="304" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a76f6fa9b4401f7ba8563bc3a548ad59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteNewRequest</definition>
        <argsstring>(const char *request)</argsstring>
        <name>NoteNewRequest</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Create a new request JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a dynamically allocated <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with one field <computeroutput>&quot;req&quot;</computeroutput> whose value is the passed in request string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the Notecard API request (e.g., &quot;card.version&quot;).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a newly allocated JSON object with the &quot;req&quot; field populated, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="319" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="173" bodyend="180" declfile="/home/runner/work/note-c/note-c/note.h" declline="319" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a93f6be68d755b58784aa60d656440a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteNewCommand</definition>
        <argsstring>(const char *request)</argsstring>
        <name>NoteNewCommand</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Create a new command JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a dynamically allocated <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with one field <computeroutput>&quot;cmd&quot;</computeroutput> whose value is the passed in request string. Commands are similar to requests, but the Notecard does not send a response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the Notecard API command (e.g., &quot;card.restart&quot;).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a newly allocated JSON object with the &quot;cmd&quot; field populated, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="332" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="182" bodyend="189" declfile="/home/runner/work/note-c/note-c/note.h" declline="332" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a234931d7639db0c292c27308aafbae75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteRequestResponse</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteRequestResponse</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="346" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="220" bodyend="232" declfile="/home/runner/work/note-c/note-c/note.h" declline="346" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aef1204c75ca0b2300f5ea55bb52586c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteRequestResponseWithRetry</definition>
        <argsstring>(J *req, uint32_t timeoutSeconds)</argsstring>
        <name>NoteRequestResponseWithRetry</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutSeconds</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard, retrying until it succeeds or times out, then return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time limit for retries, in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="note"><para>Timeouts may occur when either there is no response, or if the response contains an I/O error.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="365" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="234" bodyend="277" declfile="/home/runner/work/note-c/note-c/note.h" declline="365" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a8b39b3aa0c27493a4fa81509cc8d527d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * NoteRequestResponseJSON</definition>
        <argsstring>(const char *reqJSON)</argsstring>
        <name>NoteRequestResponseJSON</name>
        <param>
          <type>const char *</type>
          <declname>reqJSON</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response as JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike NoteRequestResponse, this function expects the request to be a valid JSON C-string, rather than a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. The string is expected to be newline-terminated, otherwise the call produces undefined behavior. The response is returned as a dynamically allocated JSON C-string. The response is newline-terminated, just like the request. The caller is responsible for freeing the response string. If the request was a command (i.e. it uses &quot;cmd&quot; instead of &quot;req&quot;), this function returns NULL, since commands do not have a response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reqJSON</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid newline-terminated JSON C-string containing the request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newline-terminated JSON C-string with the response, or NULL if there was no response or if there was an error.</para>
</simplesect>
<simplesect kind="note"><para>When a &quot;cmd&quot; is sent, it is not possible to determine if an error occurred.</para>
</simplesect>
<simplesect kind="note"><para>Unlike the <computeroutput>NoteRequest*</computeroutput> functions, this function does not automatically free the request JSON string. It is not possible to know if the parameter is a string literal. As such, it is the caller&apos;s responsibility to manage the memory associated with the request string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="390" column="7" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="279" bodyend="409" declfile="/home/runner/work/note-c/note-c/note.h" declline="390" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0efe670b7352fa544a82752342664ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" kindref="member">NOTE_C_DEPRECATED</ref> void</type>
        <definition>NOTE_C_DEPRECATED void NoteSuspendTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSuspendTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Suppress showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="391" column="24" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="153" bodyend="156" declfile="/home/runner/work/note-c/note-c/note.h" declline="391" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5010ac0e91e3128fa2f81b94a4d884b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" kindref="member">NOTE_C_DEPRECATED</ref> void</type>
        <definition>NOTE_C_DEPRECATED void NoteResumeTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>NoteResumeTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resume showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="392" column="24" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="161" bodyend="164" declfile="/home/runner/work/note-c/note-c/note.h" declline="392" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1adde35249318a7b5cc3f1c2393685b75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteDebugSyncStatus</definition>
        <argsstring>(int pollFrequencyMs, int maxLevel)</argsstring>
        <name>NoteDebugSyncStatus</name>
        <param>
          <type>int</type>
          <declname>pollFrequencyMs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxLevel</declname>
        </param>
        <briefdescription>
<para>Enable debug output for sync status monitoring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollFrequencyMs</parametername>
</parameternamelist>
<parameterdescription>
<para>How often to poll for sync status, in milliseconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLevel</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum detail level for sync status output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if debugging was enabled successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="406" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="406" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab1227db7501f0b979ed894fb764790e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRequest</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteRequest</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not. The response from the Notecard, if any, is freed and not returned to the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if successful and <computeroutput>false</computeroutput> if an error occurs (e.g. out of memory or the response from the Notecard has an &quot;err&quot; field). If req is a command rather than a request, a <computeroutput>true</computeroutput> return value indicates that the command was sent without error. However, since the Notecard sends no response to commands, it does not guarantee that the command was received and processed by the Notecard.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1a234931d7639db0c292c27308aafbae75" kindref="member">NoteRequestResponse</ref> if you need to work with the response. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="425" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="191" bodyend="203" declfile="/home/runner/work/note-c/note-c/note.h" declline="425" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7eef6ff395f1e94934d3f9eb99bbcb9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRequestWithRetry</definition>
        <argsstring>(J *req, uint32_t timeoutSeconds)</argsstring>
        <name>NoteRequestWithRetry</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutSeconds</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard, retrying until it succeeds or times out. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not. The response from the Notecard, if any, is freed and not returned to the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time limit for retries, in seconds, if there is no response, or if the response contains an I/O error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if successful and <computeroutput>false</computeroutput> if an error occurs (e.g. out of memory or the response from the Notecard has an &quot;err&quot; field).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1aef1204c75ca0b2300f5ea55bb52586c5" kindref="member">NoteRequestResponseWithRetry</ref> if you need to work with the response. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="442" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="205" bodyend="218" declfile="/home/runner/work/note-c/note-c/note.h" declline="442" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae5d81f097b364f4011d87e9934db363c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteSetRequestTimeout</definition>
        <argsstring>(uint32_t overrideSecs)</argsstring>
        <name>NoteSetRequestTimeout</name>
        <param>
          <type>uint32_t</type>
          <declname>overrideSecs</declname>
        </param>
        <briefdescription>
<para>Set the request timeout for Notecard transactions. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides control for transactions which must be tailored based upon the nature of the transaction being performed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overrideSecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in seconds (0 for default).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previous timeout value that was overridden. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="453" column="10" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="166" bodyend="171" declfile="/home/runner/work/note-c/note-c/note.h" declline="453" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a96424058d58bf4c3318eeb2c0fb3123d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteTransaction</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteTransaction</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>This function doesn&apos;t free the passed in request object. The caller is responsible for freeing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="483" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="411" bodyend="414" declfile="/home/runner/work/note-c/note-c/note.h" declline="483" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a1385294098059d94d366e2fd843358e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteErrorContains</definition>
        <argsstring>(const char *errstr, const char *errtype)</argsstring>
        <name>NoteErrorContains</name>
        <param>
          <type>const char *</type>
          <declname>errstr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>errtype</declname>
        </param>
        <briefdescription>
<para>Check if an error string contains a specific error type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errstr</parametername>
</parameternamelist>
<parameterdescription>
<para>The error string to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The error type to search for in errstr.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the error string contains the specified error type, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="note"><para>Only Notecard errors enclosed in <computeroutput>{}</computeroutput> (e.g. <computeroutput>{io}</computeroutput> for an I/O error) are guaranteed by the API. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="496" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="774" bodyend="777" declfile="/home/runner/work/note-c/note-c/note.h" declline="496" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3b8d73d3dc3b3315b1be8260e83f10ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteErrorClean</definition>
        <argsstring>(char *errbuf)</argsstring>
        <name>NoteErrorClean</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
        </param>
        <briefdescription>
<para>Clean up an error string by removing all bracketed tags. </para>
        </briefdescription>
        <detaileddescription>
<para>Notecard errors are enclosed in <computeroutput>{}</computeroutput> (e.g. <computeroutput>{io}</computeroutput> for an I/O error). This function takes the input string and removes all bracketed errors from it, meaning it removes any substrings matching the pattern <computeroutput>{some error string}</computeroutput>, including the braces.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A C-string to to clean of errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="507" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="779" bodyend="797" declfile="/home/runner/work/note-c/note-c/note.h" declline="507" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6844f5cd4d6e38d65c090dba954321b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDebugOutput</definition>
        <argsstring>(debugOutputFn fn)</argsstring>
        <name>NoteSetFnDebugOutput</name>
        <param>
          <type><ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the debug output function hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the debug output function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="516" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="294" bodyend="299" declfile="/home/runner/work/note-c/note-c/note.h" declline="516" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3454c54d190d3a03d748ca2b38c57a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnDebugOutput</definition>
        <argsstring>(debugOutputFn *fn)</argsstring>
        <name>NoteGetFnDebugOutput</name>
        <param>
          <type><ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref> *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Get the currently set debug output function hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current debug output function pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="522" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="701" bodyend="706" declfile="/home/runner/work/note-c/note-c/note.h" declline="522" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a946facc30c7f3b5f1820db01fde9fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnTransaction</definition>
        <argsstring>(txnStartFn startFn, txnStopFn stopFn)</argsstring>
        <name>NoteSetFnTransaction</name>
        <param>
          <type><ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref></type>
          <declname>startFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref></type>
          <declname>stopFn</declname>
        </param>
        <briefdescription>
<para>Set the transaction hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when starting a transaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when stopping a transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="548" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="313" bodyend="319" declfile="/home/runner/work/note-c/note-c/note.h" declline="548" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0bb77ab0431d89f36ff32ecbb6b005fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnTransaction</definition>
        <argsstring>(txnStartFn *startFn, txnStopFn *stopFn)</argsstring>
        <name>NoteGetFnTransaction</name>
        <param>
          <type><ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref> *</type>
          <declname>startFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref> *</type>
          <declname>stopFn</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific transaction hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current transaction start function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current transaction stop function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="558" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="725" bodyend="735" declfile="/home/runner/work/note-c/note-c/note.h" declline="558" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a81210c0d43535f1945083f7b3fcad67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn, mutexFn lockNotefn, mutexFn unlockNotefn)</argsstring>
        <name>NoteSetFnMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockNotefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockNotefn</declname>
        </param>
        <briefdescription>
<para>Set the mutex functions for I2C and Notecard access protection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock I2C access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock I2C access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock Notecard access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock Notecard access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="567" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="321" bodyend="327" declfile="/home/runner/work/note-c/note-c/note.h" declline="567" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a357a6aca3b4ea07d29f521884f1875a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnMutex</definition>
        <argsstring>(mutexFn *lockI2Cfn, mutexFn *unlockI2Cfn, mutexFn *lockNotefn, mutexFn *unlockNotefn)</argsstring>
        <name>NoteGetFnMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockNotefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockNotefn</declname>
        </param>
        <briefdescription>
<para>Get the currently set mutex functions for I2C and Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C unlock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Note lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Note unlock function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="580" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="737" bodyend="752" declfile="/home/runner/work/note-c/note-c/note.h" declline="580" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6879f42e34e075aec82b499fd5ddd12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2CMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn)</argsstring>
        <name>NoteSetFnI2CMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <briefdescription>
<para>Set the I2C mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock I2C access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock I2C access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="588" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="329" bodyend="333" declfile="/home/runner/work/note-c/note-c/note.h" declline="588" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a14670a712ba4812bdbaaddbf3189f1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnI2CMutex</definition>
        <argsstring>(mutexFn *lockI2Cfn, mutexFn *unlockI2Cfn)</argsstring>
        <name>NoteGetFnI2CMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockI2Cfn</declname>
        </param>
        <briefdescription>
<para>Get the currently set I2C mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C unlock function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="598" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="754" bodyend="762" declfile="/home/runner/work/note-c/note-c/note.h" declline="598" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a534aa37f7e753dd06a847f429f8e743f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnNoteMutex</definition>
        <argsstring>(mutexFn lockFn, mutexFn unlockFn)</argsstring>
        <name>NoteSetFnNoteMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockFn</declname>
        </param>
        <briefdescription>
<para>Set the Notecard mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock Notecard access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock Notecard access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="605" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="335" bodyend="339" declfile="/home/runner/work/note-c/note-c/note.h" declline="605" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abc8585fc3143b157ac27fc5938378249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnNoteMutex</definition>
        <argsstring>(mutexFn *lockFn, mutexFn *unlockFn)</argsstring>
        <name>NoteGetFnNoteMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockFn</declname>
        </param>
        <briefdescription>
<para>Get the currently set Notecard mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Notecard lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Notecard unlock function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="615" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="764" bodyend="772" declfile="/home/runner/work/note-c/note-c/note.h" declline="615" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a57a711029fed4148da73679ff2c8a154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDefault</definition>
        <argsstring>(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn)</argsstring>
        <name>NoteSetFnDefault</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>millisfn</declname>
        </param>
        <briefdescription>
<para>Set the default system functions (memory allocation, delay, timing). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory allocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory deallocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for millisecond delays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to get millisecond counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>These functions are used if no other system functions are set. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="628" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="248" bodyend="264" declfile="/home/runner/work/note-c/note-c/note.h" declline="628" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad334248744d5387da78ca09c3498f397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFn</definition>
        <argsstring>(mallocFn mallocHook, freeFn freeHook, delayMsFn delayMsHook, getMsFn getMsHook)</argsstring>
        <name>NoteSetFn</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freeHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayMsHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>getMsHook</declname>
        </param>
        <briefdescription>
<para>Set the system hook functions (memory allocation, delay, timing). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory allocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory deallocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for millisecond delays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to get millisecond counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function overrides any previously set system functions. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="642" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="266" bodyend="275" declfile="/home/runner/work/note-c/note-c/note.h" declline="642" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7f3bdc32e515a57d8cfe959cc021b76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFn</definition>
        <argsstring>(mallocFn *mallocHook, freeFn *freeHook, delayMsFn *delayMsHook, getMsFn *getMsHook)</argsstring>
        <name>NoteGetFn</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref> *</type>
          <declname>mallocHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref> *</type>
          <declname>freeHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref> *</type>
          <declname>delayMsHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref> *</type>
          <declname>getMsHook</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific memory and timing hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current memory allocation function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current memory deallocation function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current delay function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current millisecond counter function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="655" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="774" bodyend="791" declfile="/home/runner/work/note-c/note-c/note.h" declline="655" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a85c66fdcef6d9ea044a9adc37af5afa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnSerial</definition>
        <argsstring>(serialResetFn resetFn, serialTransmitFn transmitFn, serialAvailableFn availFn, serialReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnSerial</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific serial communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the serial peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via serial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to check if serial data is available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive serial data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function overrides any previously set serial functions. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to serial. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="670" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="341" bodyend="354" declfile="/home/runner/work/note-c/note-c/note.h" declline="670" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa0d08eb556c9cf1ec28c3cd5f86d3eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnSerialDefault</definition>
        <argsstring>(serialResetFn resetFn, serialTransmitFn transmitFn, serialAvailableFn availFn, serialReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnSerialDefault</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the default serial communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the serial peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via serial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to check if serial data is available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive serial data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>These functions are used if no other serial functions are set. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to serial, if unset. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="685" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="356" bodyend="379" declfile="/home/runner/work/note-c/note-c/note.h" declline="685" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2bd990e82a522241e86b03bbcbb6bb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnSerial</definition>
        <argsstring>(serialResetFn *resetFn, serialTransmitFn *transmitFn, serialAvailableFn *availFn, serialReceiveFn *receiveFn)</argsstring>
        <name>NoteGetFnSerial</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref> *</type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref> *</type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref> *</type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref> *</type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific serial communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial available function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial receive function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="698" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="793" bodyend="810" declfile="/home/runner/work/note-c/note-c/note.h" declline="698" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abeb555883ff039880048164763c3b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2C</definition>
        <argsstring>(uint32_t notecardAddr, uint32_t maxTransmitSize, i2cResetFn resetFn, i2cTransmitFn transmitFn, i2cReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnI2C</name>
        <param>
          <type>uint32_t</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific I2C communication hook functions, address and MTU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C address of the Notecard (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to transmit in a single I2C segment (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the I2C peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via I2C. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive data via I2C.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function overrides any previously set I2C functions. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to I2C. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="714" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="381" bodyend="397" declfile="/home/runner/work/note-c/note-c/note.h" declline="714" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a840dff8348b52999ccc3b1673a3170df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2CDefault</definition>
        <argsstring>(uint32_t notecardAddr, uint32_t maxTransmitSize, i2cResetFn resetFn, i2cTransmitFn transmitFn, i2cReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnI2CDefault</name>
        <param>
          <type>uint32_t</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the default I2C communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C address of the Notecard (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to transmit in a single I2C segment (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the I2C peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via I2C. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive data via I2C.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>These functions are used if no other I2C functions are set. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to I2C, if unset. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="731" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="399" bodyend="426" declfile="/home/runner/work/note-c/note-c/note.h" declline="731" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a16d6a60ccab426ff4311c590e909c8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnI2C</definition>
        <argsstring>(uint32_t *notecardAddr, uint32_t *maxTransmitSize, i2cResetFn *resetFn, i2cTransmitFn *transmitFn, i2cReceiveFn *receiveFn)</argsstring>
        <name>NoteGetFnI2C</name>
        <param>
          <type>uint32_t *</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref> *</type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref> *</type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref> *</type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific I2C communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Notecard I2C address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current maximum transmit size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C receive function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="746" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="812" bodyend="833" declfile="/home/runner/work/note-c/note-c/note.h" declline="746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a8b4baf1bb5b117eb312682e215e8f209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetActiveInterface</definition>
        <argsstring>(int interface)</argsstring>
        <name>NoteSetActiveInterface</name>
        <param>
          <type>int</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
<para>Set the active communication interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired interface to use. One of:<itemizedlist>
<listitem><para>NOTE_C_INTERFACE_NONE (default)</para>
</listitem><listitem><para>NOTE_C_INTERFACE_SERIAL</para>
</listitem><listitem><para>NOTE_C_INTERFACE_I2C</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="760" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="241" bodyend="246" declfile="/home/runner/work/note-c/note-c/note.h" declline="760" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a77448627bb79c6051b577ad344b14fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int NoteGetActiveInterface</definition>
        <argsstring>(void)</argsstring>
        <name>NoteGetActiveInterface</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the currently active communication interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The active interface (NOTE_C_INTERFACE_SERIAL, NOTE_C_INTERFACE_I2C, or NOTE_C_INTERFACE_NONE).</para>
</simplesect>
Get the currently active communication interface.</para>
<para><simplesect kind="return"><para>The active interface. One of:<itemizedlist>
<listitem><para>NOTE_C_INTERFACE_NONE (default)</para>
</listitem><listitem><para>NOTE_C_INTERFACE_SERIAL</para>
</listitem><listitem><para>NOTE_C_INTERFACE_I2C </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="766" column="5" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="209" bodyend="212" declfile="/home/runner/work/note-c/note-c/note.h" declline="766" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a8648db242df0d5ac68334ab93ee5fa0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDisabled</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSetFnDisabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable all Notecard communication functions. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets all hook functions to disabled/stub implementations.</para>
<para>Disable all Notecard communication functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="772" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="433" bodyend="440" declfile="/home/runner/work/note-c/note-c/note.h" declline="772" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a057865626ae6b0fe8e456056c581a7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetI2CAddress</definition>
        <argsstring>(uint32_t i2cAddr)</argsstring>
        <name>NoteSetI2CAddress</name>
        <param>
          <type>uint32_t</type>
          <declname>i2cAddr</declname>
        </param>
        <briefdescription>
<para>Set the I2C address for Notecard communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2cAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address to use for the Notecard. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="778" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="973" bodyend="976" declfile="/home/runner/work/note-c/note-c/note.h" declline="778" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5464955345634f810de1360880a629c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetI2CMtu</definition>
        <argsstring>(uint32_t i2cMtu)</argsstring>
        <name>NoteSetI2CMtu</name>
        <param>
          <type>uint32_t</type>
          <declname>i2cMtu</declname>
        </param>
        <briefdescription>
<para>Set the MTU for I2C communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The MTU is the maximum number of bytes that can be sent to or received from the Notecard in a single I2C transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2cMtu</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum transmission unit (MTU) for I2C communication. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="787" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="978" bodyend="981" declfile="/home/runner/work/note-c/note-c/note.h" declline="787" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa23d9b92604e9b490710a707cd0aa37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetI2CAddress</definition>
        <argsstring>(uint32_t *i2cAddr)</argsstring>
        <name>NoteGetI2CAddress</name>
        <param>
          <type>uint32_t *</type>
          <declname>i2cAddr</declname>
        </param>
        <briefdescription>
<para>Get the current I2C address for Notecard communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i2cAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="793" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="835" bodyend="840" declfile="/home/runner/work/note-c/note-c/note.h" declline="793" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad5d209218245579877cdbfb667208dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetI2CMtu</definition>
        <argsstring>(uint32_t *i2cMtu)</argsstring>
        <name>NoteGetI2CMtu</name>
        <param>
          <type>uint32_t *</type>
          <declname>i2cMtu</declname>
        </param>
        <briefdescription>
<para>Get the current MTU for I2C communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The MTU is the maximum number of bytes that can be sent to or received from the Notecard in a single I2C transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i2cMtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C MTU. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="802" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="842" bodyend="847" declfile="/home/runner/work/note-c/note-c/note.h" declline="802" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0bb27773cb7cf2e5b994261fbe835103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteUserAgent</definition>
        <argsstring>(void)</argsstring>
        <name>NoteUserAgent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current user agent JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A JSON object containing user agent information, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="873" column="3" declfile="/home/runner/work/note-c/note-c/note.h" declline="873" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad09beb502758c3c20ea01d0b5940a751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteUserAgentUpdate</definition>
        <argsstring>(J *ua)</argsstring>
        <name>NoteUserAgentUpdate</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>ua</declname>
        </param>
        <briefdescription>
<para>Update the user agent with additional information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ua</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object containing user agent updates to merge. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="879" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="879" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a35ebbb9e71fc6822ec7848df598b1b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetUserAgent</definition>
        <argsstring>(char *agent)</argsstring>
        <name>NoteSetUserAgent</name>
        <param>
          <type>char *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
<para>Set the user agent string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>agent</parametername>
</parameternamelist>
<parameterdescription>
<para>The user agent string to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="885" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="885" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6586f487873db10a6cca9f4f2812f2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetUserAgentOS</definition>
        <argsstring>(char *os_name, char *os_platform, char *os_family, char *os_version)</argsstring>
        <name>NoteSetUserAgentOS</name>
        <param>
          <type>char *</type>
          <declname>os_name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>os_platform</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>os_family</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>os_version</declname>
        </param>
        <briefdescription>
<para>Set the operating system information in the user agent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The operating system name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os_platform</parametername>
</parameternamelist>
<parameterdescription>
<para>The operating system platform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os_family</parametername>
</parameternamelist>
<parameterdescription>
<para>The operating system family. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os_version</parametername>
</parameternamelist>
<parameterdescription>
<para>The operating system version. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="894" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="894" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a06db056eec95b5d3bce80a00d87720d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetUserAgentCPU</definition>
        <argsstring>(int cpu_mem, int cpu_mhz, int cpu_cores, char *cpu_vendor, char *cpu_name)</argsstring>
        <name>NoteSetUserAgentCPU</name>
        <param>
          <type>int</type>
          <declname>cpu_mem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu_mhz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu_cores</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>cpu_vendor</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>cpu_name</declname>
        </param>
        <briefdescription>
<para>Set the CPU information in the user agent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu_mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Available CPU memory in kilobytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu_mhz</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU speed in MHz. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu_cores</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of CPU cores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu_vendor</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU vendor name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu_name</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU model name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="904" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="904" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1acc098e468887e7622ee6ecda06fe1fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebug</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>NoteDebug</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="913" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="474" bodyend="483" declfile="/home/runner/work/note-c/note-c/note.h" declline="913" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1afac93e9bae7c5cc4c7094f41accde0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugln</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>NoteDebugln</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message followed by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="919" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="464" bodyend="472" declfile="/home/runner/work/note-c/note-c/note.h" declline="919" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a17c60e911144d80329e264eba37e215d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugIntln</definition>
        <argsstring>(const char *msg, int n)</argsstring>
        <name>NoteDebugIntln</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Output a debug message with an integer value appended, terminated by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to append to the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="927" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="453" bodyend="462" declfile="/home/runner/work/note-c/note-c/note.h" declline="927" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab239dae9dfc343d2569fe87041ae7d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>NoteDebugf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Output a formatted debug message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The printf-style format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments for the format string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="934" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="934" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevel</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevel</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message with a specified log level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level for this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The message will be dropped if the specified level is less than or equal to the current log level. </para>
</simplesect>
<simplesect kind="note"><para>See the NOTE_C_LOG_LEVEL_* macros for possible values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="951" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="485" bodyend="497" declfile="/home/runner/work/note-c/note-c/note.h" declline="951" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aea4a872558f91cfdba679dea15e39b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevelLn</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevelLn</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message with a specified log level, followed by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level for this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The message will be dropped if the specified level is less than or equal to the current log level. </para>
</simplesect>
<simplesect kind="note"><para>See the NOTE_C_LOG_LEVEL_* macros for possible values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="962" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="499" bodyend="511" declfile="/home/runner/work/note-c/note-c/note.h" declline="962" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a8b39ccd734b1d0602cf6f3612a25e5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetLogLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>NoteSetLogLevel</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the current log level for debug output filtering. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level to set:<itemizedlist>
<listitem><para>NOTE_C_LOG_LEVEL_ERROR</para>
</listitem><listitem><para>NOTE_C_LOG_LEVEL_WARN</para>
</listitem><listitem><para>NOTE_C_LOG_LEVEL_INFO</para>
</listitem><listitem><para>NOTE_C_LOG_LEVEL_DEBUG </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1025" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="444" bodyend="451" declfile="/home/runner/work/note-c/note-c/note.h" declline="1025" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae66d7015d2a0810abfc656b88e6e6a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * NoteMalloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>NoteMalloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory chunk using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of bytes to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated memory, or NULL if allocation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1034" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="569" bodyend="593" declfile="/home/runner/work/note-c/note-c/note.h" declline="1034" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a34e3da9b2215a8b7052dccc2365e3085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>NoteFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1040" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="595" bodyend="609" declfile="/home/runner/work/note-c/note-c/note.h" declline="1040" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a4dcd12c5b2ec9d2acd78363a2e41e698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteGetMs</definition>
        <argsstring>(void)</argsstring>
        <name>NoteGetMs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current millisecond counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current millisecond counter value.</para>
</simplesect>
Get the current millisecond counter value.</para>
<para><simplesect kind="return"><para>The current milliseconds value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1046" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="520" bodyend="526" declfile="/home/runner/work/note-c/note-c/note.h" declline="1046" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a30ebf8f80fc647865819c842adc53816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDelayMs</definition>
        <argsstring>(uint32_t ms)</argsstring>
        <name>NoteDelayMs</name>
        <param>
          <type>uint32_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Use platform hook to delay for the specified number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milliseconds to delay. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1052" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="528" bodyend="533" declfile="/home/runner/work/note-c/note-c/note.h" declline="1052" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a195386217d2b20709846d45780af2013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteLockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteLockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock I2C access for thread safety. </para>
        </briefdescription>
        <detaileddescription>
<para>Lock I2C access for thread safety. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1056" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="616" bodyend="621" declfile="/home/runner/work/note-c/note-c/note.h" declline="1056" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2a4589fef84a01f2a1bee1c5a7053fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteUnlockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteUnlockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock I2C access. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlock I2C access. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1060" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="628" bodyend="633" declfile="/home/runner/work/note-c/note-c/note.h" declline="1060" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a57dcffb142faaef2714839d27afe5be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CAddress</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CAddress</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current I2C address being used for Notecard communication. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The I2C address of the Notecard.</para>
</simplesect>
<simplesect kind="note"><para>If the address remains unset or is set to 0x00 using <computeroutput>NoteSetI2CAddress</computeroutput>, the address will be returned as <computeroutput>NOTE_I2C_ADDRESS_DEFAULT</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1aa23d9b92604e9b490710a707cd0aa37c" kindref="member">NoteGetI2CAddress</ref></para>
</simplesect>
Get the current I2C address being used for Notecard communication.</para>
<para><simplesect kind="return"><para>The current I2C address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1071" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="965" bodyend="971" declfile="/home/runner/work/note-c/note-c/note.h" declline="1071" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a35bbb8179be3a72ab7ec302dcbfad9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CMax</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CMax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current MTU for I2C communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The MTU is the maximum number of bytes that can be sent to or received from the Notecard in a single I2C transaction.</para>
<para><simplesect kind="return"><para>Maximum number of bytes that can be transferred in a single I2C transaction.</para>
</simplesect>
<simplesect kind="note"><para>If the MTU remains unset or is set to 0 using NoteSetI2CMtu, the MTU will be returned as NOTE_I2C_MTU_DEFAULT. </para>
</simplesect>
<simplesect kind="note"><para>The MTU value returned will always be less than or equal to <computeroutput>NOTE_I2C_MTU_MAX</computeroutput>. If a value larger than <computeroutput>NOTE_I2C_MTU_MAX</computeroutput> was set using <computeroutput>NoteSetI2CMtu</computeroutput>, the MTU will be silently reduced to <computeroutput>NOTE_I2C_MTU_MAX</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1ad5d209218245579877cdbfb667208dcc" kindref="member">NoteGetI2CMtu</ref></para>
</simplesect>
Get the current MTU for I2C communication with the Notecard.</para>
<para><simplesect kind="return"><para>A 32-bit integer of the maximum number of bytes per I2C segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1088" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="990" bodyend="1002" declfile="/home/runner/work/note-c/note-c/note.h" declline="1088" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae7537bf172173234ecb77a6e0af513f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteMemAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>NoteMemAvailable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the amount of available memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Amount of available memory in bytes, or 0 if unknown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1094" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1094" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a36d63199ff85bd480eafc6b547e7f9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePrint</definition>
        <argsstring>(const char *text)</argsstring>
        <name>NotePrint</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Print text using the configured debug output function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to print.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the text was printed successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1102" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a17c3fa0521904ce276913ce0bd666fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NotePrintln</definition>
        <argsstring>(const char *line)</argsstring>
        <name>NotePrintln</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Print a line of text followed by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line of text to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1108" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aca48731908e450c955c6dc1f6b3381a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePrintf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>NotePrintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print formatted text using printf-style formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The printf-style format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments for the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the text was printed successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1117" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aeb79f86261de904967d433c1b5e9a1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t strlcpy</definition>
        <argsstring>(char *dst, const char *src, size_t siz)</argsstring>
        <name>strlcpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siz</declname>
        </param>
        <briefdescription>
<para>Safe string copy function. </para>
        </briefdescription>
        <detaileddescription>
<para>Copies up to siz-1 characters from src to dst, ensuring dst is always null-terminated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>siz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of destination buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of src string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1133" column="8" declfile="/home/runner/work/note-c/note-c/note.h" declline="1133" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae85b825a7f3d4dcf136b85949b646a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t strlcat</definition>
        <argsstring>(char *dst, const char *src, size_t siz)</argsstring>
        <name>strlcat</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siz</declname>
        </param>
        <briefdescription>
<para>Safe string concatenation function. </para>
        </briefdescription>
        <detaileddescription>
<para>Appends src to dst, ensuring the result is null-terminated and does not exceed siz characters total.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer containing existing string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source string to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>siz</parametername>
</parameternamelist>
<parameterdescription>
<para>Total size of destination buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total length of the string that would result from the concatenation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1146" column="8" declfile="/home/runner/work/note-c/note-c/note.h" declline="1146" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab4005e4eb92f95e4430147551c093a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JInit</definition>
        <argsstring>(void)</argsstring>
        <name>JInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the JSON subsystem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1153" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa2c94029f47ff6dab5fe3087d8efef4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JCheck</definition>
        <argsstring>(void)</argsstring>
        <name>JCheck</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the JSON subsystem for memory leaks or other issues. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1157" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6cfeede8f787bbfd890ec7deae8aca24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JIsPresent</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JIsPresent</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Check if a field is present in a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to look for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the field is present, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1166" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="19" bodyend="25" declfile="/home/runner/work/note-c/note-c/note.h" declline="1166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a66cca753ac78c92d0904ad74a33b8c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JGetString</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get a string value from a JSON object field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the string value, or an empty string (&quot;&quot;) if the field doesn&apos;t exist or isn&apos;t a string.</para>
</simplesect>
<simplesect kind="note"><para>The returned string is a pointer to the string contained in the JSON object. It is not a copy of the string, so once the JSON object is freed, the pointer is no longer valid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1180" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="27" bodyend="43" declfile="/home/runner/work/note-c/note-c/note.h" declline="1180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7e30c9120dbe63db3fbedd568f76ecf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JGetNumber</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetNumber</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get the number field from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numeric value, or 0.0f if the field doesn&apos;t exist or isn&apos;t a number.</para>
</simplesect>
<simplesect kind="note"><para>The returned value is the floating point representation of the number.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1a51518894ee545340a884089f64e34671" kindref="member">JGetBool</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1194" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="99" bodyend="112" declfile="/home/runner/work/note-c/note-c/note.h" declline="1194" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7422ca821f0402b0c0bd890558cbb254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JGetArray</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get an array object from a JSON object field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the JSON array (<computeroutput><ref refid="struct_j" kindref="compound">J</ref> *</computeroutput>), or <computeroutput>NULL</computeroutput> if the field doesn&apos;t exist or isn&apos;t an array.</para>
</simplesect>
<simplesect kind="note"><para>The returned JSON object is a pointer to the array contained in the parent JSON object. It is not a copy, so once the parent JSON object is freed, the pointer is no longer valid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1208" column="3" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="45" bodyend="58" declfile="/home/runner/work/note-c/note-c/note.h" declline="1208" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0fd01d5fe6235d3b194449a8e6ce4f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JGetObject</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get a JSON object from a JSON object field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the nested JSON object, or NULL if the field doesn&apos;t exist or isn&apos;t an object.</para>
</simplesect>
<simplesect kind="note"><para>The returned JSON object is a pointer to the object contained in the parent JSON object. It is not a copy, so once the parent JSON object is freed, the pointer is no longer valid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1222" column="3" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="60" bodyend="73" declfile="/home/runner/work/note-c/note-c/note.h" declline="1222" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a00b1ca83bdb8cc849114b973dd862d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
        <definition>JINTEGER JGetInt</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetInt</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get the integer value of a number field from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer value, or 0 if the field doesn&apos;t exist or isn&apos;t a number.</para>
</simplesect>
<simplesect kind="note"><para>The returned value is the integer representation of the number.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1a51518894ee545340a884089f64e34671" kindref="member">JGetBool</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1a7e30c9120dbe63db3fbedd568f76ecf7" kindref="member">JGetNumber</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1236" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="122" bodyend="135" declfile="/home/runner/work/note-c/note-c/note.h" declline="1236" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a51518894ee545340a884089f64e34671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JGetBool</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetBool</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get the value of a boolean field from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The boolean value, or <computeroutput>false</computeroutput> if the field doesn&apos;t exist or isn&apos;t a boolean.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1a7e30c9120dbe63db3fbedd568f76ecf7" kindref="member">JGetNumber</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1248" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="137" bodyend="150" declfile="/home/runner/work/note-c/note-c/note.h" declline="1248" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2b2a9c92f2833d424d1a7ab66b3533a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JNumberValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JNumberValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the numeric value from a JSON item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numeric value, or 0.0f if the item isn&apos;t a number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1256" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="91" bodyend="97" declfile="/home/runner/work/note-c/note-c/note.h" declline="1256" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abf4a22e53b5292fe4d65571159637cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JStringValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JStringValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the string value from a JSON item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the string value, or empty string if the item isn&apos;t a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1264" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="83" bodyend="89" declfile="/home/runner/work/note-c/note-c/note.h" declline="1264" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3e836494d9b3a6fc4e4b02dc2767df83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JBoolValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JBoolValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the boolean value from a JSON item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The boolean value, or false if the item isn&apos;t a boolean. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1272" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="75" bodyend="81" declfile="/home/runner/work/note-c/note-c/note.h" declline="1272" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a9f5aaa3fbaaee87de2b6119c7428b9dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
        <definition>JINTEGER JIntValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JIntValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the integer value from a JSON item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer value, or 0 if the item isn&apos;t an integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1280" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="114" bodyend="120" declfile="/home/runner/work/note-c/note-c/note.h" declline="1280" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aafb4b69e85bd5d9c2d1534688fd4176d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JIsNullString</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JIsNullString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Check if a JSON object field is NULL or an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the field is null, missing, or an empty string; <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1289" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="152" bodyend="171" declfile="/home/runner/work/note-c/note-c/note.h" declline="1289" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af4e9257e3b88d1b55441f15efd1bf0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JIsExactString</definition>
        <argsstring>(J *json, const char *field, const char *teststr)</argsstring>
        <name>JIsExactString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>teststr</declname>
        </param>
        <briefdescription>
<para>Check if a JSON object field exactly matches a test string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>teststr</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the field value exactly matches teststr, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1299" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="173" bodyend="192" declfile="/home/runner/work/note-c/note-c/note.h" declline="1299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a31742b8fc463be8e85fe6f1b269bf9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JContainsString</definition>
        <argsstring>(J *json, const char *field, const char *substr)</argsstring>
        <name>JContainsString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
<para>Check if a JSON object field contains a substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substr</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the field exists and contains the substring, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1309" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="194" bodyend="213" declfile="/home/runner/work/note-c/note-c/note.h" declline="1309" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a9378ea8eddda1f23c815b69591747846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JAddBinaryToObject</definition>
        <argsstring>(J *json, const char *fieldName, const void *binaryData, uint32_t binaryDataLen)</argsstring>
        <name>JAddBinaryToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>binaryData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binaryDataLen</declname>
        </param>
        <briefdescription>
<para>Add binary data to a JSON object as a base64-encoded string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldName</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binaryData</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of binary data to encode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binaryDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the binary data in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the string was successfully encoded and added to the object, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1321" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="215" bodyend="233" declfile="/home/runner/work/note-c/note-c/note.h" declline="1321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a4c5ca7aa585e06623f2788b86300538d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JGetBinaryFromObject</definition>
        <argsstring>(J *json, const char *fieldName, uint8_t **retBinaryData, uint32_t *retBinaryDataLen)</argsstring>
        <name>JGetBinaryFromObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>retBinaryData</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>retBinaryDataLen</declname>
        </param>
        <briefdescription>
<para>Decode a Base64-encoded string field in a JSON object and return the decoded bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldName</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retBinaryData</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer used to store the decoded binary data (caller must free). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retBinaryDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an unsigned integer used to store the length of the decoded binary data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the binary data was successfully decoded, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="note"><para>The returned binary buffer must be freed by the user with <computeroutput>JFree</computeroutput> when it is no longer needed.</para>
</simplesect>
<simplesect kind="note"><para>On error, the returned binary buffer and data length shall be set to <computeroutput>NULL</computeroutput> and zero (0), respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1341" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="235" bodyend="274" declfile="/home/runner/work/note-c/note-c/note.h" declline="1341" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac8fc6b5f1197bd2d117f538b1e33d34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * JGetItemName</definition>
        <argsstring>(const J *item)</argsstring>
        <name>JGetItemName</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the name/key of a JSON item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the item&apos;s name/key, or the empty string, if the item has no name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1349" column="12" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="276" bodyend="282" declfile="/home/runner/work/note-c/note-c/note.h" declline="1349" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa938730e0ffcac86947fc537945e05d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JAllocString</definition>
        <argsstring>(uint8_t *buffer, uint32_t len)</argsstring>
        <name>JAllocString</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Allocate a new JSON string and copy contents of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the string data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If buffer is NULL or length 0, the empty string. If allocation fails, NULL. On success, the converted c-string. The returned string must be freed with JFree. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1360" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="342" bodyend="353" declfile="/home/runner/work/note-c/note-c/note.h" declline="1360" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a780bf7071e3133e62794491aa90a7086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * JType</definition>
        <argsstring>(J *item)</argsstring>
        <name>JType</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get a string representation of a JSON item&apos;s type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String representation of the item&apos;s type (e.g., &quot;number&quot;, &quot;string&quot;, &quot;object&quot;). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1368" column="12" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="355" bodyend="377" declfile="/home/runner/work/note-c/note-c/note.h" declline="1368" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0b63b324fbe5e773ca7c137666687b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JGetType</definition>
        <argsstring>(J *json, const char *field)</argsstring>
        <name>JGetType</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Get the type of a field, as an int usable in a switch statement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type code (JTYPE_* constants), or JTYPE_NOT_PRESENT if the field doesn&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1393" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="379" bodyend="385" declfile="/home/runner/work/note-c/note-c/note.h" declline="1393" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a39d4dc978cbd0c5d10d287b4ac57b8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JGetItemType</definition>
        <argsstring>(J *item)</argsstring>
        <name>JGetItemType</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the type code of a JSON item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON item to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type code (JTYPE_* constants). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1401" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="387" bodyend="443" declfile="/home/runner/work/note-c/note-c/note.h" declline="1401" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a791851ed95cd350c24f33af25e7f0af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JBaseItemType</definition>
        <argsstring>(int type)</argsstring>
        <name>JBaseItemType</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the base type from a detailed type code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The detailed type code to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base type code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1409" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="446" bodyend="467" declfile="/home/runner/work/note-c/note-c/note.h" declline="1409" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac17ffec8a10a5ec96e62cb5a856d4203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JNtoA</definition>
        <argsstring>(JNUMBER f, char *buf, int precision)</argsstring>
        <name>JNtoA</name>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
<para>Convert a number to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the string result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of decimal places for floating point numbers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the string representation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1425" column="7" declfile="/home/runner/work/note-c/note-c/note.h" declline="1425" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JAtoN</definition>
        <argsstring>(const char *string, char **endPtr)</argsstring>
        <name>JAtoN</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endPtr</declname>
        </param>
        <briefdescription>
<para>Convert a string to a number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the position where conversion stopped (optional).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numeric value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1434" column="9" declfile="/home/runner/work/note-c/note-c/note.h" declline="1434" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3fe8a8eeb1d78a8eb52ed720a36b99c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JItoA</definition>
        <argsstring>(JINTEGER n, char *s)</argsstring>
        <name>JItoA</name>
        <param>
          <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert an integer to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the NULL-terminated string result.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The buffer must be large enough because no bounds checking is performed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1443" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="284" bodyend="310" declfile="/home/runner/work/note-c/note-c/note.h" declline="1443" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aab6ee0e6d2c3b0836c6ab294c5626d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
        <definition>JINTEGER JAtoI</definition>
        <argsstring>(const char *s)</argsstring>
        <name>JAtoI</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert a string to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated text buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer value (0 if invalid) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1451" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson_helpers.c" bodystart="312" bodyend="340" declfile="/home/runner/work/note-c/note-c/note.h" declline="1451" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a9c5d969e2bfd9cbda902e6388285e624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64EncodeLen</definition>
        <argsstring>(int len)</argsstring>
        <name>JB64EncodeLen</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Calculate the length needed for base64 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to be encoded.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the base64-encoded string (including null terminator). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1459" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="1459" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abd22cd7117763400021d6653a33f0d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64Encode</definition>
        <argsstring>(char *coded_dst, const char *plain_src, int len_plain_src)</argsstring>
        <name>JB64Encode</name>
        <param>
          <type>char *</type>
          <declname>coded_dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plain_src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len_plain_src</declname>
        </param>
        <briefdescription>
<para>Encode data to base64. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coded_dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the base64-encoded result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source data to encode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_plain_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the source data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the encoded string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1469" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="1469" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a53559c7bc512587f6776794a78fc424f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64DecodeLen</definition>
        <argsstring>(const char *coded_src)</argsstring>
        <name>JB64DecodeLen</name>
        <param>
          <type>const char *</type>
          <declname>coded_src</declname>
        </param>
        <briefdescription>
<para>Calculate the length of data after base64 decoding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coded_src</parametername>
</parameternamelist>
<parameterdescription>
<para>The base64-encoded string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the decoded data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1477" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="1477" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a48c6cad9358d4154567949c192445a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64Decode</definition>
        <argsstring>(char *plain_dst, const char *coded_src)</argsstring>
        <name>JB64Decode</name>
        <param>
          <type>char *</type>
          <declname>plain_dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>coded_src</declname>
        </param>
        <briefdescription>
<para>Decode base64 data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plain_dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the decoded result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coded_src</parametername>
</parameternamelist>
<parameterdescription>
<para>The base64-encoded string to decode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the decoded data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1486" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="1486" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af22f3a3c0071c07b3765df7907301c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Init</definition>
        <argsstring>(NoteMD5Context *ctx)</argsstring>
        <name>NoteMD5Init</name>
        <param>
          <type><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize an MD5 context for hashing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The MD5 context to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1506" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1506" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae70580a3b6b7d93590e84a46b4035fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Update</definition>
        <argsstring>(NoteMD5Context *ctx, unsigned char const *buf, unsigned long len)</argsstring>
        <name>NoteMD5Update</name>
        <param>
          <type><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Update an MD5 context with additional data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The MD5 context to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing data to hash. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1514" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1514" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad1aef239c14e207376fff97a9269b569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Final</definition>
        <argsstring>(unsigned char *digest, NoteMD5Context *ctx)</argsstring>
        <name>NoteMD5Final</name>
        <param>
          <type>unsigned char *</type>
          <declname>digest</declname>
        </param>
        <param>
          <type><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Finalize an MD5 hash and get the digest. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>digest</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the 16-byte MD5 digest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The MD5 context to finalize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1521" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1521" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7a52d858400f4634e7be440a5753967e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Transform</definition>
        <argsstring>(unsigned long buf[4], const unsigned char inraw[64])</argsstring>
        <name>NoteMD5Transform</name>
        <param>
          <type>unsigned long</type>
          <declname>buf</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>inraw</declname>
          <array>[64]</array>
        </param>
        <briefdescription>
<para>Internal MD5 transformation function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>MD5 state buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inraw</parametername>
</parameternamelist>
<parameterdescription>
<para>64-byte input block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1528" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1528" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a789bebabb0a08fe02ccea85aa917488d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Hash</definition>
        <argsstring>(unsigned char *data, unsigned long len, unsigned char *retHash)</argsstring>
        <name>NoteMD5Hash</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>retHash</declname>
        </param>
        <briefdescription>
<para>Compute MD5 hash of data in a single call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to hash. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retHash</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the 16-byte MD5 digest. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1536" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1536" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a54de4da750412f3f2192e1ff453810ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5HashString</definition>
        <argsstring>(unsigned char *data, unsigned long len, char *strbuf, unsigned long buflen)</argsstring>
        <name>NoteMD5HashString</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strbuf</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Compute MD5 hash of data and return it as a hex string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to hash. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the hex string representation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the string buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1545" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1545" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a095d52cf0bc437922a8104cb97445d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5HashToString</definition>
        <argsstring>(unsigned char *hash, char *strbuf, unsigned long buflen)</argsstring>
        <name>NoteMD5HashToString</name>
        <param>
          <type>unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strbuf</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Convert an MD5 hash to a hex string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>16-byte MD5 digest to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the hex string representation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the string buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1553" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1553" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa23fa076e5c93d112762b4b687ea88ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteAuxSerialFlowControl</definition>
        <argsstring>(int bufSize, int delayMs)</argsstring>
        <name>NoteAuxSerialFlowControl</name>
        <param>
          <type>int</type>
          <declname>bufSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delayMs</declname>
        </param>
        <briefdescription>
<para>Configure the flow control for the auxiliary serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the receive buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to wait between reads.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1566" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1566" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a10c81f1c0470f4b3cd1c877183163815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecDecode</definition>
        <argsstring>(const uint8_t *encData, uint32_t encDataLen, uint8_t *decBuf, uint32_t decBufSize)</argsstring>
        <name>NoteBinaryCodecDecode</name>
        <param>
          <type>const uint8_t *</type>
          <declname>encData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>encDataLen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>decBuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decBufSize</declname>
        </param>
        <briefdescription>
<para>Decode binary data using the Notecard&apos;s binary encoding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encData</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the encoded data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the encoded data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the decoded data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the decode buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes decoded, or 0 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1577" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1577" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a91a381b28624b7d7a5b7c59cea31e40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecEncode</definition>
        <argsstring>(const uint8_t *decData, uint32_t decDataLen, uint8_t *encBuf, uint32_t encBufSize)</argsstring>
        <name>NoteBinaryCodecEncode</name>
        <param>
          <type>const uint8_t *</type>
          <declname>decData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decDataLen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>encBuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>encBufSize</declname>
        </param>
        <briefdescription>
<para>Encode binary data using the Notecard&apos;s binary encoding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decData</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to encode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to encode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the encoded data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the encode buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes encoded, or 0 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1589" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1589" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5db0bc71463c613425debfb34fa38794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecMaxDecodedLength</definition>
        <argsstring>(uint32_t bufferSize)</argsstring>
        <name>NoteBinaryCodecMaxDecodedLength</name>
        <param>
          <type>uint32_t</type>
          <declname>bufferSize</declname>
        </param>
        <briefdescription>
<para>Calculate the maximum decoded length for a given buffer size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the encoded buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum number of bytes that can be decoded from the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1598" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1598" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a126a4cb7f30d49518bd2552902099634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecMaxEncodedLength</definition>
        <argsstring>(uint32_t unencodedLength)</argsstring>
        <name>NoteBinaryCodecMaxEncodedLength</name>
        <param>
          <type>uint32_t</type>
          <declname>unencodedLength</declname>
        </param>
        <briefdescription>
<para>Calculate the maximum encoded length for given data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unencodedLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data to be encoded.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum number of bytes needed to encode the data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1606" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1606" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af95b1666a184db30b58abc1b19771d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * NoteBinaryStoreDecodedLength</definition>
        <argsstring>(uint32_t *len)</argsstring>
        <name>NoteBinaryStoreDecodedLength</name>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get the decoded length of data in the binary store. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the decoded length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success, error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1614" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="1614" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab259d6e53b03f2bc7c18f9748489b292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * NoteBinaryStoreEncodedLength</definition>
        <argsstring>(uint32_t *len)</argsstring>
        <name>NoteBinaryStoreEncodedLength</name>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get the encoded length of data in the binary store. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the encoded length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success, error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1622" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="1622" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa99b2870c533bced52a5947b1993b168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * NoteBinaryStoreReceive</definition>
        <argsstring>(uint8_t *buffer, uint32_t bufLen, uint32_t decodedOffset, uint32_t decodedLen)</argsstring>
        <name>NoteBinaryStoreReceive</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decodedOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decodedLen</declname>
        </param>
        <briefdescription>
<para>Receive data from the binary store. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the decoded data to start from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of decoded bytes to receive.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success, error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1633" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="1633" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad93e8cd6f19f9eaed1be3273b2aecbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * NoteBinaryStoreReset</definition>
        <argsstring>(void)</argsstring>
        <name>NoteBinaryStoreReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset the binary store. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>NULL on success, error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1640" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="1640" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3f126a749c074c7763227ed164f794a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * NoteBinaryStoreTransmit</definition>
        <argsstring>(uint8_t *unencodedData, uint32_t unencodedLen, uint32_t bufLen, uint32_t notecardOffset)</argsstring>
        <name>NoteBinaryStoreTransmit</name>
        <param>
          <type>uint8_t *</type>
          <declname>unencodedData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>unencodedLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>notecardOffset</declname>
        </param>
        <briefdescription>
<para>Transmit data to the binary store. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unencodedData</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unencodedLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the transmission buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notecardOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the Notecard&apos;s storage.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success, error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1651" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="1651" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2e8d519c15479dfaf09566ed97ec3711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteSetSTSecs</definition>
        <argsstring>(uint32_t secs)</argsstring>
        <name>NoteSetSTSecs</name>
        <param>
          <type>uint32_t</type>
          <declname>secs</declname>
        </param>
        <briefdescription>
<para>Set the session time in seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secs</parametername>
</parameternamelist>
<parameterdescription>
<para>The session time to set in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previous session time value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1660" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1660" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1afc76a1b0c6b4dfa1ab2e7c3d6286583e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteTimeValid</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTimeValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the Notecard&apos;s time is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the time is valid, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1666" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1666" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abf11915def4e2d9b1e54cb63d13e95e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteTimeValidST</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTimeValidST</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the Notecard&apos;s session time is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the session time is valid, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1672" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1672" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0d930f1361f45030bc3638197b329bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref></type>
        <definition>JTIME NoteTime</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current time from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current time as seconds since Unix epoch, or 0 if time is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1678" column="7" declfile="/home/runner/work/note-c/note-c/note.h" declline="1678" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a1f834110044f5d4586ad98bde88084d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref></type>
        <definition>JTIME NoteTimeST</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTimeST</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current session time from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current session time as seconds since Unix epoch, or 0 if time is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1684" column="7" declfile="/home/runner/work/note-c/note-c/note.h" declline="1684" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af5568df79a7d26a8807b54853a56b921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteTimeRefreshMins</definition>
        <argsstring>(uint32_t mins)</argsstring>
        <name>NoteTimeRefreshMins</name>
        <param>
          <type>uint32_t</type>
          <declname>mins</declname>
        </param>
        <briefdescription>
<para>Set the time refresh interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mins</parametername>
</parameternamelist>
<parameterdescription>
<para>Refresh interval in minutes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1690" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1690" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a09596cfe3e377e92f4ebf6700e3ac990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteTimeSet</definition>
        <argsstring>(JTIME secondsUTC, int offset, char *zone, char *country, char *area)</argsstring>
        <name>NoteTimeSet</name>
        <param>
          <type><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref></type>
          <declname>secondsUTC</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>zone</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>country</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>area</declname>
        </param>
        <briefdescription>
<para>Set the time and timezone information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondsUTC</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in seconds since Unix epoch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Timezone offset in minutes from UTC. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zone</parametername>
</parameternamelist>
<parameterdescription>
<para>Timezone name (e.g., &quot;PST&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>country</parametername>
</parameternamelist>
<parameterdescription>
<para>Country name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para>Area/city name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1700" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1700" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a57534ae715e262dd91a55bd71de37631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteLocalTimeST</definition>
        <argsstring>(uint16_t *retYear, uint8_t *retMonth, uint8_t *retDay, uint8_t *retHour, uint8_t *retMinute, uint8_t *retSecond, char **retWeekday, char **retZone)</argsstring>
        <name>NoteLocalTimeST</name>
        <param>
          <type>uint16_t *</type>
          <declname>retYear</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retMonth</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retDay</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retHour</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retMinute</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retSecond</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retWeekday</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retZone</declname>
        </param>
        <briefdescription>
<para>Get the local time in a structured format (session time). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>retYear</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the year. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retMonth</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the month (1-12). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the day (1-31). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retHour</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the hour (0-23). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retMinute</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the minute (0-59). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retSecond</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the second (0-59). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retWeekday</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the weekday name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retZone</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the timezone name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the time was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1715" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1715" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ade2325739300181a0fad13e83f377ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRegion</definition>
        <argsstring>(char **retCountry, char **retArea, char **retZone, int *retZoneOffset)</argsstring>
        <name>NoteRegion</name>
        <param>
          <type>char **</type>
          <declname>retCountry</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retArea</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retZone</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>retZoneOffset</declname>
        </param>
        <briefdescription>
<para>Get the current region/timezone information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>retCountry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the country name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the area/city name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retZone</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the timezone name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retZoneOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the timezone offset in minutes from UTC.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the region information was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1726" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1726" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a544f2aeaa9bbd229ab173f8e9ba42dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteLocationValid</definition>
        <argsstring>(char *errbuf, uint32_t errbuflen)</argsstring>
        <name>NoteLocationValid</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>errbuflen</declname>
        </param>
        <briefdescription>
<para>Check if the Notecard&apos;s location is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store error message if location is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errbuflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the error buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the location is valid, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1735" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1735" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa1fd37b1100f616b178fc6c0bcd18292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteLocationValidST</definition>
        <argsstring>(char *errbuf, uint32_t errbuflen)</argsstring>
        <name>NoteLocationValidST</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>errbuflen</declname>
        </param>
        <briefdescription>
<para>Check if the Notecard&apos;s session-time location is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store error message if location is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errbuflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the error buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the location is valid, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1744" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1744" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1acb52ea66e2ee02a35d8442fd4f9567b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" kindref="member">NOTE_C_DEPRECATED</ref> void</type>
        <definition>NOTE_C_DEPRECATED void NoteTurboIO</definition>
        <argsstring>(bool enable)</argsstring>
        <name>NoteTurboIO</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable or disable turbo I/O mode (deprecated). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable turbo mode, false to disable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and should not be used. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1752" column="24" declfile="/home/runner/work/note-c/note-c/note.h" declline="1752" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa998d7b236f2ff2541a20872f261db60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
        <definition>JINTEGER NoteGetEnvInt</definition>
        <argsstring>(const char *variable, JINTEGER defaultVal)</argsstring>
        <name>NoteGetEnvInt</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Get an integer environment variable from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the environment variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultVal</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value to return if the variable doesn&apos;t exist.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer value of the environment variable, or defaultVal if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1761" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="1761" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af6f3d1929a16c26050550f01d69de9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER NoteGetEnvNumber</definition>
        <argsstring>(const char *variable, JNUMBER defaultVal)</argsstring>
        <name>NoteGetEnvNumber</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Get a numeric environment variable from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the environment variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultVal</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value to return if the variable doesn&apos;t exist.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numeric value of the environment variable, or defaultVal if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1770" column="9" declfile="/home/runner/work/note-c/note-c/note.h" declline="1770" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a84b63daf99110b90e0e9cad94df694ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetEnv</definition>
        <argsstring>(const char *variable, const char *defaultVal, char *buf, uint32_t buflen)</argsstring>
        <name>NoteGetEnv</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>defaultVal</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Get a string environment variable from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the environment variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultVal</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value to use if the variable doesn&apos;t exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the variable was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1781" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1781" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af7edd00b0a1764be80585ca6b99e8045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetEnvDefault</definition>
        <argsstring>(const char *variable, char *buf)</argsstring>
        <name>NoteSetEnvDefault</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Set a default string environment variable on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the environment variable to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the variable was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1790" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1790" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a43932b5cf2ba57357efd5de109c288d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetEnvDefaultNumber</definition>
        <argsstring>(const char *variable, JNUMBER defaultVal)</argsstring>
        <name>NoteSetEnvDefaultNumber</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Set a default numeric environment variable on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the environment variable to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultVal</parametername>
</parameternamelist>
<parameterdescription>
<para>The default numeric value to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the variable was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1799" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1799" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3b959828f2723e37f1aa15818122a49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetEnvDefaultInt</definition>
        <argsstring>(const char *variable, JINTEGER defaultVal)</argsstring>
        <name>NoteSetEnvDefaultInt</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Set a default integer environment variable on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the environment variable to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultVal</parametername>
</parameternamelist>
<parameterdescription>
<para>The default integer value to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the variable was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1808" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1808" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad479c8e6d2c17ed58f96b9aa234ad81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteIsConnected</definition>
        <argsstring>(void)</argsstring>
        <name>NoteIsConnected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the Notecard is connected to the network. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if connected, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1814" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1814" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa1cce9855703b1b8a5cc856a84378c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteIsConnectedST</definition>
        <argsstring>(void)</argsstring>
        <name>NoteIsConnectedST</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the Notecard is connected to the network (session time). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if connected, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1820" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1820" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a387befb0abe72b215645a6650ea7e72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetNetStatus</definition>
        <argsstring>(char *statusBuf, int statusBufLen)</argsstring>
        <name>NoteGetNetStatus</name>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <briefdescription>
<para>Get the network status from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statusBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the status string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the status buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the status was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1829" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1829" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab9c78d2fef7a116ccc22ced6a9304fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetVersion</definition>
        <argsstring>(char *versionBuf, int versionBufLen)</argsstring>
        <name>NoteGetVersion</name>
        <param>
          <type>char *</type>
          <declname>versionBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>versionBufLen</declname>
        </param>
        <briefdescription>
<para>Get the firmware version from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>versionBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the version string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>versionBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the version buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the version was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1838" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1838" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a711d1c4cb256e29e34853959d4f032cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetLocation</definition>
        <argsstring>(JNUMBER *retLat, JNUMBER *retLon, JTIME *time, char *statusBuf, int statusBufLen)</argsstring>
        <name>NoteGetLocation</name>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref> *</type>
          <declname>retLat</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref> *</type>
          <declname>retLon</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref> *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <briefdescription>
<para>Get the current location from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>retLat</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the latitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retLon</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the longitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the time when location was acquired. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store any status message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the status buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the location was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1850" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1850" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a54f0c0ac25d91cdff09d4c374f4b9393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetLocation</definition>
        <argsstring>(JNUMBER lat, JNUMBER lon)</argsstring>
        <name>NoteSetLocation</name>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>lat</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>lon</declname>
        </param>
        <briefdescription>
<para>Set the location on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lat</parametername>
</parameternamelist>
<parameterdescription>
<para>Latitude to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lon</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the location was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1859" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1859" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aafa429043e07e78852045017c75392ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteClearLocation</definition>
        <argsstring>(void)</argsstring>
        <name>NoteClearLocation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear the stored location on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the location was successfully cleared, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1865" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1865" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a1f5e4d1d5d4c91ee2409686e59e28e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetLocationMode</definition>
        <argsstring>(char *modeBuf, int modeBufLen)</argsstring>
        <name>NoteGetLocationMode</name>
        <param>
          <type>char *</type>
          <declname>modeBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modeBufLen</declname>
        </param>
        <briefdescription>
<para>Get the current location mode from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modeBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the location mode string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modeBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the mode buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the location mode was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1874" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1874" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a38ab54badbef76dd436d557889eaaf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetLocationMode</definition>
        <argsstring>(const char *mode, uint32_t seconds)</argsstring>
        <name>NoteSetLocationMode</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Set the location mode on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The location mode to set (e.g., &quot;periodic&quot;, &quot;continuous&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Update interval in seconds (for periodic mode).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the location mode was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1883" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1883" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1acf36d7c23420551e51597554a69f97c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetServiceConfig</definition>
        <argsstring>(char *productBuf, int productBufLen, char *serviceBuf, int serviceBufLen, char *deviceBuf, int deviceBufLen, char *snBuf, int snBufLen)</argsstring>
        <name>NoteGetServiceConfig</name>
        <param>
          <type>char *</type>
          <declname>productBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>productBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>serviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>serviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>deviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>snBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>snBufLen</declname>
        </param>
        <briefdescription>
<para>Get the service configuration from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>productBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the product ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>productBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the product buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serviceBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the service name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serviceBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the service buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the device ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the device buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the serial number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the serial number buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the configuration was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1898" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1898" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac5989f17e99b8f154fe4318bb7bcf73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetServiceConfigST</definition>
        <argsstring>(char *productBuf, int productBufLen, char *serviceBuf, int serviceBufLen, char *deviceBuf, int deviceBufLen, char *snBuf, int snBufLen)</argsstring>
        <name>NoteGetServiceConfigST</name>
        <param>
          <type>char *</type>
          <declname>productBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>productBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>serviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>serviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>deviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>snBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>snBufLen</declname>
        </param>
        <briefdescription>
<para>Get the service configuration from the Notecard (session time). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>productBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the product ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>productBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the product buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serviceBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the service name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serviceBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the service buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the device ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the device buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the serial number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the serial number buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the configuration was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1913" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1913" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1adfe58a53ab4a4de6f6b00092494330ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetStatus</definition>
        <argsstring>(char *statusBuf, int statusBufLen, JTIME *bootTime, bool *retUSB, bool *retSignals)</argsstring>
        <name>NoteGetStatus</name>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref> *</type>
          <declname>bootTime</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retUSB</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retSignals</declname>
        </param>
        <briefdescription>
<para>Get the status information from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statusBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the status string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the status buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bootTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the boot time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retUSB</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the USB connection status. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retSignals</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the signal information status.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the status was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1925" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1925" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad873ec5c640174f673ceabad89b8f030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetStatusST</definition>
        <argsstring>(char *statusBuf, int statusBufLen, JTIME *bootTime, bool *retUSB, bool *retSignals)</argsstring>
        <name>NoteGetStatusST</name>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref> *</type>
          <declname>bootTime</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retUSB</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retSignals</declname>
        </param>
        <briefdescription>
<para>Get the status information from the Notecard (session time). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statusBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the status string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the status buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bootTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the boot time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retUSB</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the USB connection status. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retSignals</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the signal information status.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the status was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1937" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1937" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5495b9b5807536807987af253ee2b918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSleep</definition>
        <argsstring>(char *stateb64, uint32_t seconds, const char *modes)</argsstring>
        <name>NoteSleep</name>
        <param>
          <type>char *</type>
          <declname>stateb64</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>modes</declname>
        </param>
        <briefdescription>
<para>Put the Notecard into sleep mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateb64</parametername>
</parameternamelist>
<parameterdescription>
<para>Base64-encoded state to preserve during sleep. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to sleep. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modes</parametername>
</parameternamelist>
<parameterdescription>
<para>Sleep mode configuration string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the sleep command was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1947" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1947" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab6689989662882c9140822e67d0ae84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteWake</definition>
        <argsstring>(int stateLen, void *state)</argsstring>
        <name>NoteWake</name>
        <param>
          <type>int</type>
          <declname>stateLen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Wake the Notecard from sleep mode and retrieve preserved state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the state buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the preserved state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the wake operation was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1956" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1956" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0a6818960d5dc59c9dc15ec12c8eca67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteFactoryReset</definition>
        <argsstring>(bool deleteConfigSettings)</argsstring>
        <name>NoteFactoryReset</name>
        <param>
          <type>bool</type>
          <declname>deleteConfigSettings</declname>
        </param>
        <briefdescription>
<para>Perform a factory reset of the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deleteConfigSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to delete configuration settings.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the reset was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1964" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1964" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac4e9ce3c9b56c05603c3a87377abfdda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetSerialNumber</definition>
        <argsstring>(const char *sn)</argsstring>
        <name>NoteSetSerialNumber</name>
        <param>
          <type>const char *</type>
          <declname>sn</declname>
        </param>
        <briefdescription>
<para>Set the serial number on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sn</parametername>
</parameternamelist>
<parameterdescription>
<para>The serial number to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the serial number was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1972" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1972" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a68e1b388237b6d156f07299c8fdea24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetProductID</definition>
        <argsstring>(const char *productID)</argsstring>
        <name>NoteSetProductID</name>
        <param>
          <type>const char *</type>
          <declname>productID</declname>
        </param>
        <briefdescription>
<para>Set the product ID on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>productID</parametername>
</parameternamelist>
<parameterdescription>
<para>The product ID to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the product ID was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1980" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1980" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aedfe8eec797fa14b80c9a836a3267a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetUploadMode</definition>
        <argsstring>(const char *uploadMode, int uploadMinutes, bool align)</argsstring>
        <name>NoteSetUploadMode</name>
        <param>
          <type>const char *</type>
          <declname>uploadMode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uploadMinutes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>align</declname>
        </param>
        <briefdescription>
<para>Set the upload mode for the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uploadMode</parametername>
</parameternamelist>
<parameterdescription>
<para>The upload mode to set (e.g., &quot;periodic&quot;, &quot;continuous&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uploadMinutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Upload interval in minutes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to align upload times.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the upload mode was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="1990" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="1990" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a65b9120ff5b755405d76a3ba992197ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetSyncMode</definition>
        <argsstring>(const char *uploadMode, int uploadMinutes, int downloadMinutes, bool align, bool sync)</argsstring>
        <name>NoteSetSyncMode</name>
        <param>
          <type>const char *</type>
          <declname>uploadMode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uploadMinutes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>downloadMinutes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>align</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Set the synchronization mode for the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uploadMode</parametername>
</parameternamelist>
<parameterdescription>
<para>The upload mode to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uploadMinutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Upload interval in minutes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>downloadMinutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Download interval in minutes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to align sync times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to perform an immediate sync.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the sync mode was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2002" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2002" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a859c73fcda95741f545f2996d0d4d50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteAdd</definition>
        <argsstring>(const char *target, J *body, bool urgent)</argsstring>
        <name>NoteAdd</name>
        <param>
          <type>const char *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>urgent</declname>
        </param>
        <briefdescription>
<para>Add a note to a notefile for transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target notefile name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object containing the note body (will be consumed/freed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urgent</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this is an urgent note that should be sent immediately.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the note was successfully added, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2014" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2014" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a740e04f22326f5f421bf3c86d5fd1ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSendToRoute</definition>
        <argsstring>(const char *method, const char *routeAlias, char *notefile, J *body)</argsstring>
        <name>NoteSendToRoute</name>
        <param>
          <type>const char *</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>routeAlias</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>notefile</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Send a body to a route using an HTTP request. </para>
        </briefdescription>
        <detaileddescription>
<para>Body is freed, regardless of success.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP method to use, &quot;get&quot;, &quot;post&quot; or &quot;put&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>routeAlias</parametername>
</parameternamelist>
<parameterdescription>
<para>The Notehub Route alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The Notefile name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>The request JSON body (will be consumed/freed).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if request was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2027" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2027" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad29039cfe90306e391d8a85a0df1d69f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetVoltage</definition>
        <argsstring>(JNUMBER *voltage)</argsstring>
        <name>NoteGetVoltage</name>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref> *</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Get the current voltage reading from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the voltage value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the voltage was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2035" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2035" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a33a8a42563cc3dc4d3bda44144d73784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetTemperature</definition>
        <argsstring>(JNUMBER *temp)</argsstring>
        <name>NoteGetTemperature</name>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref> *</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
<para>Get the current temperature reading from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the temperature value in Celsius.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the temperature was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2043" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2043" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a289e6d70e17615cf927a9094080139f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetContact</definition>
        <argsstring>(char *nameBuf, int nameBufLen, char *orgBuf, int orgBufLen, char *roleBuf, int roleBufLen, char *emailBuf, int emailBufLen)</argsstring>
        <name>NoteGetContact</name>
        <param>
          <type>char *</type>
          <declname>nameBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nameBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>orgBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>orgBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>roleBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>roleBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>emailBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>emailBufLen</declname>
        </param>
        <briefdescription>
<para>Get the contact information from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the contact name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the name buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orgBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the organization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orgBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the organization buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roleBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the role. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roleBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the role buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emailBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the email address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emailBufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the email buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the contact information was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2058" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2058" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aad1a6d6d04a1cac3339022d1068df201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetContact</definition>
        <argsstring>(char *nameBuf, char *orgBuf, char *roleBuf, char *emailBuf)</argsstring>
        <name>NoteSetContact</name>
        <param>
          <type>char *</type>
          <declname>nameBuf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>orgBuf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>roleBuf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>emailBuf</declname>
        </param>
        <briefdescription>
<para>Set the contact information on the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The contact name to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orgBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The organization to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roleBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The role to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emailBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The email address to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the contact information was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2069" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2069" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a42f5f4c8090a088fbc0d6b68646e9c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadSaveAndSleep</definition>
        <argsstring>(NotePayloadDesc *desc, uint32_t seconds, const char *modes)</argsstring>
        <name>NotePayloadSaveAndSleep</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>modes</declname>
        </param>
        <briefdescription>
<para>Save payload data and put the Notecard to sleep. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor containing data to save. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to sleep. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modes</parametername>
</parameternamelist>
<parameterdescription>
<para>Sleep mode configuration string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the operation was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2094" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2094" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a62202e752d3e6b75d0beebbc0ebd29e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadRetrieveAfterSleep</definition>
        <argsstring>(NotePayloadDesc *desc)</argsstring>
        <name>NotePayloadRetrieveAfterSleep</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Retrieve payload data after waking from sleep. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor to populate with retrieved data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the payload was successfully retrieved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2102" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae8b19866d8b472354b80679fcd03d3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NotePayloadSet</definition>
        <argsstring>(NotePayloadDesc *desc, uint8_t *buf, uint32_t buflen)</argsstring>
        <name>NotePayloadSet</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Set the buffer for a payload descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor to configure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2110" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a516e80912a7b5874770888765db7347e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NotePayloadFree</definition>
        <argsstring>(NotePayloadDesc *desc)</argsstring>
        <name>NotePayloadFree</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Free the memory allocated for a payload descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2116" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad7c0fdd390eaf4338117bba38a92cdce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadAddSegment</definition>
        <argsstring>(NotePayloadDesc *desc, const char segtype[NP_SEGTYPE_LEN], void *pdata, uint32_t plen)</argsstring>
        <name>NotePayloadAddSegment</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>segtype</declname>
          <array>[NP_SEGTYPE_LEN]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>plen</declname>
        </param>
        <briefdescription>
<para>Add a data segment to a payload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segtype</parametername>
</parameternamelist>
<parameterdescription>
<para>4-character segment type identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the segment data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the segment data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the segment was successfully added, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2127" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a10bb7e445f9515a2289e9ed2dd4485d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadFindSegment</definition>
        <argsstring>(NotePayloadDesc *desc, const char segtype[NP_SEGTYPE_LEN], void *pdata, uint32_t *plen)</argsstring>
        <name>NotePayloadFindSegment</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>segtype</declname>
          <array>[NP_SEGTYPE_LEN]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>plen</declname>
        </param>
        <briefdescription>
<para>Find a data segment in a payload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor to search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segtype</parametername>
</parameternamelist>
<parameterdescription>
<para>4-character segment type identifier to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to copy the segment data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plen</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the length of the segment data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the segment was found, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2138" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a573bc94dabf3f27220685a8c4d7adce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadGetSegment</definition>
        <argsstring>(NotePayloadDesc *desc, const char segtype[NP_SEGTYPE_LEN], void *pdata, uint32_t len)</argsstring>
        <name>NotePayloadGetSegment</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>segtype</declname>
          <array>[NP_SEGTYPE_LEN]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get a data segment from a payload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload descriptor to search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segtype</parametername>
</parameternamelist>
<parameterdescription>
<para>4-character segment type identifier to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to copy the segment data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length of data to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the segment was found and copied, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2149" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5de0a3a1b648b9d5c2d0a7c608264f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteTemplate</definition>
        <argsstring>(const char *notefileID, J *templateBody)</argsstring>
        <name>NoteTemplate</name>
        <param>
          <type>const char *</type>
          <declname>notefileID</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>templateBody</declname>
        </param>
        <briefdescription>
<para>Set a template for a notefile to optimize transmission. </para>
        </briefdescription>
        <detaileddescription>
<para>Templates allow the Notecard to send only changed values, reducing bandwidth usage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notefileID</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the notefile to create a template for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>templateBody</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object describing the template structure (will be consumed/freed).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the template was successfully set, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="2179" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="2179" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Written by Ray Ozzie and Blues Inc. team.</para>
<para>Copyright (c) 2019 Blues Inc. MIT License. Use of this source code is governed by licenses granted by the copyright holder including that found in the <ulink url="https://github.com/blues/note-c/blob/master/LICENSE">LICENSE</ulink> file.</para>
<para>This library bundles the <ulink url="https://github.com/DaveGamble/cJSON">cJSON JSON parser library</ulink>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_DEPRECATED<sp/>__attribute__((__deprecated__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_DEPRECATED<sp/>__declspec(deprecated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="note_8h_1a3b68a470a03c1aaee013c71208cf6033" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_NO_DEPRECATED_ATTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__GNUC__<sp/>||<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>they&apos;re<sp/>not<sp/>yet<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="34" refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="35" refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref>,</highlight></codeline>
<codeline lineno="36" refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref>,</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_NOTE_C_STRINGIZE(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_STRINGIZE(x)<sp/>_NOTE_C_STRINGIZE(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="note_8h_1ad3ef8b1d9585fb28c46942ab96815b20" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="note_8h_1a15af17c840e4dee0e552124fde744773" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION_MINOR<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="note_8h_1a9a66291724eb8ba8bc651dc90ed441f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION_PATCH<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="note_8h_1aa4cdd0eed41940a458709f2034b706e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION<sp/>NOTE_C_STRINGIZE(NOTE_C_VERSION_MAJOR)<sp/>&quot;.&quot;<sp/>NOTE_C_STRINGIZE(NOTE_C_VERSION_MINOR)<sp/>&quot;.&quot;<sp/>NOTE_C_STRINGIZE(NOTE_C_VERSION_PATCH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>double<sp/>and<sp/>float<sp/>are<sp/>the<sp/>same<sp/>size,<sp/>then<sp/>we<sp/>must<sp/>be<sp/>on<sp/>a<sp/>small<sp/>MCU.<sp/>Turn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>NOTE_C_LOW_MEM<sp/>to<sp/>conserve<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FLT_MAX_EXP)<sp/>&amp;&amp;<sp/>defined(DBL_MAX_EXP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FLT_MAX_EXP<sp/>==<sp/>DBL_MAX_EXP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_SINGLE_PRECISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__FLT_MAX_EXP__)<sp/>&amp;&amp;<sp/>defined(__DBL_MAX_EXP__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FLT_MAX_EXP__<sp/>==<sp/>__DBL_MAX_EXP__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_SINGLE_PRECISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>What<sp/>are<sp/>floating<sp/>point<sp/>exponent<sp/>length<sp/>symbols<sp/>for<sp/>this<sp/>compiler?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE_LOWMEM<sp/>is<sp/>the<sp/>old<sp/>name<sp/>of<sp/>NOTE_C_LOW_MEM.<sp/>If<sp/>NOTE_LOWMEM<sp/>is<sp/>defined,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>define<sp/>NOTE_C_LOW_MEM<sp/>as<sp/>well,<sp/>for<sp/>backwards<sp/>compatibility.<sp/>NOTE_FLOAT<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>no<sp/>longer<sp/>used<sp/>internally,<sp/>but<sp/>used<sp/>to<sp/>be<sp/>defined<sp/>when<sp/>NOTE_LOWMEM<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined.<sp/>It&apos;s<sp/>also<sp/>preserved<sp/>here<sp/>for<sp/>backwards<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_LOWMEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRSTR(x,y)<sp/>(y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_DEBUG(msg)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRSTR(x,y)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_SINGLE_PRECISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref>;</highlight></codeline>
<codeline lineno="93" refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JINTEGER_MIN<sp/>INT64_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="note_8h_1a445107097b19783483070744407468d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JINTEGER_MAX<sp/>INT64_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="note_8h_1aa40439c159fdacb5de8314453a6cc241" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="note_8h_1aa40439c159fdacb5de8314453a6cc241" kindref="member">JUINTEGER</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNIX<sp/>Epoch<sp/>time<sp/>(also<sp/>known<sp/>as<sp/>POSIX<sp/>time)<sp/>is<sp/>the<sp/><sp/>number<sp/>of<sp/>seconds<sp/>that<sp/>have<sp/>elapsed<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>00:00:00<sp/>Thursday,<sp/>1<sp/>January<sp/>1970,<sp/>Coordinated<sp/>Universal<sp/>Time<sp/>(UTC).<sp/><sp/>In<sp/>this<sp/>project,<sp/>it<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>originates<sp/>from<sp/>the<sp/>Notecard,<sp/>which<sp/>synchronizes<sp/>the<sp/>time<sp/>from<sp/>both<sp/>the<sp/>cell<sp/>network<sp/>and<sp/>GPS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa40439c159fdacb5de8314453a6cc241" kindref="member">JUINTEGER</ref><sp/><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C-callable<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cJSON<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="n__cjson_8h" kindref="compound">n_cjson.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notecard<sp/>hook<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref>)<sp/>(uint32_t<sp/>ms);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>mem);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref>)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*heartbeatFn)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*heartbeatJson,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*i2cReceiveFn)<sp/>(uint16_t<sp/>address,<sp/>uint8_t*<sp/>rxBuf,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>rxBufSize,<sp/>uint32_t<sp/>*available);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref>)<sp/>(uint16_t<sp/>address);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="note_8h_1a841b338ac017194680b08ec57c179efc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*i2cTransmitFn)<sp/>(uint16_t<sp/>address,<sp/>uint8_t*<sp/>txBuf,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>txBufSize);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>(*mallocFn)<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="note_8h_1ac9d4324784f851631c22f78099225463" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>char<sp/>(*<ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="note_8h_1a75873a7790764116d88f80aaaf23263b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref>)<sp/>(uint8_t<sp/>*txBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>txBufSize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref>)<sp/>(uint32_t<sp/>timeoutMs);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="note_8h_1a563ad03ff093058d955306e551e32c0d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>External<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6358096b5a9e5c69a4f56b12e80092fa" kindref="member">NoteReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6c62afa66443f9dbb0a36bf9f76e9896" kindref="member">NoteResetRequired</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305" refid="note_8h_1aa4e6f9fe285abae5dec0312c1dda3f06" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteNewBody<sp/>JCreateObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="note_8h_1a09e55e06b045772b4fc105c0329c73a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteAddBodyToObject(a,<sp/>b)<sp/>JAddItemToObject(a,<sp/>&quot;body&quot;,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="note_8h_1aada0fea556f714e917ac330c87c7c2c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteGetBody(a)<sp/>JGetObject(a,<sp/>&quot;body&quot;)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a76f6fa9b4401f7ba8563bc3a548ad59b" kindref="member">NoteNewRequest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a93f6be68d755b58784aa60d656440a26" kindref="member">NoteNewCommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a234931d7639db0c292c27308aafbae75" kindref="member">NoteRequestResponse</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1aef1204c75ca0b2300f5ea55bb52586c5" kindref="member">NoteRequestResponseWithRetry</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/>uint32_t<sp/>timeoutSeconds);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1a8b39b3aa0c27493a4fa81509cc8d527d" kindref="member">NoteRequestResponseJSON</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reqJSON);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" kindref="member">NOTE_C_DEPRECATED</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a0efe670b7352fa544a82752342664ef7" kindref="member">NoteSuspendTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" kindref="member">NOTE_C_DEPRECATED</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a5010ac0e91e3128fa2f81b94a4d884b8" kindref="member">NoteResumeTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393" refid="note_8h_1a6081d56bf39642758465b3c1d155f853" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_MAJOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="note_8h_1a17656ac3ed2c4e6a77b115417bf75a7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_MINOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="note_8h_1acdd8348847658b936879035020767bab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_DETAILED<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="note_8h_1a148902b910ba060dac353c3871183403" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_ALGORITHMIC<sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="note_8h_1a11bc43f4578ce909ad4403cc3b15e79f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="406" refid="note_8h_1adde35249318a7b5cc3f1c2393685b75b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1adde35249318a7b5cc3f1c2393685b75b" kindref="member">NoteDebugSyncStatus</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pollFrequencyMs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxLevel);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab1227db7501f0b979ed894fb764790e3" kindref="member">NoteRequest</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a7eef6ff395f1e94934d3f9eb99bbcb9a" kindref="member">NoteRequestWithRetry</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/>uint32_t<sp/>timeoutSeconds);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1ae5d81f097b364f4011d87e9934db363c" kindref="member">NoteSetRequestTimeout</ref>(uint32_t<sp/>overrideSecs);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="note_8h_1acd6f73358d95a8188495babd142c5977" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteResponseError(rsp)<sp/>(!JIsNullString(rsp,<sp/>&quot;err&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="note_8h_1aebc81ad84af23cc172214e6bfae7a00f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteResponseErrorContains(rsp,<sp/>errstr)<sp/>(JContainsString(rsp,<sp/>&quot;err&quot;,<sp/>errstr))</highlight></codeline>
<codeline lineno="469" refid="note_8h_1a5e957ef70b05d1b5173ba34ea7b60588" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteDeleteResponse(rsp)<sp/>JDelete(rsp)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a96424058d58bf4c3318eeb2c0fb3123d" kindref="member">NoteTransaction</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a1385294098059d94d366e2fd843358e5" kindref="member">NoteErrorContains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errstr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errtype);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3b8d73d3dc3b3315b1be8260e83f10ab" kindref="member">NoteErrorClean</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6844f5cd4d6e38d65c090dba954321b4" kindref="member">NoteSetFnDebugOutput</ref>(<ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref><sp/>fn);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3454c54d190d3a03d748ca2b38c57a63" kindref="member">NoteGetFnDebugOutput</ref>(<ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref><sp/>*fn);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteSetFnHeartbeat(heartbeatFn<sp/>fn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteGetFnHeartbeat(heartbeatFn<sp/>*fn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**context);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a946facc30c7f3b5f1820db01fde9fa4d" kindref="member">NoteSetFnTransaction</ref>(<ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref><sp/>startFn,<sp/><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref><sp/>stopFn);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a0bb77ab0431d89f36ff32ecbb6b005fa" kindref="member">NoteGetFnTransaction</ref>(<ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref><sp/>*startFn,<sp/><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref><sp/>*stopFn);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a81210c0d43535f1945083f7b3fcad67a" kindref="member">NoteSetFnMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockNotefn,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockNotefn);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a357a6aca3b4ea07d29f521884f1875a7" kindref="member">NoteGetFnMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockNotefn,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockNotefn);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6879f42e34e075aec82b499fd5ddd12a" kindref="member">NoteSetFnI2CMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a14670a712ba4812bdbaaddbf3189f1b7" kindref="member">NoteGetFnI2CMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockI2Cfn);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a534aa37f7e753dd06a847f429f8e743f" kindref="member">NoteSetFnNoteMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockFn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockFn);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abc8585fc3143b157ac27fc5938378249" kindref="member">NoteGetFnNoteMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockFn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockFn);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a57a711029fed4148da73679ff2c8a154" kindref="member">NoteSetFnDefault</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocfn,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freefn,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayfn,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>millisfn);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad334248744d5387da78ca09c3498f397" kindref="member">NoteSetFn</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocHook,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freeHook,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayMsHook,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>getMsHook);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a7f3bdc32e515a57d8cfe959cc021b76b" kindref="member">NoteGetFn</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>*mallocHook,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>*freeHook,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>*delayMsHook,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>*getMsHook);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a85c66fdcef6d9ea044a9adc37af5afa7" kindref="member">NoteSetFnSerial</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>receiveFn);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa0d08eb556c9cf1ec28c3cd5f86d3eaa" kindref="member">NoteSetFnSerialDefault</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>receiveFn);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a2bd990e82a522241e86b03bbcbb6bb08" kindref="member">NoteGetFnSerial</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>*resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>*transmitFn,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>*availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>*receiveFn);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abeb555883ff039880048164763c3b9f0" kindref="member">NoteSetFnI2C</ref>(uint32_t<sp/>notecardAddr,<sp/>uint32_t<sp/>maxTransmitSize,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>receiveFn);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a840dff8348b52999ccc3b1673a3170df" kindref="member">NoteSetFnI2CDefault</ref>(uint32_t<sp/>notecardAddr,<sp/>uint32_t<sp/>maxTransmitSize,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>receiveFn);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a16d6a60ccab426ff4311c590e909c8f7" kindref="member">NoteGetFnI2C</ref>(uint32_t<sp/>*notecardAddr,<sp/>uint32_t<sp/>*maxTransmitSize,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>*resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>*transmitFn,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>*receiveFn);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a8b4baf1bb5b117eb312682e215e8f209" kindref="member">NoteSetActiveInterface</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interface);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a77448627bb79c6051b577ad344b14fb2" kindref="member">NoteGetActiveInterface</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a8648db242df0d5ac68334ab93ee5fa0e" kindref="member">NoteSetFnDisabled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a057865626ae6b0fe8e456056c581a7a4" kindref="member">NoteSetI2CAddress</ref>(uint32_t<sp/>i2cAddr);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a5464955345634f810de1360880a629c4" kindref="member">NoteSetI2CMtu</ref>(uint32_t<sp/>i2cMtu);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa23d9b92604e9b490710a707cd0aa37c" kindref="member">NoteGetI2CAddress</ref>(uint32_t<sp/>*i2cAddr);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad5d209218245579877cdbfb667208dcc" kindref="member">NoteGetI2CMtu</ref>(uint32_t<sp/>*i2cMtu);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Notecard,<sp/>whose<sp/>default<sp/>I2C<sp/>address<sp/>is<sp/>below,<sp/>uses<sp/>a<sp/>serial-to-i2c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>protocol<sp/>whose<sp/>&quot;byte<sp/>count&quot;<sp/>must<sp/>fit<sp/>into<sp/>a<sp/>single<sp/>byte<sp/>and<sp/>which<sp/>must<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>a<sp/>2-byte<sp/>header<sp/>field.<sp/><sp/>This<sp/>is<sp/>why<sp/>the<sp/>maximum<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transmitted<sp/>by<sp/>note-c<sp/>in<sp/>a<sp/>single<sp/>I2C<sp/>I/O<sp/>is<sp/>255<sp/>-<sp/>2<sp/>=<sp/>253<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="812" refid="note_8h_1a3107c5344909029555deedfacb21b43a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_I2C_ADDR_DEFAULT<sp/><sp/><sp/>0x17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Serial-to-i2c<sp/>protocol<sp/>header<sp/>size<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_I2C_HEADER_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816" refid="note_8h_1aa043f18c8e0b59eef37008116957dbfa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOTE_I2C_HEADER_SIZE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>bytes<sp/>capable<sp/>of<sp/>being<sp/>transmitted<sp/>in<sp/>a<sp/>single<sp/>read/write<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_I2C_MAX_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>NOTE_I2C_MTU_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>NOTE_I2C_MTU_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>NOTE_I2C_MTU_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>NOTE_I2C_MAX_MAX<sp/>NOTE_I2C_MTU_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>NOTE_I2C_MAX_MAX<sp/>(UCHAR_MAX<sp/>-<sp/>NOTE_I2C_HEADER_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_I2C_MTU_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832" refid="note_8h_1ae354e639aef31cd771bd0a22ec84a9fe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOTE_I2C_MTU_MAX<sp/>NOTE_I2C_MAX_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>ARDUINO<sp/>implementations,<sp/>which<sp/>to<sp/>date<sp/>is<sp/>the<sp/>largest<sp/>use<sp/>of<sp/>this<sp/>library,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Wire<sp/>package<sp/>is<sp/>implemented<sp/>in<sp/>a<sp/>broad<sp/>variety<sp/>of<sp/>ways<sp/>by<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vendors.<sp/><sp/>The<sp/>default<sp/>implementation<sp/>has<sp/>a<sp/>mere<sp/>32-byte<sp/>static<sp/>I2C<sp/>buffer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>that<sp/>the<sp/>maximum<sp/>to<sp/>be<sp/>transmitted<sp/>in<sp/>a<sp/>single<sp/>I/O<sp/>(given<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2-byte<sp/>serial-to-i2c<sp/>protocol<sp/>header)<sp/>is<sp/>30<sp/>bytes.<sp/><sp/>However,<sp/>if<sp/>we<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>specific<sp/>platform<sp/>(such<sp/>as<sp/>STM32DUINO)<sp/>we<sp/>can<sp/>relax<sp/>this<sp/>restriction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_I2C_MAX_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user<sp/>is<sp/>overriding<sp/>it<sp/>at<sp/>compile<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>NOTE_I2C_MTU_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>NOTE_I2C_MTU_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(NOTE_I2C_MTU_DEFAULT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user<sp/>is<sp/>overriding<sp/>it<sp/>at<sp/>compile<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>NOTE_I2C_MAX_DEFAULT<sp/>NOTE_I2C_MTU_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(ARDUINO_ARCH_STM32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>know<sp/>that<sp/>stm32duino<sp/>dynamically<sp/>allocates<sp/>I/O<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>NOTE_I2C_MAX_DEFAULT<sp/>NOTE_I2C_MTU_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>to<sp/>what&apos;s<sp/>known<sp/>to<sp/>be<sp/>safe<sp/>for<sp/>all<sp/>Arduino<sp/>implementations</highlight></codeline>
<codeline lineno="859" refid="note_8h_1a029462dd63c2f85402fa69f5466082f2" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>NOTE_I2C_MAX_DEFAULT<sp/><sp/><sp/><sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_I2C_MTU_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="note_8h_1a163b1c2136ac105797aab34b532367dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOTE_I2C_MTU_DEFAULT<sp/>NOTE_I2C_MAX_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="note_8h_1a0bb27773cb7cf2e5b994261fbe835103" refkind="member"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a0bb27773cb7cf2e5b994261fbe835103" kindref="member">NoteUserAgent</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879" refid="note_8h_1ad09beb502758c3c20ea01d0b5940a751" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad09beb502758c3c20ea01d0b5940a751" kindref="member">NoteUserAgentUpdate</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*ua);</highlight></codeline>
<codeline lineno="885" refid="note_8h_1a35ebbb9e71fc6822ec7848df598b1b6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a35ebbb9e71fc6822ec7848df598b1b6f" kindref="member">NoteSetUserAgent</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*agent);</highlight></codeline>
<codeline lineno="894" refid="note_8h_1a6586f487873db10a6cca9f4f2812f2e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6586f487873db10a6cca9f4f2812f2e1" kindref="member">NoteSetUserAgentOS</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_platform,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_family,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_version);</highlight></codeline>
<codeline lineno="904" refid="note_8h_1a06db056eec95b5d3bce80a00d87720d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a06db056eec95b5d3bce80a00d87720d1" kindref="member">NoteSetUserAgentCPU</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_mem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_mhz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_cores,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cpu_vendor,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cpu_name);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>to<sp/>the<sp/>functions<sp/>set<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1acc098e468887e7622ee6ecda06fe1fb5" kindref="member">NoteDebug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1afac93e9bae7c5cc4c7094f41accde0a6" kindref="member">NoteDebugln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a17c60e911144d80329e264eba37e215d" kindref="member">NoteDebugIntln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="934" refid="note_8h_1ab239dae9dfc343d2569fe87041ae7d49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab239dae9dfc343d2569fe87041ae7d49" kindref="member">NoteDebugf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936" refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_ERROR<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_WARN<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_INFO<sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939" refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_DEBUG<sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aea4a872558f91cfdba679dea15e39b9c" kindref="member">NoteDebugWithLevelLn</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_LOG_SHOW_FILE_AND_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_FILE_AND_LINE(lvl)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="966"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(lvl,<sp/>__FILE__<sp/>&quot;:&quot;<sp/>NOTE_C_STRINGIZE(__LINE__)<sp/>&quot;<sp/>&quot;);<sp/>\</highlight></codeline>
<codeline lineno="967"><highlight class="preprocessor">}<sp/>while<sp/>(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969" refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_FILE_AND_LINE(lvl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOG_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_ERROR(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_ERROR);<sp/>\</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_ERROR,<sp/>&quot;[ERROR]<sp/>&quot;);<sp/>\</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_ERROR,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOG_WARN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="note_8h_1a7ac988c4204339520399f37a04eb4110" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_WARN(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_WARN);<sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_WARN,<sp/>&quot;[WARN]<sp/>&quot;);<sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_WARN,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOG_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="note_8h_1a260d740972b2082c72f77b416713f5a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_INFO(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_INFO);<sp/>\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_INFO,<sp/>&quot;[INFO]<sp/>&quot;);<sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_INFO,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOG_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997" refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_DEBUG(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_DEBUG);<sp/>\</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_DEBUG,<sp/>&quot;[DEBUG]<sp/>&quot;);<sp/>\</highlight></codeline>
<codeline lineno="1000"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_DEBUG,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>log<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="note_8h_1a8cfae267b7197e9e2249c2618fc35db8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_DEFAULT<sp/>NOTE_C_LOG_LEVEL_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>max<sp/>log<sp/>level<sp/>for<sp/>NoteDebugWithLevel<sp/>may<sp/>be<sp/>configured<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile-time,<sp/>via<sp/>NOTE_C_LOG_LEVEL,<sp/>otherwise<sp/>it<sp/>defaults<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE_C_LOG_LEVEL_DEFAULT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOG_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011" refid="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL<sp/>NOTE_C_LOG_LEVEL_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Log<sp/>level<sp/>may<sp/>also<sp/>be<sp/>set<sp/>at<sp/>runtime,<sp/>via<sp/>NoteSetLogLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a8b39ccd734b1d0602cf6f3612a25e5bd" kindref="member">NoteSetLogLevel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1ae66d7015d2a0810abfc656b88e6e6a34" kindref="member">NoteMalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a34e3da9b2215a8b7052dccc2365e3085" kindref="member">NoteFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a4dcd12c5b2ec9d2acd78363a2e41e698" kindref="member">NoteGetMs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a30ebf8f80fc647865819c842adc53816" kindref="member">NoteDelayMs</ref>(uint32_t<sp/>ms);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a195386217d2b20709846d45780af2013" kindref="member">NoteLockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a2a4589fef84a01f2a1bee1c5a7053fc6" kindref="member">NoteUnlockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a57dcffb142faaef2714839d27afe5be0" kindref="member">NoteI2CAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a35bbb8179be3a72ab7ec302dcbfad9e7" kindref="member">NoteI2CMax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1094" refid="note_8h_1ae7537bf172173234ecb77a6e0af513f8" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1ae7537bf172173234ecb77a6e0af513f8" kindref="member">NoteMemAvailable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1102" refid="note_8h_1a36d63199ff85bd480eafc6b547e7f9a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a36d63199ff85bd480eafc6b547e7f9a0" kindref="member">NotePrint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="1108" refid="note_8h_1a17c3fa0521904ce276913ce0bd666fd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a17c3fa0521904ce276913ce0bd666fd1" kindref="member">NotePrintln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line);</highlight></codeline>
<codeline lineno="1117" refid="note_8h_1aca48731908e450c955c6dc1f6b3381a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aca48731908e450c955c6dc1f6b3381a4" kindref="member">NotePrintf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>helpers<sp/>to<sp/>help<sp/>encourage<sp/>the<sp/>world<sp/>to<sp/>abandon<sp/>the<sp/>horribly-error-prone<sp/>strn*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133" refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" kindref="member">strlcpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siz);</highlight></codeline>
<codeline lineno="1146" refid="note_8h_1ae85b825a7f3d4dcf136b85949b646a46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae85b825a7f3d4dcf136b85949b646a46" kindref="member">strlcat</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siz);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JSON<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="note_8h_1ab4005e4eb92f95e4430147551c093a82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab4005e4eb92f95e4430147551c093a82" kindref="member">JInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1157" refid="note_8h_1aa2c94029f47ff6dab5fe3087d8efef4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa2c94029f47ff6dab5fe3087d8efef4f" kindref="member">JCheck</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1a66cca753ac78c92d0904ad74a33b8c92" kindref="member">JGetString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1a7e30c9120dbe63db3fbedd568f76ecf7" kindref="member">JGetNumber</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a7422ca821f0402b0c0bd890558cbb254" kindref="member">JGetArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a0fd01d5fe6235d3b194449a8e6ce4f9c" kindref="member">JGetObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/><ref refid="note_8h_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a51518894ee545340a884089f64e34671" kindref="member">JGetBool</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1a2b2a9c92f2833d424d1a7ab66b3533a8" kindref="member">JNumberValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1abf4a22e53b5292fe4d65571159637cc4" kindref="member">JStringValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3e836494d9b3a6fc4e4b02dc2767df83" kindref="member">JBoolValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/><ref refid="note_8h_1a9f5aaa3fbaaee87de2b6119c7428b9dd" kindref="member">JIntValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aafb4b69e85bd5d9c2d1534688fd4176d" kindref="member">JIsNullString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af4e9257e3b88d1b55441f15efd1bf0c3" kindref="member">JIsExactString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*teststr);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*substr);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9378ea8eddda1f23c815b69591747846" kindref="member">JAddBinaryToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fieldName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*binaryData,<sp/>uint32_t<sp/>binaryDataLen);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a4c5ca7aa585e06623f2788b86300538d" kindref="member">JGetBinaryFromObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fieldName,<sp/>uint8_t<sp/>**retBinaryData,<sp/>uint32_t<sp/>*retBinaryDataLen);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1ac8fc6b5f1197bd2d117f538b1e33d34b" kindref="member">JGetItemName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1aa938730e0ffcac86947fc537945e05d3" kindref="member">JAllocString</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1a780bf7071e3133e62794491aa90a7086" kindref="member">JType</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370" refid="note_8h_1abb2f3b5f9047911dfa9ae2249ae4ad58" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NOT_PRESENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371" refid="note_8h_1a1dde42a8f9d06851b91f73dcadb48067" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_BOOL_TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372" refid="note_8h_1a33c56f9e059f017b5f73a7207b5f690a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_BOOL_FALSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373" refid="note_8h_1a7fd70bf9265ce886f8370b4fb8eebb92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_BOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JTYPE_BOOL_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374" refid="note_8h_1ab65facde73aab39c8c078c8f328badb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375" refid="note_8h_1a34cb28204f46e15dc57b5b82181e2e1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NUMBER_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376" refid="note_8h_1a73cc27bda4c0d44bffca5dbc353e8d65" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NUMBER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377" refid="note_8h_1a88bdd6cb77b65bec7d1a12d512a021a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_BLANK<sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378" refid="note_8h_1a05967fa1a39c824fce62fe31a645ca08" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="note_8h_1ab081e08668cdcbaed0bf2506cb666f9b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_NUMBER<sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380" refid="note_8h_1ad5597cf60a093c2986fb5451e69ea43e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_BOOL_TRUE<sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381" refid="note_8h_1a9db7f1f3c20bfd4aa66d563cde2d3bef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_BOOL_FALSE<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382" refid="note_8h_1aeba8ddb49a982975aff58fbc5a44b37d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383" refid="note_8h_1a7f3ba7ec204fbe5e43714b514236a1c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_OBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384" refid="note_8h_1a3029c9e9a021cf404acbc2178b94470f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_ARRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a0b63b324fbe5e773ca7c137666687b41" kindref="member">JGetType</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*json,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a39d4dc978cbd0c5d10d287b4ac57b8d1" kindref="member">JGetItemType</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a791851ed95cd350c24f33af25e7f0af8" kindref="member">JBaseItemType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="1410" refid="note_8h_1a5427874049e8ce6e2211214d93f232c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JGetObjectItemName(j)<sp/>(j-&gt;string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>apps<sp/>that<sp/>wish<sp/>to<sp/>limit<sp/>their<sp/>C<sp/>library<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413" refid="note_8h_1a20c36388ecbae9120b19c30118891097" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JNTOA_PRECISION<sp/>(16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414" refid="note_8h_1a2554bdccd902653258af24e049abaccb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JNTOA_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(44)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425" refid="note_8h_1ac17ffec8a10a5ec96e62cb5a856d4203" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1ac17ffec8a10a5ec96e62cb5a856d4203" kindref="member">JNtoA</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>f,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision);</highlight></codeline>
<codeline lineno="1434" refid="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" refkind="member"><highlight class="normal"><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" kindref="member">JAtoN</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**endPtr);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3fe8a8eeb1d78a8eb52ed720a36b99c6" kindref="member">JItoA</ref>(<ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/><ref refid="note_8h_1aab6ee0e6d2c3b0836c6ab294c5626d01" kindref="member">JAtoI</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1459" refid="note_8h_1a9c5d969e2bfd9cbda902e6388285e624" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9c5d969e2bfd9cbda902e6388285e624" kindref="member">JB64EncodeLen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1469" refid="note_8h_1abd22cd7117763400021d6653a33f0d94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abd22cd7117763400021d6653a33f0d94" kindref="member">JB64Encode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>coded_dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*plain_src,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_plain_src);</highlight></codeline>
<codeline lineno="1477" refid="note_8h_1a53559c7bc512587f6776794a78fc424f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a53559c7bc512587f6776794a78fc424f" kindref="member">JB64DecodeLen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>coded_src);</highlight></codeline>
<codeline lineno="1486" refid="note_8h_1a48c6cad9358d4154567949c192445a9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a48c6cad9358d4154567949c192445a9e" kindref="member">JB64Decode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>plain_dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*coded_src);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MD5<sp/>Helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493" refid="struct_note_m_d5_context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1494" refid="struct_note_m_d5_context_1ad58666280287db0368333c2f50465f02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buf[4];</highlight></codeline>
<codeline lineno="1495" refid="struct_note_m_d5_context_1a79dcc9210c65fe4f31eb4295b2fc9510" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bits[2];</highlight></codeline>
<codeline lineno="1496" refid="struct_note_m_d5_context_1af22373f810c98e50af1890c0a5e8cfa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>in[64];</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}<sp/><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref>;</highlight></codeline>
<codeline lineno="1498" refid="note_8h_1ada955eca3890263865a0f8b15afc052d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_MD5_HASH_SIZE<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499" refid="note_8h_1a1bb87c25941d1a303245efbe489929e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_MD5_HASH_STRING_SIZE<sp/>(((NOTE_MD5_HASH_SIZE)*2)+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="note_8h_1af22f3a3c0071c07b3765df7907301c9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af22f3a3c0071c07b3765df7907301c9f" kindref="member">NoteMD5Init</ref>(<ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1514" refid="note_8h_1ae70580a3b6b7d93590e84a46b4035fa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae70580a3b6b7d93590e84a46b4035fa9" kindref="member">NoteMD5Update</ref>(<ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1521" refid="note_8h_1ad1aef239c14e207376fff97a9269b569" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad1aef239c14e207376fff97a9269b569" kindref="member">NoteMD5Final</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*digest,<sp/><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1528" refid="note_8h_1a7a52d858400f4634e7be440a5753967e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a7a52d858400f4634e7be440a5753967e" kindref="member">NoteMD5Transform</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buf[4],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inraw[64]);</highlight></codeline>
<codeline lineno="1536" refid="note_8h_1a789bebabb0a08fe02ccea85aa917488d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a789bebabb0a08fe02ccea85aa917488d" kindref="member">NoteMD5Hash</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*retHash);</highlight></codeline>
<codeline lineno="1545" refid="note_8h_1a54de4da750412f3f2192e1ff453810ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a54de4da750412f3f2192e1ff453810ab" kindref="member">NoteMD5HashString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strbuf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="1553" refid="note_8h_1a095d52cf0bc437922a8104cb97445d29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a095d52cf0bc437922a8104cb97445d29" kindref="member">NoteMD5HashToString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strbuf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>High-level<sp/>helper<sp/>functions<sp/>that<sp/>are<sp/>both<sp/>useful<sp/>and<sp/>serve<sp/>to<sp/>show<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>how<sp/>to<sp/>call<sp/>the<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566" refid="note_8h_1aa23fa076e5c93d112762b4b687ea88ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa23fa076e5c93d112762b4b687ea88ef" kindref="member">NoteAuxSerialFlowControl</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delayMs);</highlight></codeline>
<codeline lineno="1577" refid="note_8h_1a10c81f1c0470f4b3cd1c877183163815" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a10c81f1c0470f4b3cd1c877183163815" kindref="member">NoteBinaryCodecDecode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*encData,<sp/>uint32_t<sp/>encDataLen,</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*decBuf,<sp/>uint32_t<sp/>decBufSize);</highlight></codeline>
<codeline lineno="1589" refid="note_8h_1a91a381b28624b7d7a5b7c59cea31e40f" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a91a381b28624b7d7a5b7c59cea31e40f" kindref="member">NoteBinaryCodecEncode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*decData,<sp/>uint32_t<sp/>decDataLen,</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*encBuf,<sp/>uint32_t<sp/>encBufSize);</highlight></codeline>
<codeline lineno="1598" refid="note_8h_1a5db0bc71463c613425debfb34fa38794" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a5db0bc71463c613425debfb34fa38794" kindref="member">NoteBinaryCodecMaxDecodedLength</ref>(uint32_t<sp/>bufferSize);</highlight></codeline>
<codeline lineno="1606" refid="note_8h_1a126a4cb7f30d49518bd2552902099634" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a126a4cb7f30d49518bd2552902099634" kindref="member">NoteBinaryCodecMaxEncodedLength</ref>(uint32_t<sp/>unencodedLength);</highlight></codeline>
<codeline lineno="1614" refid="note_8h_1af95b1666a184db30b58abc1b19771d75" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1af95b1666a184db30b58abc1b19771d75" kindref="member">NoteBinaryStoreDecodedLength</ref>(uint32_t<sp/>*len);</highlight></codeline>
<codeline lineno="1622" refid="note_8h_1ab259d6e53b03f2bc7c18f9748489b292" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1ab259d6e53b03f2bc7c18f9748489b292" kindref="member">NoteBinaryStoreEncodedLength</ref>(uint32_t<sp/>*len);</highlight></codeline>
<codeline lineno="1633" refid="note_8h_1aa99b2870c533bced52a5947b1993b168" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1aa99b2870c533bced52a5947b1993b168" kindref="member">NoteBinaryStoreReceive</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>bufLen,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>decodedOffset,<sp/>uint32_t<sp/>decodedLen);</highlight></codeline>
<codeline lineno="1640" refid="note_8h_1ad93e8cd6f19f9eaed1be3273b2aecbb0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1ad93e8cd6f19f9eaed1be3273b2aecbb0" kindref="member">NoteBinaryStoreReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1651" refid="note_8h_1a3f126a749c074c7763227ed164f794a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1a3f126a749c074c7763227ed164f794a8" kindref="member">NoteBinaryStoreTransmit</ref>(uint8_t<sp/>*unencodedData,<sp/>uint32_t<sp/>unencodedLen,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bufLen,<sp/>uint32_t<sp/>notecardOffset);</highlight></codeline>
<codeline lineno="1660" refid="note_8h_1a2e8d519c15479dfaf09566ed97ec3711" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a2e8d519c15479dfaf09566ed97ec3711" kindref="member">NoteSetSTSecs</ref>(uint32_t<sp/>secs);</highlight></codeline>
<codeline lineno="1666" refid="note_8h_1afc76a1b0c6b4dfa1ab2e7c3d6286583e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1afc76a1b0c6b4dfa1ab2e7c3d6286583e" kindref="member">NoteTimeValid</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1672" refid="note_8h_1abf11915def4e2d9b1e54cb63d13e95e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abf11915def4e2d9b1e54cb63d13e95e2" kindref="member">NoteTimeValidST</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1678" refid="note_8h_1a0d930f1361f45030bc3638197b329bcb" refkind="member"><highlight class="normal"><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref><sp/><ref refid="note_8h_1a0d930f1361f45030bc3638197b329bcb" kindref="member">NoteTime</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1684" refid="note_8h_1a1f834110044f5d4586ad98bde88084d6" refkind="member"><highlight class="normal"><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref><sp/><ref refid="note_8h_1a1f834110044f5d4586ad98bde88084d6" kindref="member">NoteTimeST</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1690" refid="note_8h_1af5568df79a7d26a8807b54853a56b921" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af5568df79a7d26a8807b54853a56b921" kindref="member">NoteTimeRefreshMins</ref>(uint32_t<sp/>mins);</highlight></codeline>
<codeline lineno="1700" refid="note_8h_1a09596cfe3e377e92f4ebf6700e3ac990" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a09596cfe3e377e92f4ebf6700e3ac990" kindref="member">NoteTimeSet</ref>(<ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref><sp/>secondsUTC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*zone,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*country,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*area);</highlight></codeline>
<codeline lineno="1715" refid="note_8h_1a57534ae715e262dd91a55bd71de37631" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a57534ae715e262dd91a55bd71de37631" kindref="member">NoteLocalTimeST</ref>(uint16_t<sp/>*retYear,<sp/>uint8_t<sp/>*retMonth,<sp/>uint8_t<sp/>*retDay,<sp/>uint8_t<sp/>*retHour,<sp/>uint8_t<sp/>*retMinute,<sp/>uint8_t<sp/>*retSecond,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retWeekday,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retZone);</highlight></codeline>
<codeline lineno="1726" refid="note_8h_1ade2325739300181a0fad13e83f377ac1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ade2325739300181a0fad13e83f377ac1" kindref="member">NoteRegion</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retCountry,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retArea,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retZone,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*retZoneOffset);</highlight></codeline>
<codeline lineno="1735" refid="note_8h_1a544f2aeaa9bbd229ab173f8e9ba42dc5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a544f2aeaa9bbd229ab173f8e9ba42dc5" kindref="member">NoteLocationValid</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf,<sp/>uint32_t<sp/>errbuflen);</highlight></codeline>
<codeline lineno="1744" refid="note_8h_1aa1fd37b1100f616b178fc6c0bcd18292" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa1fd37b1100f616b178fc6c0bcd18292" kindref="member">NoteLocationValidST</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf,<sp/>uint32_t<sp/>errbuflen);</highlight></codeline>
<codeline lineno="1752" refid="note_8h_1acb52ea66e2ee02a35d8442fd4f9567b3" refkind="member"><highlight class="normal"><ref refid="note_8h_1afe52390af13fb8c4579f5ccf3ad74abf" kindref="member">NOTE_C_DEPRECATED</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1acb52ea66e2ee02a35d8442fd4f9567b3" kindref="member">NoteTurboIO</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1761" refid="note_8h_1aa998d7b236f2ff2541a20872f261db60" refkind="member"><highlight class="normal"><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/><ref refid="note_8h_1aa998d7b236f2ff2541a20872f261db60" kindref="member">NoteGetEnvInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/>defaultVal);</highlight></codeline>
<codeline lineno="1770" refid="note_8h_1af6f3d1929a16c26050550f01d69de9a9" refkind="member"><highlight class="normal"><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1af6f3d1929a16c26050550f01d69de9a9" kindref="member">NoteGetEnvNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>defaultVal);</highlight></codeline>
<codeline lineno="1781" refid="note_8h_1a84b63daf99110b90e0e9cad94df694ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a84b63daf99110b90e0e9cad94df694ff" kindref="member">NoteGetEnv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*defaultVal,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>buflen);</highlight></codeline>
<codeline lineno="1790" refid="note_8h_1af7edd00b0a1764be80585ca6b99e8045" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af7edd00b0a1764be80585ca6b99e8045" kindref="member">NoteSetEnvDefault</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="1799" refid="note_8h_1a43932b5cf2ba57357efd5de109c288d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a43932b5cf2ba57357efd5de109c288d3" kindref="member">NoteSetEnvDefaultNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>defaultVal);</highlight></codeline>
<codeline lineno="1808" refid="note_8h_1a3b959828f2723e37f1aa15818122a49c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3b959828f2723e37f1aa15818122a49c" kindref="member">NoteSetEnvDefaultInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/>defaultVal);</highlight></codeline>
<codeline lineno="1814" refid="note_8h_1ad479c8e6d2c17ed58f96b9aa234ad81d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad479c8e6d2c17ed58f96b9aa234ad81d" kindref="member">NoteIsConnected</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1820" refid="note_8h_1aa1cce9855703b1b8a5cc856a84378c45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa1cce9855703b1b8a5cc856a84378c45" kindref="member">NoteIsConnectedST</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1829" refid="note_8h_1a387befb0abe72b215645a6650ea7e72f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a387befb0abe72b215645a6650ea7e72f" kindref="member">NoteGetNetStatus</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen);</highlight></codeline>
<codeline lineno="1838" refid="note_8h_1ab9c78d2fef7a116ccc22ced6a9304fb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab9c78d2fef7a116ccc22ced6a9304fb1" kindref="member">NoteGetVersion</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*versionBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>versionBufLen);</highlight></codeline>
<codeline lineno="1850" refid="note_8h_1a711d1c4cb256e29e34853959d4f032cc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a711d1c4cb256e29e34853959d4f032cc" kindref="member">NoteGetLocation</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>*retLat,<sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>*retLon,<sp/><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref><sp/>*time,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen);</highlight></codeline>
<codeline lineno="1859" refid="note_8h_1a54f0c0ac25d91cdff09d4c374f4b9393" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a54f0c0ac25d91cdff09d4c374f4b9393" kindref="member">NoteSetLocation</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>lat,<sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>lon);</highlight></codeline>
<codeline lineno="1865" refid="note_8h_1aafa429043e07e78852045017c75392ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aafa429043e07e78852045017c75392ae" kindref="member">NoteClearLocation</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1874" refid="note_8h_1a1f5e4d1d5d4c91ee2409686e59e28e76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a1f5e4d1d5d4c91ee2409686e59e28e76" kindref="member">NoteGetLocationMode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modeBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeBufLen);</highlight></codeline>
<codeline lineno="1883" refid="note_8h_1a38ab54badbef76dd436d557889eaaf83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a38ab54badbef76dd436d557889eaaf83" kindref="member">NoteSetLocationMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,<sp/>uint32_t<sp/>seconds);</highlight></codeline>
<codeline lineno="1898" refid="note_8h_1acf36d7c23420551e51597554a69f97c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1acf36d7c23420551e51597554a69f97c3" kindref="member">NoteGetServiceConfig</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*productBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>productBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*serviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>serviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*deviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*snBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snBufLen);</highlight></codeline>
<codeline lineno="1913" refid="note_8h_1ac5989f17e99b8f154fe4318bb7bcf73d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ac5989f17e99b8f154fe4318bb7bcf73d" kindref="member">NoteGetServiceConfigST</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*productBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>productBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*serviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>serviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*deviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*snBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snBufLen);</highlight></codeline>
<codeline lineno="1925" refid="note_8h_1adfe58a53ab4a4de6f6b00092494330ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1adfe58a53ab4a4de6f6b00092494330ab" kindref="member">NoteGetStatus</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen,<sp/><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref><sp/>*bootTime,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retUSB,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retSignals);</highlight></codeline>
<codeline lineno="1937" refid="note_8h_1ad873ec5c640174f673ceabad89b8f030" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad873ec5c640174f673ceabad89b8f030" kindref="member">NoteGetStatusST</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen,<sp/><ref refid="note_8h_1aaa2abe42069f4e8774798f8e3e89264e" kindref="member">JTIME</ref><sp/>*bootTime,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retUSB,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retSignals);</highlight></codeline>
<codeline lineno="1947" refid="note_8h_1a5495b9b5807536807987af253ee2b918" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a5495b9b5807536807987af253ee2b918" kindref="member">NoteSleep</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stateb64,<sp/>uint32_t<sp/>seconds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modes);</highlight></codeline>
<codeline lineno="1956" refid="note_8h_1ab6689989662882c9140822e67d0ae84d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab6689989662882c9140822e67d0ae84d" kindref="member">NoteWake</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stateLen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*state);</highlight></codeline>
<codeline lineno="1964" refid="note_8h_1a0a6818960d5dc59c9dc15ec12c8eca67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a0a6818960d5dc59c9dc15ec12c8eca67" kindref="member">NoteFactoryReset</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deleteConfigSettings);</highlight></codeline>
<codeline lineno="1972" refid="note_8h_1ac4e9ce3c9b56c05603c3a87377abfdda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ac4e9ce3c9b56c05603c3a87377abfdda" kindref="member">NoteSetSerialNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sn);</highlight></codeline>
<codeline lineno="1980" refid="note_8h_1a68e1b388237b6d156f07299c8fdea24b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a68e1b388237b6d156f07299c8fdea24b" kindref="member">NoteSetProductID</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*productID);</highlight></codeline>
<codeline lineno="1990" refid="note_8h_1aedfe8eec797fa14b80c9a836a3267a69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aedfe8eec797fa14b80c9a836a3267a69" kindref="member">NoteSetUploadMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uploadMode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uploadMinutes,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="2002" refid="note_8h_1a65b9120ff5b755405d76a3ba992197ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a65b9120ff5b755405d76a3ba992197ac" kindref="member">NoteSetSyncMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uploadMode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uploadMinutes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>downloadMinutes,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sync);</highlight></codeline>
<codeline lineno="2003" refid="note_8h_1a2468ed01b499ba8fc72fefa3500cad90" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteSend<sp/>NoteAdd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014" refid="note_8h_1a859c73fcda95741f545f2996d0d4d50a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a859c73fcda95741f545f2996d0d4d50a" kindref="member">NoteAdd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*target,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*body,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>urgent);</highlight></codeline>
<codeline lineno="2027" refid="note_8h_1a740e04f22326f5f421bf3c86d5fd1ed3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a740e04f22326f5f421bf3c86d5fd1ed3" kindref="member">NoteSendToRoute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*method,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*routeAlias,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*notefile,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*body);</highlight></codeline>
<codeline lineno="2035" refid="note_8h_1ad29039cfe90306e391d8a85a0df1d69f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad29039cfe90306e391d8a85a0df1d69f" kindref="member">NoteGetVoltage</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>*voltage);</highlight></codeline>
<codeline lineno="2043" refid="note_8h_1a33a8a42563cc3dc4d3bda44144d73784" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a33a8a42563cc3dc4d3bda44144d73784" kindref="member">NoteGetTemperature</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>*temp);</highlight></codeline>
<codeline lineno="2058" refid="note_8h_1a289e6d70e17615cf927a9094080139f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a289e6d70e17615cf927a9094080139f1" kindref="member">NoteGetContact</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*orgBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orgBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*roleBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>roleBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*emailBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>emailBufLen);</highlight></codeline>
<codeline lineno="2069" refid="note_8h_1aad1a6d6d04a1cac3339022d1068df201" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aad1a6d6d04a1cac3339022d1068df201" kindref="member">NoteSetContact</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameBuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*orgBuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*roleBuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*emailBuf);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Definitions<sp/>necessary<sp/>for<sp/>payload<sp/>descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072" refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NP_SEGTYPE_LEN<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073" refid="note_8h_1a21ad183750f7d93528d707af3339b200" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NP_SEGLEN_LEN<sp/>sizeof(uint32_t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074" refid="note_8h_1a6bd262ffa71c6e153f70b1fcbfbe9150" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NP_SEGHDR_LEN<sp/>(NP_SEGTYPE_LEN<sp/>+<sp/>NP_SEGLEN_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079" refid="struct_note_payload_desc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2080" refid="struct_note_payload_desc_1a05effe66a8c405ee11e9b1d8758d322a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_note_payload_desc_1a05effe66a8c405ee11e9b1d8758d322a" kindref="member">data</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2081" refid="struct_note_payload_desc_1afb8e03b00c614d92cde2695938cd8ef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_note_payload_desc_1afb8e03b00c614d92cde2695938cd8ef1" kindref="member">alloc</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2082" refid="struct_note_payload_desc_1ad28917f881294856b621632d318f5ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_note_payload_desc_1ad28917f881294856b621632d318f5ea7" kindref="member">length</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="2083"><highlight class="normal">}<sp/><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref>;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094" refid="note_8h_1a42f5f4c8090a088fbc0d6b68646e9c0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a42f5f4c8090a088fbc0d6b68646e9c0e" kindref="member">NotePayloadSaveAndSleep</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/>uint32_t<sp/>seconds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modes);</highlight></codeline>
<codeline lineno="2102" refid="note_8h_1a62202e752d3e6b75d0beebbc0ebd29e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a62202e752d3e6b75d0beebbc0ebd29e9" kindref="member">NotePayloadRetrieveAfterSleep</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc);</highlight></codeline>
<codeline lineno="2110" refid="note_8h_1ae8b19866d8b472354b80679fcd03d3bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae8b19866d8b472354b80679fcd03d3bf" kindref="member">NotePayloadSet</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>buflen);</highlight></codeline>
<codeline lineno="2116" refid="note_8h_1a516e80912a7b5874770888765db7347e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a516e80912a7b5874770888765db7347e" kindref="member">NotePayloadFree</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc);</highlight></codeline>
<codeline lineno="2127" refid="note_8h_1ad7c0fdd390eaf4338117bba38a92cdce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad7c0fdd390eaf4338117bba38a92cdce" kindref="member">NotePayloadAddSegment</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segtype[<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref>],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/>uint32_t<sp/>plen);</highlight></codeline>
<codeline lineno="2138" refid="note_8h_1a10bb7e445f9515a2289e9ed2dd4485d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a10bb7e445f9515a2289e9ed2dd4485d1" kindref="member">NotePayloadFindSegment</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segtype[<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref>],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/>uint32_t<sp/>*plen);</highlight></codeline>
<codeline lineno="2149" refid="note_8h_1a573bc94dabf3f27220685a8c4d7adce9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a573bc94dabf3f27220685a8c4d7adce9" kindref="member">NotePayloadGetSegment</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segtype[<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref>],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hard-wired<sp/>constants<sp/>used<sp/>to<sp/>specify<sp/>field<sp/>types<sp/>when<sp/>creating<sp/>note<sp/>templates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152" refid="note_8h_1a18eddc8e4f0522a438b6475058e5ad32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TBOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153" refid="note_8h_1a6186fd56a505b415b2ab2f50233c157f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154" refid="note_8h_1a91ba007692878e4a02154c04ae390f39" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155" refid="note_8h_1a2011bffb5bae1513306b0615f885ecc3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT24<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156" refid="note_8h_1ab1bbd49f40d8d7722f8ca7347bd83513" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157" refid="note_8h_1a8437f26572687d03e061a0113af0cb0c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8-byte<sp/>signed<sp/>integer<sp/>(note-c<sp/>support<sp/>depends<sp/>upon<sp/>platform)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158" refid="note_8h_1ade35b42a310f0bde7e6741c9ee7673b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159" refid="note_8h_1a1d8690165d7e8509f58efd34fd45041e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160" refid="note_8h_1a5a5e5e167c6cb206ea61d86cf030adb5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT24<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161" refid="note_8h_1a7f2af02b4c87ac0d4804ad8b5437d48d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162" refid="note_8h_1a154fa3416f08de2b073fe6aef8c0104d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TFLOAT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>IEEE<sp/>754<sp/>floating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163" refid="note_8h_1a340a46ea4717ab906196ee4ada26c0a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TFLOAT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>IEEE<sp/>754<sp/>floating<sp/>point<sp/>(a.k.a.<sp/>&quot;float&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164" refid="note_8h_1a05a270325382e9d22be6317760dc800a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TFLOAT64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8-byte<sp/>IEEE<sp/>754<sp/>floating<sp/>point<sp/>(a.k.a.<sp/>&quot;double&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165" refid="note_8h_1ad7d1fa7b9a59ec5eba97dd784cbc29e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TSTRING(N)<sp/><sp/><sp/><sp/><sp/><sp/>_NOTE_C_STRINGIZE(N)<sp/></highlight><highlight class="comment">//<sp/>UTF-8<sp/>text<sp/>of<sp/>N<sp/>bytes<sp/>maximum<sp/>(fixed-length<sp/>reserved<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166" refid="note_8h_1a465bf5c669736c4f4d64d185d736c5bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TSTRINGV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NOTE_C_STRINGIZE(0)<sp/></highlight><highlight class="comment">//<sp/>variable-length<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179" refid="note_8h_1a5de0a3a1b648b9d5c2d0a7c608264f6a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a5de0a3a1b648b9d5c2d0a7c608264f6a" kindref="member">NoteTemplate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*notefileID,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*templateBody);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>C-callable<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/note-c/note-c/note.h"/>
  </compounddef>
</doxygen>
