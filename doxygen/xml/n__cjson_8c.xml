<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="n__cjson_8c" kind="file" language="C++">
    <compoundname>n_cjson.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="yes">n_lib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/note-c/note-c/n_cjson.c</label>
        <link refid="n__cjson_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ctype.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>n_lib.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structerror" prot="public">error</innerclass>
    <innerclass refid="structparse__buffer" prot="public">parse_buffer</innerclass>
    <innerclass refid="structprintbuffer" prot="public">printbuffer</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="n__cjson_8c_1a3a77fd438cec9e807b5dfc440010d2fe" prot="public" static="no">
        <name>PRINT_TAB_CHARS</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="80" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__cjson_8c_1a2257377f8b81f4f76a16b698f681af34" prot="public" static="no">
        <name>can_read</name>
        <param><defname>buffer</defname></param>
        <param><defname>size</defname></param>
        <initializer>((buffer != NULL) &amp;&amp; (((buffer)-&gt;offset + size) &lt;= (buffer)-&gt;length))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="247" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" prot="public" static="no">
        <name>can_access_at_index</name>
        <param><defname>buffer</defname></param>
        <param><defname>index</defname></param>
        <initializer>((buffer != NULL) &amp;&amp; (((buffer)-&gt;offset + index) &lt; (buffer)-&gt;length))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="249" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" prot="public" static="no">
        <name>cannot_access_at_index</name>
        <param><defname>buffer</defname></param>
        <param><defname>index</defname></param>
        <initializer>(!<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(buffer, index))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="250" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__cjson_8c_1ac538057ef78677344d222b763251af5e" prot="public" static="no">
        <name>buffer_at_offset</name>
        <param><defname>buffer</defname></param>
        <initializer>((buffer)-&gt;content + (buffer)-&gt;offset)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="252" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__cjson_8c_1a13f540fa846f658531751b5ccb78f303" prot="public" static="no">
        <name>cjson_min</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a &lt; b) ? a : b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="992" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="992" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="n__cjson_8c_1a6ff6e9678e47cf5347872008661d5846" prot="public" static="yes" mutable="no">
        <type><ref refid="structerror" kindref="compound">error</ref></type>
        <definition>error global_error</definition>
        <argsstring></argsstring>
        <name>global_error</name>
        <initializer>= { NULL, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="86" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="86" bodyend="86"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="n__cjson_8c_1a23eecc4bbb9975d87ad265af690caa16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>static J * _jNew_Item</definition>
        <argsstring>(void)</argsstring>
        <name>_jNew_Item</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="194" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="194" bodyend="202" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="89" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ad8fabb61b7f6006a24c30be9a3a57217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * JGetErrorPtr</definition>
        <argsstring>(void)</argsstring>
        <name>JGetErrorPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="91" column="15" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a6a4337b624de0af8d859f5fb7fc2c1b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JGetStringValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JGetStringValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="96" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="96" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0e13c62d998da5beb597713c59c24b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * JVersion</definition>
        <argsstring>(void)</argsstring>
        <name>JVersion</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="110" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1aea58fda839384899236abc8abff8891b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>static char _j_tolower</definition>
        <argsstring>(char c)</argsstring>
        <name>_j_tolower</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="115" column="13" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="115" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0af550faefd2dfc30c2b6c62a0c3272f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _case_insensitive_strcmp</definition>
        <argsstring>(const unsigned char *string1, const unsigned char *string2)</argsstring>
        <name>_case_insensitive_strcmp</name>
        <param>
          <type>const unsigned char *</type>
          <declname>string1</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>string2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="127" column="12" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="127" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a1e490f781e593f9bc836175e43370297" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>static unsigned char * _j_strdup</definition>
        <argsstring>(const unsigned char *string)</argsstring>
        <name>_j_strdup</name>
        <param>
          <type>const unsigned char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="146" column="22" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="146" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a1ddc4bc3ebb9aa4e244de12e2083575f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * JMalloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>JMalloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Dynamically allocate a block of memory of the given size. </para>
        </briefdescription>
        <detaileddescription>
<para>This is simply a wrapper around the memory allocation function provided by the user via <computeroutput>NoteSetFn</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first byte of the allocated memory or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="175" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1abf261bfa6bcacd681e976231d1d974d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JFree</definition>
        <argsstring>(void *p)</argsstring>
        <name>JFree</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Free a block of dynamically allocated memory. </para>
        </briefdescription>
        <detaileddescription>
<para>This is simply a wrapper around the memory free function provided by the user via <computeroutput>NoteSetFn</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the block of memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="188" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JDelete</definition>
        <argsstring>(J *item)</argsstring>
        <name>JDelete</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Free a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="209" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="209" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a9a547fdaeb1fdb2142816857d0015597" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>static unsigned char _get_decimal_point</definition>
        <argsstring>(void)</argsstring>
        <name>_get_decimal_point</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="229" column="22" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="229" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a990d282223fa2c8fc6cb2be3ea94287b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _parse_number</definition>
        <argsstring>(J *const item, parse_buffer *const input_buffer)</argsstring>
        <name>_parse_number</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>input_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="255" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="255" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ae69e47e50ef142737771bad7332bd8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JSetNumberHelper</definition>
        <argsstring>(J *object, JNUMBER number)</argsstring>
        <name>JSetNumberHelper</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="322" column="11" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="322" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a4fbd7bbc0aff53e95fca0a29c3672ae5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>static unsigned char * _ensure</definition>
        <argsstring>(printbuffer *const p, size_t needed)</argsstring>
        <name>_ensure</name>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>needed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="351" column="22" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="351" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a3f3aebba85052b8dcf35068212be328e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _update_offset</definition>
        <argsstring>(printbuffer *const buffer)</argsstring>
        <name>_update_offset</name>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="411" column="13" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="411" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a2e1e2a7be82964de81a7334a5d9af097" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _print_number</definition>
        <argsstring>(const J *const item, printbuffer *const output_buffer)</argsstring>
        <name>_print_number</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="423" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="423" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a331e06e534efeafacf4b0eb9d3705027" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>static unsigned long _parse_hex4</definition>
        <argsstring>(const unsigned char *const input)</argsstring>
        <name>_parse_hex4</name>
        <param>
          <type>const unsigned char *const</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="487" column="22" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="487" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ade7ec9a09ea20a38ded7afc0ab03d37b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>static unsigned char _utf16_literal_to_utf8</definition>
        <argsstring>(const unsigned char *const input_pointer, const unsigned char *const input_end, unsigned char **output_pointer)</argsstring>
        <name>_utf16_literal_to_utf8</name>
        <param>
          <type>const unsigned char *const</type>
          <declname>input_pointer</declname>
        </param>
        <param>
          <type>const unsigned char *const</type>
          <declname>input_end</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>output_pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="515" column="22" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="515" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a2d15998896815b70bea10c9ce58a092e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _parse_string</definition>
        <argsstring>(J *const item, parse_buffer *const input_buffer)</argsstring>
        <name>_parse_string</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>input_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="615" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="615" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ac6ddb64243b66cb4940c0e534f72d9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _n_htoa16</definition>
        <argsstring>(uint16_t n, unsigned char *p)</argsstring>
        <name>_n_htoa16</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="739" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="739" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1afc0c8e967d7ede28d97d31039aab82d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _print_string_ptr</definition>
        <argsstring>(const unsigned char *const input, printbuffer *const output_buffer)</argsstring>
        <name>_print_string_ptr</name>
        <param>
          <type>const unsigned char *const</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="755" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="755" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a8a3fc445af0e415299dc82532fa5ae85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _print_string</definition>
        <argsstring>(const J *const item, printbuffer *const p)</argsstring>
        <name>_print_string</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="867" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="867" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a4b684345a8ec3ae64261f72d145c4dc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _parse_value</definition>
        <argsstring>(J *const item, parse_buffer *const input_buffer)</argsstring>
        <name>_parse_value</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>input_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1140" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1140" bodyend="1187" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="873" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a019773d872ee2ecacaabb1a04a3f6a84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _print_value</definition>
        <argsstring>(const J *const item, printbuffer *const output_buffer)</argsstring>
        <name>_print_value</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1190" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1190" bodyend="1253" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="874" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a59be413b120fe0c2c1837538ae97271f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _parse_array</definition>
        <argsstring>(J *const item, parse_buffer *const input_buffer)</argsstring>
        <name>_parse_array</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>input_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1256" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1256" bodyend="1349" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="875" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ad0d6821e8436a46b67634075d8e90195" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _print_array</definition>
        <argsstring>(const J *const item, printbuffer *const output_buffer)</argsstring>
        <name>_print_array</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1352" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1352" bodyend="1403" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="876" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a5701d92d6841be25d06f415951415d54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _parse_object</definition>
        <argsstring>(J *const item, parse_buffer *const input_buffer)</argsstring>
        <name>_parse_object</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>input_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1406" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1406" bodyend="1515" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="877" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1aec33f59ab194d972f95e0d88ab63ba10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _print_object</definition>
        <argsstring>(const J *const item, printbuffer *const output_buffer)</argsstring>
        <name>_print_object</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1534" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1534" bodyend="1668" declfile="/home/runner/work/note-c/note-c/n_cjson.c" declline="878" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a827a4d5d2dafbdf3dfa107c5764bac57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *</type>
        <definition>static parse_buffer * _buffer_skip_whitespace</definition>
        <argsstring>(parse_buffer *const buffer)</argsstring>
        <name>_buffer_skip_whitespace</name>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="881" column="21" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="881" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a2275428c21f58021cb871cc961aab777" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *</type>
        <definition>static parse_buffer * _skip_utf8_bom</definition>
        <argsstring>(parse_buffer *const buffer)</argsstring>
        <name>_skip_utf8_bom</name>
        <param>
          <type><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref> *const</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="899" column="21" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="899" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a04eb09fee5c958fd9e014b0b087a684a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JParseWithOpts</definition>
        <argsstring>(const char *value, const char **return_parse_end, Jbool require_null_terminated)</argsstring>
        <name>JParseWithOpts</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>return_parse_end</declname>
        </param>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>require_null_terminated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="913" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="913" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0ddc9f5b66eb47b37db980a1ac6748be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JParse</definition>
        <argsstring>(const char *value)</argsstring>
        <name>JParse</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parse the passed in C-string as JSON and return a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object representing it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object as a C-string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object or NULL on error (e.g. the string was invalid JSON). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="987" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="987" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1af9a4d62c4ea008716c0e12962ddb044e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>static unsigned char * _print</definition>
        <argsstring>(const J *const item, Jbool format, Jbool omitempty)</argsstring>
        <name>_print</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>omitempty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="994" column="22" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="994" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1af6e4b5a0192a932a462220635ef0bf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JPrint</definition>
        <argsstring>(const J *item)</argsstring>
        <name>JPrint</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1043" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1043" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a8c7f9de70140d9af951c5b972aabf863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JPrintUnformatted</definition>
        <argsstring>(const J *item)</argsstring>
        <name>JPrintUnformatted</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the unformatted string representation of a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>The string returned by this function is dynamically allocated and MUST be freed by the caller with <computeroutput>JFree</computeroutput>. Unformatted means that the minimum JSON string is produced, without any additional whitespace.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to get the unformatted string representation of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1062" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1062" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a650e0d52237b35050e19f2caccf43f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JPrintUnformattedOmitEmpty</definition>
        <argsstring>(const J *item)</argsstring>
        <name>JPrintUnformattedOmitEmpty</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1070" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1070" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a68b537d814d2e94cb89ce1852c33cac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * JPrintBuffered</definition>
        <argsstring>(const J *item, int prebuffer, Jbool fmt)</argsstring>
        <name>JPrintBuffered</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prebuffer</declname>
        </param>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1078" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1078" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1af868c473d91ed2aa9f0de916a6c37f1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _printPreallocated</definition>
        <argsstring>(J *item, char *buf, const int len, const Jbool fmt, const Jbool omit)</argsstring>
        <name>_printPreallocated</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>omit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1108" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1108" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a996461f664592b56a8f76834b0156181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JPrintPreallocatedOmitEmpty</definition>
        <argsstring>(J *item, char *buf, const int len, const Jbool fmt)</argsstring>
        <name>JPrintPreallocatedOmitEmpty</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1129" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1129" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1aec398b8654e05c3465d069e34deca404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JPrintPreallocated</definition>
        <argsstring>(J *item, char *buf, const int len, const Jbool fmt)</argsstring>
        <name>JPrintPreallocated</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1134" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1134" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a3dafddb4994b85af251adcafb82510a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _last_non_omitted_object</definition>
        <argsstring>(J *item, printbuffer *const output_buffer)</argsstring>
        <name>_last_non_omitted_object</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structprintbuffer" kindref="compound">printbuffer</ref> *const</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1518" column="13" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1518" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ad6c39ba426fee1353a286a35b64a825d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JGetArraySize</definition>
        <argsstring>(const J *array)</argsstring>
        <name>JGetArraySize</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1671" column="7" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1671" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a17668207dffc5329817e313009184b9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>static J * _get_array_item</definition>
        <argsstring>(const J *array, size_t index)</argsstring>
        <name>_get_array_item</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1692" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1692" bodyend="1707"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a5f21d89669885c010a8f82dbd54973d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JGetArrayItem</definition>
        <argsstring>(const J *array, int index)</argsstring>
        <name>JGetArrayItem</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1709" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1709" bodyend="1719"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a38657d74ffc2f57beb30d2513d22718a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>static J * _get_object_item</definition>
        <argsstring>(const J *const object, const char *const name, const Jbool case_sensitive)</argsstring>
        <name>_get_object_item</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>case_sensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1721" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1721" bodyend="1741"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a4bceae2bd457a4070dd31eb9838d2890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JGetObjectItem</definition>
        <argsstring>(const J *const object, const char *const string)</argsstring>
        <name>JGetObjectItem</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1743" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1743" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a758e796dd7c6420625c71c9c44b580cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JGetObjectItemCaseSensitive</definition>
        <argsstring>(const J *const object, const char *const string)</argsstring>
        <name>JGetObjectItemCaseSensitive</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1751" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1751" bodyend="1757"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a7469d6cd6aa0d487c5a3a87a102ad3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JHasObjectItem</definition>
        <argsstring>(const J *object, const char *string)</argsstring>
        <name>JHasObjectItem</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1759" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1759" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a77ee9151a0c4dd173d2c5edcd7128580" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _suffix_object</definition>
        <argsstring>(J *prev, J *item)</argsstring>
        <name>_suffix_object</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1768" column="13" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1768" bodyend="1772"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a30a0224e1a6c73afa4dd81ff0413af86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>static J * _create_reference</definition>
        <argsstring>(const J *item)</argsstring>
        <name>_create_reference</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1775" column="10" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1775" bodyend="1792"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ac4e1bbd2d06cbeef134c3f385e60e78c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _add_item_to_array</definition>
        <argsstring>(J *array, J *item)</argsstring>
        <name>_add_item_to_array</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1794" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1794" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a35cec7da03622637f3be481198c7c97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JAddItemToArray</definition>
        <argsstring>(J *array, J *item)</argsstring>
        <name>JAddItemToArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1819" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1819" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ac42aadaba39a8b182923633ba281dad7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * _cast_away_const</definition>
        <argsstring>(const void *string)</argsstring>
        <name>_cast_away_const</name>
        <param>
          <type>const void *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1834" column="13" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1834" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0135adb0a642a1d473bf541d02e1f94c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _add_item_to_object</definition>
        <argsstring>(J *const object, const char *const string, J *const item, const Jbool constant_key)</argsstring>
        <name>_add_item_to_object</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>constant_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1843" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1843" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a3430617fcd905e9d3d997354cb7e23cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JAddItemToObject</definition>
        <argsstring>(J *object, const char *string, J *item)</argsstring>
        <name>JAddItemToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1874" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1874" bodyend="1880"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1aedf66bf41048a0cfcb61a3803ed28ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JAddItemToObjectCS</definition>
        <argsstring>(J *object, const char *string, J *item)</argsstring>
        <name>JAddItemToObjectCS</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1883" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1883" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1acd1c75541c79aaf01f779286a0ce80d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JAddItemReferenceToArray</definition>
        <argsstring>(J *array, J *item)</argsstring>
        <name>JAddItemReferenceToArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1891" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1891" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ab77e67888463113228be8786a31f48d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JAddItemReferenceToObject</definition>
        <argsstring>(J *object, const char *string, J *item)</argsstring>
        <name>JAddItemReferenceToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1899" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1899" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ac9a78db6d87591105451775117cdf41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddTrueToObject</definition>
        <argsstring>(J *const object, const char *const name)</argsstring>
        <name>JAddTrueToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1907" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1907" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a382f4353644ed4c789ec1dbe00f274d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddFalseToObject</definition>
        <argsstring>(J *const object, const char *const name)</argsstring>
        <name>JAddFalseToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1922" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1922" bodyend="1935"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1aac14b1ce4ebcdb04ddc5a73c3805c012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddBoolToObject</definition>
        <argsstring>(J *const object, const char *const name, const Jbool boolean)</argsstring>
        <name>JAddBoolToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>boolean</declname>
        </param>
        <briefdescription>
<para>Add a boolean field to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to add the field to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boolean</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly-added boolean field or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1946" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1946" bodyend="1959"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0b06c809934990aaf3b4d77db5bab617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddNumberToObject</definition>
        <argsstring>(J *const object, const char *const name, const JNUMBER number)</argsstring>
        <name>JAddNumberToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Add a number field to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to add the field to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly-added number field or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1970" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1970" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1aea0d2474a0bf90be182134d90272c75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddIntToObject</definition>
        <argsstring>(J *const object, const char *const name, const JINTEGER integer)</argsstring>
        <name>JAddIntToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
          <declname>integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="1985" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="1985" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1acd34fa0f3d7bf8e5c50ed49c07382b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddStringToObject</definition>
        <argsstring>(J *const object, const char *const name, const char *const string)</argsstring>
        <name>JAddStringToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Add a string field to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to add the field to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly-added string field or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2009" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2009" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a75eb677ffba219a9404a1908c60a0f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddRawToObject</definition>
        <argsstring>(J *const object, const char *const name, const char *const raw)</argsstring>
        <name>JAddRawToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2024" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2024" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a68e28f23a0af9c06e3c7d25658887b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddObjectToObject</definition>
        <argsstring>(J *const object, const char *const name)</argsstring>
        <name>JAddObjectToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add an object field to another <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to add the field to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly-added object field or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2047" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2047" bodyend="2060"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a25f7474bd06a682973e9e74468739cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JAddArrayToObject</definition>
        <argsstring>(J *const object, const char *const name)</argsstring>
        <name>JAddArrayToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add an array field to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to add the field to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly-added array field or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2070" column="5" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2070" bodyend="2083"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a334d83830ecb03448c9802f28079dea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JDetachItemViaPointer</definition>
        <argsstring>(J *parent, J *const item)</argsstring>
        <name>JDetachItemViaPointer</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2085" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2085" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a4fb6f94ef8b668d4ac58a49669cab90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JDetachItemFromArray</definition>
        <argsstring>(J *array, int which)</argsstring>
        <name>JDetachItemFromArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2111" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2111" bodyend="2121"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1af895529b28a3a7ee2e65e75ae1703abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JDeleteItemFromArray</definition>
        <argsstring>(J *array, int which)</argsstring>
        <name>JDeleteItemFromArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2123" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2123" bodyend="2129"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a533601a6f77ba811a5c031cec1950345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JDetachItemFromObject</definition>
        <argsstring>(J *object, const char *string)</argsstring>
        <name>JDetachItemFromObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2131" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2131" bodyend="2140"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ada527734c6f772c3e72ba2c7d9750dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JDetachItemFromObjectCaseSensitive</definition>
        <argsstring>(J *object, const char *string)</argsstring>
        <name>JDetachItemFromObjectCaseSensitive</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2142" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2142" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a469200cf78eb64693c306b8c2bb8fca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JDeleteItemFromObject</definition>
        <argsstring>(J *object, const char *string)</argsstring>
        <name>JDeleteItemFromObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2153" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2153" bodyend="2159"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a4d2345eb658b861b6be499ae156eb4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JDeleteItemFromObjectCaseSensitive</definition>
        <argsstring>(J *object, const char *string)</argsstring>
        <name>JDeleteItemFromObjectCaseSensitive</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2161" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2161" bodyend="2167"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a67d8128a4a64c4554afcf33c41487633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JInsertItemInArray</definition>
        <argsstring>(J *array, int which, J *newitem)</argsstring>
        <name>JInsertItemInArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2170" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2170" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0ef15ee7acb72042a7ab2fdcf088b090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JReplaceItemViaPointer</definition>
        <argsstring>(J *const parent, J *const item, J *replacement)</argsstring>
        <name>JReplaceItemViaPointer</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2198" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2198" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a3382107cdb7fbf8bb00d0a59ce8c02f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JReplaceItemInArray</definition>
        <argsstring>(J *array, int which, J *newitem)</argsstring>
        <name>JReplaceItemInArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2228" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2228" bodyend="2239"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a7959f5c6f4ac5ed07f3da5f64d76f6dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>static Jbool _replace_item_in_object</definition>
        <argsstring>(J *object, const char *string, J *replacement, Jbool case_sensitive)</argsstring>
        <name>_replace_item_in_object</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>replacement</declname>
        </param>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>case_sensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2241" column="14" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2241" bodyend="2257"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a90435b417a6abdb321c4c300bdf8b75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JReplaceItemInObject</definition>
        <argsstring>(J *object, const char *string, J *newitem)</argsstring>
        <name>JReplaceItemInObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2259" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2259" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ae3eaa58eeca1eb3a5821e21286dc72bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JReplaceItemInObjectCaseSensitive</definition>
        <argsstring>(J *object, const char *string, J *newitem)</argsstring>
        <name>JReplaceItemInObjectCaseSensitive</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2267" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2267" bodyend="2273"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1adaddb988266e6e575640409a6a0be5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateTrue</definition>
        <argsstring>(void)</argsstring>
        <name>JCreateTrue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2275" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2275" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a00be99e078924c53073e1681c28e1c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateFalse</definition>
        <argsstring>(void)</argsstring>
        <name>JCreateFalse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2284" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2284" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1afb1330c4aa3655e158b561c2e0ad2a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateBool</definition>
        <argsstring>(Jbool b)</argsstring>
        <name>JCreateBool</name>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2293" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2293" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a2b7ab5698623cdd98ec0f67d7b2e9d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateNumber</definition>
        <argsstring>(JNUMBER num)</argsstring>
        <name>JCreateNumber</name>
        <param>
          <type><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref></type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2302" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2302" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a320f486837e3fa4f707c798611d91ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateInteger</definition>
        <argsstring>(JINTEGER integer)</argsstring>
        <name>JCreateInteger</name>
        <param>
          <type><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref></type>
          <declname>integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2321" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2321" bodyend="2330"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a35c2c511d2619727f474696e85660352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateString</definition>
        <argsstring>(const char *string)</argsstring>
        <name>JCreateString</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2332" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2332" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a7171faa2a8de38aab570450e819e926d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateStringValue</definition>
        <argsstring>(const char *string)</argsstring>
        <name>JCreateStringValue</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2346" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2346" bodyend="2354"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1afa11dec571f4c3985754e2f609a799da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateStringReference</definition>
        <argsstring>(const char *string)</argsstring>
        <name>JCreateStringReference</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2356" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2356" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a97684efc6b3d73db3cf54a855b60d005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateObjectReference</definition>
        <argsstring>(const J *child)</argsstring>
        <name>JCreateObjectReference</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2366" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2366" bodyend="2377"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1af4930956f6841bb5e36942158feff882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateArrayReference</definition>
        <argsstring>(const J *child)</argsstring>
        <name>JCreateArrayReference</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2379" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2379" bodyend="2390"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a07564cbd47175516168c942a4daca221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateRaw</definition>
        <argsstring>(const char *raw)</argsstring>
        <name>JCreateRaw</name>
        <param>
          <type>const char *</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2392" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2392" bodyend="2404"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ac5ac8ffe60d80b9897e47dc286956f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateArray</definition>
        <argsstring>(void)</argsstring>
        <name>JCreateArray</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2406" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2406" bodyend="2413"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a1265d938bfff299c33d208367ec6d7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateObject</definition>
        <argsstring>(void)</argsstring>
        <name>JCreateObject</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>To free the object, use <computeroutput>JDelete</computeroutput>.</para>
<para><simplesect kind="return"><para>A pointer to the newly-created object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2422" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2422" bodyend="2429"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a0c2f36112496670bc7377f1ec2837be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateIntArray</definition>
        <argsstring>(const long int *numbers, int count)</argsstring>
        <name>JCreateIntArray</name>
        <param>
          <type>const long int *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2432" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2432" bodyend="2459"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a1bd7e929cf495d1fc053b25ed728bb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateNumberArray</definition>
        <argsstring>(const JNUMBER *numbers, int count)</argsstring>
        <name>JCreateNumberArray</name>
        <param>
          <type>const <ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref> *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2461" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2461" bodyend="2489"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ad165ef4baa1b760813215297555874f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JCreateStringArray</definition>
        <argsstring>(const char **strings, int count)</argsstring>
        <name>JCreateStringArray</name>
        <param>
          <type>const char **</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2491" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2491" bodyend="2519"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1add8aba87cfed1c71a1be28773cd62779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * JDuplicate</definition>
        <argsstring>(const J *item, Jbool recurse)</argsstring>
        <name>JDuplicate</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>recurse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2522" column="6" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2522" bodyend="2586"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a34f0eda948e36394026a0c2d927bbed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JMinify</definition>
        <argsstring>(char *json)</argsstring>
        <name>JMinify</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2588" column="8" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2588" bodyend="2635"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a88cfb9e3b03ac17ba67d037f76037dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsInvalid</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsInvalid</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2637" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2637" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a457bc8d0d7e568fd974b36e9d10ec24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsFalse</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsFalse</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2645" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2645" bodyend="2651"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1af3451fac120016cabb032443098328e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsTrue</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsTrue</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2653" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2653" bodyend="2659"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a7018dd9b9399e168495a42da2ca30c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsBool</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsBool</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2662" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2662" bodyend="2668"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a58e9e823e7eb8675b8dd652994816d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsNull</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsNull</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2669" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2669" bodyend="2675"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a90966d05e3d50b9c6f664be5bb0246ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsNumber</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsNumber</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2677" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2677" bodyend="2683"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a35c8801a08c0fd4de08759c36bd7d8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsString</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsString</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2685" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2685" bodyend="2691"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1ad2e8fbc0e1b1484f3593d95e32335c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsArray</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsArray</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2693" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2693" bodyend="2699"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a46958f34e3c76bef78fff3e9f78a7af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsObject</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsObject</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2701" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2701" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a38fc30cb88e2b0e194eb1b15def5c85d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JIsRaw</definition>
        <argsstring>(const J *const item)</argsstring>
        <name>JIsRaw</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2709" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2709" bodyend="2715"/>
      </memberdef>
      <memberdef kind="function" id="n__cjson_8c_1a29a204614c3c8a73a1eed2482f31ab15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
        <definition>Jbool JCompare</definition>
        <argsstring>(const J *const a, const J *const b, const Jbool case_sensitive)</argsstring>
        <name>JCompare</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *const</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref></type>
          <declname>case_sensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_cjson.c" line="2717" column="9" bodyfile="/home/runner/work/note-c/note-c/n_cjson.c" bodystart="2717" bodyend="2823"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Written by Ray Ozzie and Blues Inc. team.</para>
<para>Portions Copyright (c) 2019 Blues Inc. MIT License. Use of this source code is governed by licenses granted by the copyright holder including that found in the <ulink url="https://github.com/blues/note-c/blob/master/LICENSE">LICENSE</ulink> file.</para>
<para>MODIFIED for use in notecard primarily by altering default memory allocator and by renaming the functions so that they won&apos;t conflict with a developer&apos;s own decision to incorporate the actual production cJSON into their own app. In no way shall this interfere with a production cJSON.</para>
<para>Renaming was done as follows: CJSON_ -&gt; N_CJSON_ cJSON_ -&gt; <ref refid="struct_j" kindref="compound">J</ref> cJSON -&gt; <ref refid="struct_j" kindref="compound">J</ref></para>
<para>Portions Copyright (c) 2009-2017 Dave Gamble and cJSON contributors</para>
<para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software i furnished to do so, subject to the following conditions:</para>
<para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>
<para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>warnings<sp/>about<sp/>old<sp/>C89<sp/>functions<sp/>in<sp/>MSVC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_CRT_SECURE_NO_DEPRECATE)<sp/>&amp;&amp;<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>visibility<sp/>push(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>warning<sp/>about<sp/>single<sp/>line<sp/>comments<sp/>in<sp/>system<sp/>headers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>(disable<sp/>:<sp/>4001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>Note,<sp/>disable<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ENABLE_LOCALES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;n_lib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_LOCALES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>visibility<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRINT_TAB_CHARS<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="structerror" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><ref refid="structerror" kindref="compound">error</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structerror" kindref="compound">error</ref><sp/>global_error<sp/>=<sp/>{<sp/>NULL,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*_jNew_Item(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1ad8fabb61b7f6006a24c30be9a3a57217" kindref="member">JGetErrorPtr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>(global_error.<ref refid="structerror_1a9b123855d5dd48e86de846588462b39f" kindref="member">json</ref><sp/>+<sp/>global_error.<ref refid="structerror_1a24de70a4d517ab351d80c18582cadb66" kindref="member">position</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1a6a4337b624de0af8d859f5fb7fc2c1b8" kindref="member">JGetStringValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n__cjson_8c_1a35c8801a08c0fd4de08759c36bd7d8ad" kindref="member">JIsString</ref>(item))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>safeguard<sp/>to<sp/>prevent<sp/>copy-pasters<sp/>from<sp/>using<sp/>incompatible<sp/>C<sp/>and<sp/>header<sp/>files<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(N_CJSON_VERSION_MAJOR<sp/>!=<sp/>1)<sp/>||<sp/>(N_CJSON_VERSION_MINOR<sp/>!=<sp/>7)<sp/>||<sp/>(N_CJSON_VERSION_PATCH<sp/>!=<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>J.h<sp/>and<sp/>J.c<sp/>have<sp/>different<sp/>versions.<sp/>Make<sp/>sure<sp/>that<sp/>both<sp/>have<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/><ref refid="n__cjson_8c_1a0e13c62d998da5beb597713c59c24b80" kindref="member">JVersion</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" kindref="member">NOTE_C_STRINGIZE</ref>(<ref refid="n__cjson_8h_1aab3945fc5ef708e1ad59f44d1a7073d1" kindref="member">N_CJSON_VERSION_MAJOR</ref>)<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" kindref="member">NOTE_C_STRINGIZE</ref>(<ref refid="n__cjson_8h_1aeeb6bcdd8d62de4450d58ce8b1650f30" kindref="member">N_CJSON_VERSION_MINOR</ref>)<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" kindref="member">NOTE_C_STRINGIZE</ref>(<ref refid="n__cjson_8h_1a921b0ad837d39c9285e36ee17cba3886" kindref="member">N_CJSON_VERSION_PATCH</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_j_tolower(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>is<sp/>the<sp/>distance<sp/>between<sp/>any<sp/>ASCII<sp/>uppercase<sp/>letter<sp/>and<sp/>its<sp/>lowercase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>counterpart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>+<sp/>32;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Case<sp/>insensitive<sp/>string<sp/>comparison,<sp/>doesn&apos;t<sp/>consider<sp/>two<sp/>NULL<sp/>pointers<sp/>equal<sp/>though<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_case_insensitive_strcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string2)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((string1<sp/>==<sp/>NULL)<sp/>||<sp/>(string2<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string1<sp/>==<sp/>string2)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>_j_tolower(*string1)<sp/>==<sp/>_j_tolower(*string2);<sp/>(void)string1++,<sp/>string2++)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*string1<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_j_tolower(*string1)<sp/>-<sp/>_j_tolower(*string2);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_j_strdup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*copy<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>strlen((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_Malloc(length);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(copy,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>length);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1a1ddc4bc3ebb9aa4e244de12e2083575f" kindref="member">JMalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Malloc(size);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1abf261bfa6bcacd681e976231d1d974d3" kindref="member">JFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>_Free(p);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>constructor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*_jNew_Item(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref>*<sp/>node<sp/>=<sp/>(<ref refid="struct_j" kindref="compound">J</ref>*)_Malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_j" kindref="compound">J</ref>));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(node,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_j" kindref="compound">J</ref>));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/><ref refid="n__cjson_8h_1abd6ed1a437e8e4047b403a36bace79b0" kindref="member">JIsReference</ref>)<sp/>&amp;&amp;<sp/>(item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/><ref refid="n__cjson_8h_1abd6ed1a437e8e4047b403a36bace79b0" kindref="member">JIsReference</ref>)<sp/>&amp;&amp;<sp/>(item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/><ref refid="n__cjson_8h_1ab186903675fdf0b3d22cf3e7a69994bf" kindref="member">JStringIsConst</ref>)<sp/>&amp;&amp;<sp/>(item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(item);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>decimal<sp/>point<sp/>character<sp/>of<sp/>the<sp/>current<sp/>locale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_get_decimal_point(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_LOCALES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">lconv<sp/>*lconv<sp/>=<sp/>localeconv();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>lconv-&gt;decimal_point[0];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="structparse__buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*content;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth;<sp/></highlight><highlight class="comment">/*<sp/>How<sp/>deeply<sp/>nested<sp/>(in<sp/>arrays/objects)<sp/>is<sp/>the<sp/>input<sp/>at<sp/>the<sp/>current<sp/>offset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">}<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>the<sp/>given<sp/>size<sp/>is<sp/>left<sp/>to<sp/>read<sp/>in<sp/>a<sp/>given<sp/>parse<sp/>buffer<sp/>(starting<sp/>with<sp/>1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>can_read(buffer,<sp/>size)<sp/>((buffer<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(((buffer)-&gt;offset<sp/>+<sp/>size)<sp/>&lt;=<sp/>(buffer)-&gt;length))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>the<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>at<sp/>the<sp/>given<sp/>index<sp/>(starting<sp/>with<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>can_access_at_index(buffer,<sp/>index)<sp/>((buffer<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(((buffer)-&gt;offset<sp/>+<sp/>index)<sp/>&lt;<sp/>(buffer)-&gt;length))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cannot_access_at_index(buffer,<sp/>index)<sp/>(!can_access_at_index(buffer,<sp/>index))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>buffer<sp/>at<sp/>the<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>buffer_at_offset(buffer)<sp/>((buffer)-&gt;content<sp/>+<sp/>(buffer)-&gt;offset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parse<sp/>the<sp/>input<sp/>text<sp/>to<sp/>generate<sp/>a<sp/>number,<sp/>and<sp/>populate<sp/>the<sp/>result<sp/>into<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_number(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>number<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*after_end<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>number_c_string[64];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>decimal_point<sp/>=<sp/>_get_decimal_point();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input_buffer<sp/>==<sp/>NULL)<sp/>||<sp/>(input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref><sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>number<sp/>into<sp/>a<sp/>temporary<sp/>buffer<sp/>and<sp/>replace<sp/>&apos;.&apos;<sp/>with<sp/>the<sp/>decimal<sp/>point</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>current<sp/>locale<sp/>(for<sp/>strtod)</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>also<sp/>takes<sp/>care<sp/>of<sp/>&apos;\0&apos;<sp/>not<sp/>necessarily<sp/>being<sp/>available<sp/>for<sp/>marking<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>(i<sp/>&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(number_c_string)<sp/>-<sp/>1))<sp/>&amp;&amp;<sp/><ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>i);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[i])<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_c_string[i]<sp/>=<sp/><ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[i];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_c_string[i]<sp/>=<sp/>decimal_point;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>loop_end;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">loop_end:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>number_c_string[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" kindref="member">JAtoN</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)number_c_string,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)&amp;after_end);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_c_string<sp/>==<sp/>after_end)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>parse_error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref><sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saturate<sp/>valueint<sp/>in<sp/>the<sp/>case<sp/>of<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number<sp/>&gt;=<sp/><ref refid="note_8h_1a445107097b19783483070744407468d9" kindref="member">JINTEGER_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/><ref refid="note_8h_1a445107097b19783483070744407468d9" kindref="member">JINTEGER_MAX</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number<sp/>&lt;=<sp/><ref refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" kindref="member">JINTEGER_MIN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/><ref refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" kindref="member">JINTEGER_MIN</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a308f04aae0351a47e78c6974c0ced6e6" kindref="member">JAtoI</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)number_c_string);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>+=<sp/>(size_t)(after_end<sp/>-<sp/>number_c_string);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>ask<sp/>me,<sp/>but<sp/>the<sp/>original<sp/>JSetNumberValue<sp/>returns<sp/>an<sp/>integer<sp/>or<sp/>JNUMBER<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref>)<sp/><ref refid="n__cjson_8c_1ae69e47e50ef142737771bad7332bd8a1" kindref="member">JSetNumberHelper</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>number)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saturate<sp/>valueint<sp/>in<sp/>the<sp/>case<sp/>of<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number<sp/>&gt;=<sp/><ref refid="note_8h_1a445107097b19783483070744407468d9" kindref="member">JINTEGER_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;valueint<sp/>=<sp/><ref refid="note_8h_1a445107097b19783483070744407468d9" kindref="member">JINTEGER_MAX</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number<sp/>&lt;=<sp/><ref refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" kindref="member">JINTEGER_MIN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;valueint<sp/>=<sp/><ref refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" kindref="member">JINTEGER_MIN</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;valueint<sp/>=<sp/>(<ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref>)number;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;valuenumber<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structprintbuffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>nesting<sp/>depth<sp/>(for<sp/>formatted<sp/>printing)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>noalloc;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>format;<sp/></highlight><highlight class="comment">/*<sp/>is<sp/>this<sp/>print<sp/>a<sp/>formatted<sp/>print<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>omitempty;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>realloc<sp/>printbuffer<sp/>if<sp/>necessary<sp/>to<sp/>have<sp/>at<sp/>least<sp/>&quot;needed&quot;<sp/>bytes<sp/>more<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_ensure(<ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>needed)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>==<sp/>NULL)<sp/>||<sp/>(p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref><sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(p-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>&gt;=<sp/>p-&gt;<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref>))<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>that<sp/>offset<sp/>is<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needed<sp/>&gt;<sp/>INT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sizes<sp/>bigger<sp/>than<sp/>INT_MAX<sp/>are<sp/>currently<sp/>not<sp/>supported<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>needed<sp/>+=<sp/>p-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needed<sp/>&lt;=<sp/>p-&gt;length)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>+<sp/>p-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;<ref refid="structprintbuffer_1a2055471b46a66241c72beffd81b67e66" kindref="member">noalloc</ref>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>new<sp/>buffer<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needed<sp/>&gt;<sp/>(INT_MAX<sp/>/<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>overflow<sp/>of<sp/>int,<sp/>use<sp/>INT_MAX<sp/>if<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needed<sp/>&lt;=<sp/>INT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newsize<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newsize<sp/>=<sp/>needed<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>otherwise<sp/>reallocate<sp/>manually<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>newbuffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_Malloc(newsize);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newbuffer)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newbuffer)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(newbuffer,<sp/>p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>,<sp/>p-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>_Free(p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref><sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>=<sp/>newbuffer;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newbuffer<sp/>+<sp/>p-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>calculate<sp/>the<sp/>new<sp/>length<sp/>of<sp/>the<sp/>string<sp/>in<sp/>a<sp/>printbuffer<sp/>and<sp/>update<sp/>the<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_update_offset(<ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buffer)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((buffer<sp/>==<sp/>NULL)<sp/>||<sp/>(buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_pointer<sp/>=<sp/>buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>+<sp/>buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+=<sp/>strlen((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buffer_pointer);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>the<sp/>number<sp/>nicely<sp/>from<sp/>the<sp/>given<sp/>item<sp/>into<sp/>a<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_number(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>vnum<sp/>=<sp/>item-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/>vint<sp/>=<sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>number_buffer[<ref refid="note_8h_1a2554bdccd902653258af24e049abaccb" kindref="member">JNTOA_MAX</ref>];<sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>buffer<sp/>to<sp/>print<sp/>the<sp/>number<sp/>into<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>decimal_point<sp/>=<sp/>_get_decimal_point();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>checks<sp/>for<sp/>NaN<sp/>and<sp/>Infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vnum<sp/>*<sp/>0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>number_buffer;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" kindref="member">strlcpy</ref>(nbuf,<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/><ref refid="note_8h_1a2554bdccd902653258af24e049abaccb" kindref="member">JNTOA_MAX</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>strlen(nbuf);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>number_buffer;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vnum<sp/>!=<sp/>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref>)vint)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ac17ffec8a10a5ec96e62cb5a856d4203" kindref="member">JNtoA</ref>(vnum,<sp/>nbuf,<sp/>-1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson__helpers_8c_1a3fe8a8eeb1d78a8eb52ed720a36b99c6" kindref="member">JItoA</ref>(vint,<sp/>nbuf);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>strlen(nbuf);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>conversion<sp/>failed<sp/>or<sp/>buffer<sp/>overrun<sp/>occured<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((length<sp/>&lt;<sp/>0)<sp/>||<sp/>(length<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(number_buffer)<sp/>-<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reserve<sp/>appropriate<sp/>space<sp/>in<sp/>the<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)length<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>printed<sp/>number<sp/>to<sp/>the<sp/>output<sp/>and<sp/>replace<sp/>locale</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>dependent<sp/>decimal<sp/>point<sp/>with<sp/>&apos;.&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>((size_t)length);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_buffer[i]<sp/>==<sp/>decimal_point)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer[i]<sp/>=<sp/>number_buffer[i];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+=<sp/>(size_t)length;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>parse<sp/>4<sp/>digit<sp/>hexadecimal<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>_parse_hex4(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>digit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(input[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>input[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(input[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>10<sp/>+<sp/>input[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(input[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>10<sp/>+<sp/>input[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>left<sp/>to<sp/>make<sp/>place<sp/>for<sp/>the<sp/>next<sp/>nibble<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>h<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>converts<sp/>a<sp/>UTF-16<sp/>literal<sp/>to<sp/>UTF-8</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>A<sp/>literal<sp/>can<sp/>be<sp/>one<sp/>or<sp/>two<sp/>sequences<sp/>of<sp/>the<sp/>form<sp/>\uXXXX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_utf16_literal_to_utf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_end,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**output_pointer)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codepoint<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*first_sequence<sp/>=<sp/>input_pointer;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>utf8_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>utf8_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sequence_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>first_byte_mark<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input_end<sp/>-<sp/>first_sequence)<sp/>&lt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>ends<sp/>unexpectedly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>first<sp/>utf16<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>first_code<sp/>=<sp/>_parse_hex4(first_sequence<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>that<sp/>the<sp/>code<sp/>is<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((first_code<sp/>&gt;=<sp/>0xDC00)<sp/>&amp;&amp;<sp/>(first_code<sp/>&lt;=<sp/>0xDFFF)))<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF16<sp/>surrogate<sp/>pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((first_code<sp/>&gt;=<sp/>0xD800)<sp/>&amp;&amp;<sp/>(first_code<sp/>&lt;=<sp/>0xDBFF))<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*second_sequence<sp/>=<sp/>first_sequence<sp/>+<sp/>6;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>second_code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence_length<sp/>=<sp/>12;<sp/></highlight><highlight class="comment">/*<sp/>\uXXXX\uXXXX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input_end<sp/>-<sp/>second_sequence)<sp/>&lt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>ends<sp/>unexpectedly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((second_sequence[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(second_sequence[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>missing<sp/>second<sp/>half<sp/>of<sp/>the<sp/>surrogate<sp/>pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>second<sp/>utf16<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_code<sp/>=<sp/>_parse_hex4(second_sequence<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>that<sp/>the<sp/>code<sp/>is<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((second_code<sp/>&lt;<sp/>0xDC00)<sp/>||<sp/>(second_code<sp/>&gt;<sp/>0xDFFF))<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>second<sp/>half<sp/>of<sp/>the<sp/>surrogate<sp/>pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>the<sp/>unicode<sp/>codepoint<sp/>from<sp/>the<sp/>surrogate<sp/>pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codepoint<sp/>=<sp/>0x10000<sp/>+<sp/>(((first_code<sp/>&amp;<sp/>0x3FF)<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/>(second_code<sp/>&amp;<sp/>0x3FF));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence_length<sp/>=<sp/>6;<sp/></highlight><highlight class="comment">/*<sp/>\uXXXX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codepoint<sp/>=<sp/>first_code;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encode<sp/>as<sp/>UTF-8</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>takes<sp/>at<sp/>maximum<sp/>4<sp/>bytes<sp/>to<sp/>encode:</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>11110xxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codepoint<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normal<sp/>ascii,<sp/>encoding<sp/>0xxxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codepoint<sp/>&lt;<sp/>0x800)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>two<sp/>bytes,<sp/>encoding<sp/>110xxxxx<sp/>10xxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_length<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_byte_mark<sp/>=<sp/>0xC0;<sp/></highlight><highlight class="comment">/*<sp/>11000000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codepoint<sp/>&lt;<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>three<sp/>bytes,<sp/>encoding<sp/>1110xxxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_length<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_byte_mark<sp/>=<sp/>0xE0;<sp/></highlight><highlight class="comment">/*<sp/>11100000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codepoint<sp/>&lt;=<sp/>0x10FFFF)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>four<sp/>bytes,<sp/>encoding<sp/>1110xxxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_length<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_byte_mark<sp/>=<sp/>0xF0;<sp/></highlight><highlight class="comment">/*<sp/>11110000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>unicode<sp/>codepoint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encode<sp/>as<sp/>utf8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(utf8_position<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(utf8_length<sp/>-<sp/>1);<sp/>utf8_position<sp/>&gt;<sp/>0;<sp/>utf8_position--)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>10xxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output_pointer)[utf8_position]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((codepoint<sp/>|<sp/>0x80)<sp/>&amp;<sp/>0xBF);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codepoint<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encode<sp/>first<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8_length<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output_pointer)[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((codepoint<sp/>|<sp/>first_byte_mark)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output_pointer)[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(codepoint<sp/>&amp;<sp/>0x7F);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer<sp/>+=<sp/>utf8_length;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sequence_length;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parse<sp/>the<sp/>input<sp/>text<sp/>into<sp/>an<sp/>unescaped<sp/>cinput,<sp/>and<sp/>populate<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_string(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>static<sp/>function<sp/>that<sp/>is<sp/>only<sp/>called<sp/>internally,<sp/>and<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>guaranteed<sp/>that<sp/>item<sp/>is<sp/>not<sp/>NULL.<sp/>`cppcheck`<sp/>is<sp/>not<sp/>able<sp/>to<sp/>infer<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>code,<sp/>because<sp/>we<sp/>are<sp/>using<sp/>a<sp/>macro,<sp/>NOTE_C_STATIC,<sp/>to<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>static<sp/>keyword<sp/>in<sp/>the<sp/>public<sp/>header<sp/>during<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>ctunullpointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input_pointer<sp/>=<sp/><ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input_end<sp/>=<sp/><ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>a<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>approximate<sp/>size<sp/>of<sp/>the<sp/>output<sp/>(overestimate)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocation_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>skipped_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(input_end<sp/>-<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref>)<sp/>&lt;<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref>)<sp/>&amp;&amp;<sp/>(*input_end<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>escape<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_end[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(input_end<sp/>+<sp/>1<sp/>-<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref>)<sp/>&gt;=<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prevent<sp/>buffer<sp/>overflow<sp/>when<sp/>last<sp/>input<sp/>character<sp/>is<sp/>a<sp/>backslash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipped_bytes++;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_end++;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_end++;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(input_end<sp/>-<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref>)<sp/>&gt;=<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref>)<sp/>||<sp/>(*input_end<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>string<sp/>ended<sp/>unexpectedly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>at<sp/>most<sp/>how<sp/>much<sp/>we<sp/>need<sp/>for<sp/>the<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocation_length<sp/>=<sp/>(size_t)<sp/>(input_end<sp/>-<sp/><ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer))<sp/>-<sp/>skipped_bytes;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_Malloc(allocation_length<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>trailing<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loop<sp/>through<sp/>the<sp/>string<sp/>literal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(input_pointer<sp/>&lt;<sp/>input_end)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*input_pointer<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/>*input_pointer++;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>escape<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sequence_length<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input_end<sp/>-<sp/>input_pointer)<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(input_pointer[1])<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/>input_pointer[1];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-16<sp/>literal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence_length<sp/>=<sp/>_utf16_literal_to_utf8(input_pointer,<sp/>input_end,<sp/>&amp;output_pointer);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sequence_length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>failed<sp/>to<sp/>convert<sp/>UTF16-literal<sp/>to<sp/>UTF-8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_pointer<sp/>+=<sp/>sequence_length;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>terminate<sp/>the<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)output;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>=<sp/>(size_t)<sp/>(input_end<sp/>-<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(output);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_pointer<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>=<sp/>(size_t)(input_pointer<sp/>-<sp/>input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>16-bit<sp/>number<sp/>to<sp/>4<sp/>hex<sp/>digits,<sp/>null-terminating<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8c_1ac6ddb64243b66cb4940c0e534f72d9bf" kindref="member">_n_htoa16</ref>(uint16_t<sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nibble<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nibble<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>(nibble-10);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>nibble;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>the<sp/>cstring<sp/>provided<sp/>to<sp/>an<sp/>escaped<sp/>version<sp/>that<sp/>can<sp/>be<sp/>printed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_string_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>numbers<sp/>of<sp/>additional<sp/>characters<sp/>needed<sp/>for<sp/>escaping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>escape_characters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>_ensure(output_buffer,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>sizeof(&quot;\&quot;\&quot;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>&quot;flag&quot;<sp/>to<sp/>1<sp/>if<sp/>something<sp/>needs<sp/>to<sp/>be<sp/>escaped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(input_pointer<sp/>=<sp/>input;<sp/>*input_pointer;<sp/>input_pointer++)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*input_pointer)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>character<sp/>escape<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escape_characters++;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*input_pointer<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-16<sp/>escape<sp/>sequence<sp/>uXXXX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escape_characters<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>output_length<sp/>=<sp/>(size_t)(input_pointer<sp/>-<sp/>input)<sp/>+<sp/>escape_characters;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>_ensure(output_buffer,<sp/>output_length<sp/>+<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>sizeof(&quot;\&quot;\&quot;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>characters<sp/>have<sp/>to<sp/>be<sp/>escaped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escape_characters<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(output<sp/>+<sp/>1,<sp/>input,<sp/>output_length);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[output_length<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[output_length<sp/>+<sp/>2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>output<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(input_pointer<sp/>=<sp/>input;<sp/>*input_pointer<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>(void)input_pointer++,<sp/>output_pointer++)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*input_pointer<sp/>&gt;<sp/>31)<sp/>&amp;&amp;<sp/>(*input_pointer<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(*input_pointer<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normal<sp/>character,<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/>*input_pointer;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>character<sp/>needs<sp/>to<sp/>be<sp/>escaped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*input_pointer)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>escape<sp/>and<sp/>print<sp/>as<sp/>unicode<sp/>codepoint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1ac6ddb64243b66cb4940c0e534f72d9bf" kindref="member">_n_htoa16</ref>(*input_pointer,<sp/>output_pointer);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>output[output_length<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>output[output_length<sp/>+<sp/>2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Invoke<sp/>_print_string_ptr<sp/>(which<sp/>is<sp/>useful)<sp/>on<sp/>an<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_print_string_ptr((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>,<sp/>p);</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Predeclare<sp/>these<sp/>prototypes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_value(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer);</highlight></codeline>
<codeline lineno="874"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer);</highlight></codeline>
<codeline lineno="875"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_array(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_array(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer);</highlight></codeline>
<codeline lineno="877"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_object(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer);</highlight></codeline>
<codeline lineno="878"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_object(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utility<sp/>to<sp/>jump<sp/>whitespace<sp/>and<sp/>cr/lf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*_buffer_skip_whitespace(<ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buffer)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((buffer<sp/>==<sp/>NULL)<sp/>||<sp/>(buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref><sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(buffer)[0]<sp/>&lt;=<sp/>32))<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>==<sp/>buffer-&gt;<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>--;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>skip<sp/>the<sp/>UTF-8<sp/>BOM<sp/>(byte<sp/>order<sp/>mark)<sp/>if<sp/>it<sp/>is<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*_skip_utf8_bom(<ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buffer)</highlight></codeline>
<codeline lineno="900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((buffer<sp/>==<sp/>NULL)<sp/>||<sp/>(buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref><sp/>==<sp/>NULL)<sp/>||<sp/>(buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(buffer,<sp/>4)<sp/>&amp;&amp;<sp/>(strncmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(buffer),<sp/></highlight><highlight class="stringliteral">&quot;\xEF\xBB\xBF&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parse<sp/>an<sp/>object<sp/>-<sp/>create<sp/>a<sp/>new<sp/>root,<sp/>and<sp/>populate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a04eb09fee5c958fd9e014b0b087a684a" kindref="member">JParseWithOpts</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**return_parse_end,<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>require_null_terminated)</highlight></codeline>
<codeline lineno="914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>buffer<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>error<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>global_error.<ref refid="structerror_1a9b123855d5dd48e86de846588462b39f" kindref="member">json</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>global_error.<ref refid="structerror_1a24de70a4d517ab351d80c18582cadb66" kindref="member">position</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)value;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref><sp/>=<sp/>strlen((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)value)<sp/>+<sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trailing<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_parse_value(item,<sp/>_buffer_skip_whitespace(_skip_utf8_bom(&amp;buffer))))<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>failure.<sp/>ep<sp/>is<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>require<sp/>null-terminated<sp/>JSON<sp/>without<sp/>appended<sp/>garbage,<sp/>skip<sp/>and<sp/>then<sp/>check<sp/>for<sp/>a<sp/>null<sp/>terminator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(require_null_terminated)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(&amp;buffer);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((buffer.<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>&gt;=<sp/>buffer.<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref>)<sp/>||<sp/><ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(&amp;buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(return_parse_end)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*return_parse_end<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(&amp;buffer);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(item);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structerror" kindref="compound">error</ref><sp/>local_error;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_error.<ref refid="structerror_1a9b123855d5dd48e86de846588462b39f" kindref="member">json</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)value;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_error.<ref refid="structerror_1a24de70a4d517ab351d80c18582cadb66" kindref="member">position</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>&lt;<sp/>buffer.<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_error.<ref refid="structerror_1a24de70a4d517ab351d80c18582cadb66" kindref="member">position</ref><sp/>=<sp/>buffer.<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_error.<ref refid="structerror_1a24de70a4d517ab351d80c18582cadb66" kindref="member">position</ref><sp/>=<sp/>buffer.<ref refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" kindref="member">length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(return_parse_end<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*return_parse_end<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)local_error.<ref refid="structerror_1a9b123855d5dd48e86de846588462b39f" kindref="member">json</ref><sp/>+<sp/>local_error.<ref refid="structerror_1a24de70a4d517ab351d80c18582cadb66" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_error<sp/>=<sp/>local_error;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a0ddc9f5b66eb47b37db980a1ac6748be" kindref="member">JParse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8c_1a04eb09fee5c958fd9e014b0b087a684a" kindref="member">JParseWithOpts</ref>(value,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cjson_min(a,<sp/>b)<sp/>((a<sp/>&lt;<sp/>b)<sp/>?<sp/>a<sp/>:<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>format,<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>omitempty)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>default_buffer_size<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>buffer[1];</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*printed<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>_Malloc(default_buffer_size);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref><sp/>=<sp/>default_buffer_size;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="structprintbuffer_1af746da3857d83e6c7cba29cc5bd7a123" kindref="member">omitempty</ref><sp/>=<sp/>omitempty;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>the<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_print_value(item,<sp/>buffer))<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>_update_offset(buffer);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>JSON<sp/>over<sp/>to<sp/>a<sp/>new<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>printed<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>_Malloc(buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printed<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(printed,<sp/>buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>,<sp/><ref refid="n__cjson_8c_1a13f540fa846f658531751b5ccb78f303" kindref="member">cjson_min</ref>(buffer-&gt;<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref>,<sp/>buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>printed[buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>be<sp/>sure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>_Free(buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>printed;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(buffer-&gt;<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printed<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(printed);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>a<sp/>J<sp/>item/entity/structure<sp/>to<sp/>text.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1af6e4b5a0192a932a462220635ef0bf7e" kindref="member">JPrint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_print(item,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1a8c7f9de70140d9af951c5b972aabf863" kindref="member">JPrintUnformatted</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_print(item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1a650e0d52237b35050e19f2caccf43f45" kindref="member">JPrintUnformattedOmitEmpty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_print(item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="n__cjson_8c_1a68b537d814d2e94cb89ce1852c33cac5" kindref="member">JPrintBuffered</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prebuffer,<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>fmt)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>p<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prebuffer<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_Malloc((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)prebuffer);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref><sp/>=<sp/>(size_t)prebuffer;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a2055471b46a66241c72beffd81b67e66" kindref="member">noalloc</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>=<sp/>fmt;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_print_value(item,<sp/>&amp;p))<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(p.<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p.<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_printPreallocated(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>fmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>omit)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>p<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>&lt;<sp/>0)<sp/>||<sp/>(buf<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" kindref="member">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buf;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" kindref="member">length</ref><sp/>=<sp/>(size_t)len;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a2055471b46a66241c72beffd81b67e66" kindref="member">noalloc</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>=<sp/>fmt;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structprintbuffer_1af746da3857d83e6c7cba29cc5bd7a123" kindref="member">omitempty</ref><sp/>=<sp/>omit;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_print_value(item,<sp/>&amp;p);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a996461f664592b56a8f76834b0156181" kindref="member">JPrintPreallocatedOmitEmpty</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>fmt)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_printPreallocated(item,<sp/>buf,<sp/>len,<sp/>fmt,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1aec398b8654e05c3465d069e34deca404" kindref="member">JPrintPreallocated</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>fmt)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_printPreallocated(item,<sp/>buf,<sp/>len,<sp/>fmt,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parser<sp/>core<sp/>-<sp/>when<sp/>encountering<sp/>text,<sp/>process<sp/>appropriately.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_value(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((input_buffer<sp/>==<sp/>NULL)<sp/>||<sp/>(input_buffer-&gt;<ref refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" kindref="member">content</ref><sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>the<sp/>different<sp/>types<sp/>of<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>null<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a2257377f8b81f4f76a16b698f681af34" kindref="member">can_read</ref>(input_buffer,<sp/>4)<sp/>&amp;&amp;<sp/>(strncmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer),<sp/>c_null,<sp/>c_null_len)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a8be837cc65db843920c5bb2508208b44" kindref="member">JNULL</ref>;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>false<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a2257377f8b81f4f76a16b698f681af34" kindref="member">can_read</ref>(input_buffer,<sp/>5)<sp/>&amp;&amp;<sp/>(strncmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer),<sp/>c_false,<sp/>c_false_len)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a2257377f8b81f4f76a16b698f681af34" kindref="member">can_read</ref>(input_buffer,<sp/>4)<sp/>&amp;&amp;<sp/>(strncmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer),<sp/>c_true,<sp/>c_true_len)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref>;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_parse_string(item,<sp/>input_buffer);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>((<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>||<sp/>((<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))))<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_parse_number(item,<sp/>input_buffer);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_parse_array(item,<sp/>input_buffer);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_parse_object(item,<sp/>input_buffer);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>a<sp/>value<sp/>to<sp/>text.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item<sp/>==<sp/>NULL)<sp/>||<sp/>(output_buffer<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref>)<sp/>&amp;<sp/>0xFF)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a8be837cc65db843920c5bb2508208b44" kindref="member">JNULL</ref>:</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>_ensure(output_buffer,<sp/>c_null_len+1);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" kindref="member">strlcpy</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)output,<sp/>c_null,<sp/>c_null_len+1);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>:</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>_ensure(output_buffer,<sp/>c_false_len+1);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" kindref="member">strlcpy</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)output,<sp/>c_false,<sp/>c_false_len+1);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref>:</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>_ensure(output_buffer,<sp/>c_true_len+1);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" kindref="member">strlcpy</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)output,<sp/>c_true,<sp/>c_true_len+1);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>:</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_print_number(item,<sp/>output_buffer);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a40980c81dba7b14912dd5643a3a98ce3" kindref="member">JRaw</ref>:<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>raw_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_length<sp/>=<sp/>strlen(item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>)<sp/>+<sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trailing<sp/>&apos;\0&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>_ensure(output_buffer,<sp/>raw_length);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(output,<sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>,<sp/>raw_length);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>:</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_print_string(item,<sp/>output_buffer);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref>:</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_print_array(item,<sp/>output_buffer);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref>:</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_print_object(item,<sp/>output_buffer);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Build<sp/>an<sp/>array<sp/>from<sp/>input<sp/>text.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_array(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>static<sp/>function<sp/>that<sp/>is<sp/>only<sp/>called<sp/>internally,<sp/>and<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>guaranteed<sp/>that<sp/>item<sp/>is<sp/>not<sp/>NULL.<sp/>`cppcheck`<sp/>is<sp/>not<sp/>able<sp/>to<sp/>infer<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>code,<sp/>because<sp/>we<sp/>are<sp/>using<sp/>a<sp/>macro,<sp/>NOTE_C_STATIC,<sp/>to<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>static<sp/>keyword<sp/>in<sp/>the<sp/>public<sp/>header<sp/>during<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*head<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>head<sp/>of<sp/>the<sp/>linked<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*current_item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_buffer-&gt;<ref refid="structparse__buffer_1af613c4ed7d73f76c60c50d1bcf4c67a0" kindref="member">depth</ref><sp/>&gt;=<sp/><ref refid="n__cjson_8h_1a4b45cf89b4c917ceca2e2389c4f723e4" kindref="member">N_CJSON_NESTING_LIMIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>deeply<sp/>nested<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af613c4ed7d73f76c60c50d1bcf4c67a0" kindref="member">depth</ref>++;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>an<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_buffer_skip_whitespace()<sp/>will<sp/>verify<sp/>the<sp/>input_buffer<sp/>is<sp/>not<sp/>NULL<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>we<sp/>skipped<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" kindref="member">cannot_access_at_index</ref>(input_buffer,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_buffer_skip_whitespace()<sp/>has<sp/>moved<sp/>us<sp/>one<sp/>beyond<sp/>the<sp/>end,<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>move<sp/>back<sp/>one,<sp/>and<sp/>we<sp/>know<sp/>we<sp/>can<sp/>access<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>--;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>back<sp/>to<sp/>character<sp/>in<sp/>front<sp/>of<sp/>the<sp/>first<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>--;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loop<sp/>through<sp/>the<sp/>comma<sp/>separated<sp/>array<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>next<sp/>item<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*new_item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attach<sp/>next<sp/>item<sp/>to<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>the<sp/>linked<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item<sp/>=<sp/>head<sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>to<sp/>the<sp/>end<sp/>and<sp/>advance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>current_item;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item<sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>next<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_parse_value(current_item,<sp/>input_buffer))<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>failed<sp/>to<sp/>parse<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" kindref="member">cannot_access_at_index</ref>(input_buffer,<sp/>0)<sp/>||<sp/><ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>expected<sp/>end<sp/>of<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal">success:</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af613c4ed7d73f76c60c50d1bcf4c67a0" kindref="member">depth</ref>--;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref>;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(head);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>an<sp/>array<sp/>to<sp/>text<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_array(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*current_element<sp/>=<sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compose<sp/>the<sp/>output<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>opening<sp/>square<sp/>bracket<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>1);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref>++;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_element<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_print_value(current_element,<sp/>output_buffer))<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_update_offset(output_buffer);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_element-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>(size_t)<sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_element<sp/>=<sp/>current_element-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>2);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref>--;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Build<sp/>an<sp/>object<sp/>from<sp/>the<sp/>text.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_parse_object(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_buffer)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>static<sp/>function<sp/>that<sp/>is<sp/>only<sp/>called<sp/>internally,<sp/>and<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>guaranteed<sp/>that<sp/>item<sp/>is<sp/>not<sp/>NULL.<sp/>`cppcheck`<sp/>is<sp/>not<sp/>able<sp/>to<sp/>infer<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>code,<sp/>because<sp/>we<sp/>are<sp/>using<sp/>a<sp/>macro,<sp/>NOTE_C_STATIC,<sp/>to<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>static<sp/>keyword<sp/>in<sp/>the<sp/>public<sp/>header<sp/>during<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*head<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>linked<sp/>list<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*current_item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_buffer-&gt;<ref refid="structparse__buffer_1af613c4ed7d73f76c60c50d1bcf4c67a0" kindref="member">depth</ref><sp/>&gt;=<sp/><ref refid="n__cjson_8h_1a4b45cf89b4c917ceca2e2389c4f723e4" kindref="member">N_CJSON_NESTING_LIMIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>deeply<sp/>nested<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af613c4ed7d73f76c60c50d1bcf4c67a0" kindref="member">depth</ref>++;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" kindref="member">cannot_access_at_index</ref>(input_buffer,<sp/>0)<sp/>||<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>an<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_buffer_skip_whitespace()<sp/>will<sp/>verify<sp/>the<sp/>input_buffer<sp/>is<sp/>not<sp/>NULL<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>success;<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>we<sp/>skipped<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" kindref="member">cannot_access_at_index</ref>(input_buffer,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_buffer_skip_whitespace()<sp/>has<sp/>moved<sp/>us<sp/>one<sp/>beyond<sp/>the<sp/>end,<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>move<sp/>back<sp/>one,<sp/>and<sp/>we<sp/>know<sp/>we<sp/>can<sp/>access<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>--;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>back<sp/>to<sp/>character<sp/>in<sp/>front<sp/>of<sp/>the<sp/>first<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>--;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loop<sp/>through<sp/>the<sp/>comma<sp/>separated<sp/>array<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>next<sp/>item<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*new_item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attach<sp/>next<sp/>item<sp/>to<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>the<sp/>linked<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item<sp/>=<sp/>head<sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>to<sp/>the<sp/>end<sp/>and<sp/>advance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>current_item;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item<sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>the<sp/>name<sp/>of<sp/>the<sp/>child<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_buffer_skip_whitespace()<sp/>will<sp/>verify<sp/>the<sp/>input_buffer<sp/>is<sp/>not<sp/>NULL<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>nullPointerRedundantCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_parse_string(current_item,<sp/>input_buffer))<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>faile<sp/>to<sp/>parse<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>valuestring<sp/>and<sp/>string,<sp/>because<sp/>we<sp/>parsed<sp/>the<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>=<sp/>current_item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" kindref="member">cannot_access_at_index</ref>(input_buffer,<sp/>0)<sp/>||<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>the<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_parse_value(current_item,<sp/>input_buffer))<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>failed<sp/>to<sp/>parse<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_skip_whitespace(input_buffer);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1ae210aa01f1afe7510658c392f0f6e128" kindref="member">can_access_at_index</ref>(input_buffer,<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson_8c_1a5c873a43d8a78ce9a6d9e8eb41d65d2d" kindref="member">cannot_access_at_index</ref>(input_buffer,<sp/>0)<sp/>||<sp/>(<ref refid="n__cjson_8c_1ac538057ef78677344d222b763251af5e" kindref="member">buffer_at_offset</ref>(input_buffer)[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;<sp/></highlight><highlight class="comment">/*<sp/>expected<sp/>end<sp/>of<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal">success:</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af613c4ed7d73f76c60c50d1bcf4c67a0" kindref="member">depth</ref>--;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref>;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>input_buffer-&gt;<ref refid="structparse__buffer_1af727920073077579942a79de519bb31a" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(head);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>there<sp/>is<sp/>another<sp/>non-omitted<sp/>item<sp/>looking<sp/>forward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_last_non_omitted_object(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output_buffer-&gt;<ref refid="structprintbuffer_1af746da3857d83e6c7cba29cc5bd7a123" kindref="member">omitempty</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a39d4dc978cbd0c5d10d287b4ac57b8d1" kindref="member">JGetItemType</ref>(item);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/><ref refid="note_8h_1a33c56f9e059f017b5f73a7207b5f690a" kindref="member">JTYPE_BOOL_FALSE</ref><sp/>&amp;&amp;<sp/>type<sp/>!=<sp/><ref refid="note_8h_1a34cb28204f46e15dc57b5b82181e2e1d" kindref="member">JTYPE_NUMBER_ZERO</ref><sp/>&amp;&amp;<sp/>type<sp/>!=<sp/><ref refid="note_8h_1a88bdd6cb77b65bec7d1a12d512a021a7" kindref="member">JTYPE_STRING_BLANK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>an<sp/>object<sp/>to<sp/>text.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_print_object(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="structprintbuffer" kindref="compound">printbuffer</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output_buffer)</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*current_item<sp/>=<sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compose<sp/>the<sp/>output:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>(size_t)<sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>?<sp/>2<sp/>:<sp/>1);<sp/></highlight><highlight class="comment">/*<sp/>fmt:<sp/>{\n<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref>++;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_item)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(PRINT_TAB_CHARS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needed<sp/>=<sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref>;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needed<sp/>=<sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref><sp/>*<sp/><ref refid="n__cjson_8c_1a3a77fd438cec9e807b5dfc440010d2fe" kindref="member">PRINT_TAB_CHARS</ref>;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>needed);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(PRINT_TAB_CHARS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_buffer_offset++;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tc=0;<sp/>tc&lt;<ref refid="n__cjson_8c_1a3a77fd438cec9e807b5dfc440010d2fe" kindref="member">PRINT_TAB_CHARS</ref>;<sp/>tc++)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref>++;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>it<sp/>should<sp/>be<sp/>eliminated<sp/>becase<sp/>of<sp/>omitempty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>omit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1af746da3857d83e6c7cba29cc5bd7a123" kindref="member">omitempty</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a39d4dc978cbd0c5d10d287b4ac57b8d1" kindref="member">JGetItemType</ref>(current_item);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omit<sp/>=(type<sp/>==<sp/><ref refid="note_8h_1a33c56f9e059f017b5f73a7207b5f690a" kindref="member">JTYPE_BOOL_FALSE</ref><sp/>||<sp/>type<sp/>==<sp/><ref refid="note_8h_1a34cb28204f46e15dc57b5b82181e2e1d" kindref="member">JTYPE_NUMBER_ZERO</ref><sp/>||<sp/>type<sp/>==<sp/><ref refid="note_8h_1a88bdd6cb77b65bec7d1a12d512a021a7" kindref="member">JTYPE_STRING_BLANK</ref>);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>item<sp/>only<sp/>if<sp/>not<sp/>omitted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!omit)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_print_string_ptr((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)current_item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>,<sp/>output_buffer))<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_update_offset(output_buffer);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>(size_t)<sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>length);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(PRINT_TAB_CHARS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_print_value(current_item,<sp/>output_buffer))<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_update_offset(output_buffer);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>comma<sp/>if<sp/>not<sp/>last<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>more_fields_coming<sp/>=<sp/>!_last_non_omitted_object(current_item,<sp/>output_buffer);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>(size_t)<sp/>((output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>?<sp/>1<sp/>:<sp/>0)<sp/>+<sp/>(more_fields_coming<sp/>?<sp/>1<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(more_fields_coming)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" kindref="member">offset</ref><sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_item<sp/>=<sp/>current_item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(PRINT_TAB_CHARS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needed<sp/>=<sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>?<sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref><sp/>-<sp/>1)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needed<sp/>=<sp/>output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref><sp/>?<sp/>((output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref><sp/>-<sp/>1)<sp/>*<sp/><ref refid="n__cjson_8c_1a3a77fd438cec9e807b5dfc440010d2fe" kindref="member">PRINT_TAB_CHARS</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>needed<sp/>+=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>}\0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pointer<sp/>=<sp/>_ensure(output_buffer,<sp/>needed);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1a38337d25a56957deebce187d9ab089ef" kindref="member">format</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref><sp/>-<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(PRINT_TAB_CHARS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tc=0;<sp/>tc&lt;<ref refid="n__cjson_8c_1a3a77fd438cec9e807b5dfc440010d2fe" kindref="member">PRINT_TAB_CHARS</ref>;<sp/>tc++)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_pointer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;<ref refid="structprintbuffer_1aa7311b5da38ff8d1737824c611b48732" kindref="member">depth</ref>--;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>Array<sp/>size/item<sp/>/<sp/>object<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1ad6c39ba426fee1353a286a35b64a825d" kindref="member">JGetArraySize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*array)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/>array-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(child<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size++;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>child-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Can<sp/>overflow<sp/>here.<sp/>Cannot<sp/>be<sp/>fixed<sp/>without<sp/>breaking<sp/>the<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)size;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="struct_j" kindref="compound">J</ref>*<sp/>_get_array_item(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*current_child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>current_child<sp/>=<sp/>array-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((current_child<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(index<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index--;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_child<sp/>=<sp/>current_child-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_child;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a5f21d89669885c010a8f82dbd54973d5" kindref="member">JGetArrayItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_get_array_item(array,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)index);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*_get_object_item(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>case_sensitive)</highlight></codeline>
<codeline lineno="1722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*current_element<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>||<sp/>(name<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>current_element<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(case_sensitive)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((current_element<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(strcmp(name,<sp/>current_element-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_element<sp/>=<sp/>current_element-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((current_element<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(_case_insensitive_strcmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)name,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(current_element-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>))<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_element<sp/>=<sp/>current_element-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_element;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a4bceae2bd457a4070dd31eb9838d2890" kindref="member">JGetObjectItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_get_object_item(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a758e796dd7c6420625c71c9c44b580cc" kindref="member">JGetObjectItemCaseSensitive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_get_object_item(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a7469d6cd6aa0d487c5a3a87a102ad3ee" kindref="member">JHasObjectItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8c_1a4bceae2bd457a4070dd31eb9838d2890" kindref="member">JGetObjectItem</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utility<sp/>for<sp/>array<sp/>list<sp/>handling.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_suffix_object(<ref refid="struct_j" kindref="compound">J</ref><sp/>*prev,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utility<sp/>for<sp/>handling<sp/>references.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*_create_reference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*reference<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reference<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(reference,<sp/>item,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_j" kindref="compound">J</ref>));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>reference-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>reference-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>|=<sp/><ref refid="n__cjson_8h_1abd6ed1a437e8e4047b403a36bace79b0" kindref="member">JIsReference</ref>;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>reference-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>reference-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reference;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_add_item_to_array(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item<sp/>==<sp/>NULL)<sp/>||<sp/>(array<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/>array-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>is<sp/>empty,<sp/>start<sp/>new<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>append<sp/>to<sp/>the<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(child-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>child-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_suffix_object(child,<sp/>item);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Add<sp/>item<sp/>to<sp/>array/object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a35cec7da03622637f3be481198c7c97d" kindref="member">JAddItemToArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>_add_item_to_array(array,<sp/>item);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>(defined(__GNUC__)<sp/><sp/>&amp;&amp;<sp/>((__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>((__GNUC__<sp/>==<sp/>4)<sp/>&amp;&amp;<sp/>(__GNUC_MINOR__<sp/>&gt;<sp/>5))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wcast-qual&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>helper<sp/>function<sp/>to<sp/>cast<sp/>away<sp/>const<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_cast_away_const(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)string;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>(defined(__GNUC__)<sp/><sp/>&amp;&amp;<sp/>((__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>((__GNUC__<sp/>==<sp/>4)<sp/>&amp;&amp;<sp/>(__GNUC_MINOR__<sp/>&gt;<sp/>5))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_add_item_to_object(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>constant_key)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_type<sp/>=<sp/><ref refid="n__cjson_8h_1add66c6533bb4eb0e8da570a0859fc4e2" kindref="member">JInvalid</ref>;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>||<sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>||<sp/>(item<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constant_key)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_cast_away_const(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_type<sp/>=<sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>|<sp/><ref refid="n__cjson_8h_1ab186903675fdf0b3d22cf3e7a69994bf" kindref="member">JStringIsConst</ref>;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_j_strdup((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)string);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_key<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_type<sp/>=<sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>~JStringIsConst;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/><ref refid="n__cjson_8h_1ab186903675fdf0b3d22cf3e7a69994bf" kindref="member">JStringIsConst</ref>)<sp/>&amp;&amp;<sp/>(item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>=<sp/>new_key;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/>new_type;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add_item_to_array(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>item);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a3430617fcd905e9d3d997354cb7e23cc" kindref="member">JAddItemToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Add<sp/>an<sp/>item<sp/>to<sp/>an<sp/>object<sp/>with<sp/>constant<sp/>string<sp/>as<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1aedf66bf41048a0cfcb61a3803ed28ba0" kindref="member">JAddItemToObjectCS</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>item,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1acd1c75541c79aaf01f779286a0ce80d1" kindref="member">JAddItemReferenceToArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>_add_item_to_array(array,<sp/>_create_reference(item));</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1ab77e67888463113228be8786a31f48d0" kindref="member">JAddItemReferenceToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item)</highlight></codeline>
<codeline lineno="1900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>_create_reference(item),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1ac9a78db6d87591105451775117cdf41a" kindref="member">JAddTrueToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*true_item<sp/>=<sp/><ref refid="n__cjson_8c_1adaddb988266e6e575640409a6a0be5c3" kindref="member">JCreateTrue</ref>();</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>true_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>true_item;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(true_item);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1a382f4353644ed4c789ec1dbe00f274d8" kindref="member">JAddFalseToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*false_item<sp/>=<sp/><ref refid="n__cjson_8c_1a00be99e078924c53073e1681c28e1c6d" kindref="member">JCreateFalse</ref>();</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>false_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>false_item;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(false_item);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1aac14b1ce4ebcdb04ddc5a73c3805c012" kindref="member">JAddBoolToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*bool_item<sp/>=<sp/><ref refid="n__cjson_8c_1afb1330c4aa3655e158b561c2e0ad2a75" kindref="member">JCreateBool</ref>(</highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>bool_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool_item;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(bool_item);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1a0b06c809934990aaf3b4d77db5bab617" kindref="member">JAddNumberToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>number)</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*number_item<sp/>=<sp/><ref refid="n__cjson_8c_1a2b7ab5698623cdd98ec0f67d7b2e9d63" kindref="member">JCreateNumber</ref>(number);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>number_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_item;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(number_item);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1aea0d2474a0bf90be182134d90272c75b" kindref="member">JAddIntToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/>integer)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*integer_item<sp/>=<sp/><ref refid="n__cjson_8c_1a320f486837e3fa4f707c798611d91ba4" kindref="member">JCreateInteger</ref>(integer);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>integer_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>integer_item;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(integer_item);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1acd34fa0f3d7bf8e5c50ed49c07382b03" kindref="member">JAddStringToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*string_item<sp/>=<sp/><ref refid="n__cjson_8c_1a35c2c511d2619727f474696e85660352" kindref="member">JCreateString</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>string_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string_item;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(string_item);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1a75eb677ffba219a9404a1908c60a0f52" kindref="member">JAddRawToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>raw)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>raw<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*raw_item<sp/>=<sp/><ref refid="n__cjson_8c_1a07564cbd47175516168c942a4daca221" kindref="member">JCreateRaw</ref>(raw);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>raw_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_item;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(raw_item);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1a68e28f23a0af9c06e3c7d25658887b54" kindref="member">JAddObjectToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2048"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*object_item<sp/>=<sp/><ref refid="n__cjson_8c_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref>();</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>object_item,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object_item;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(object_item);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref>*)<sp/><ref refid="n__cjson_8c_1a25f7474bd06a682973e9e74468739cbd" kindref="member">JAddArrayToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*array<sp/>=<sp/><ref refid="n__cjson_8c_1ac5ac8ffe60d80b9897e47dc286956f3b" kindref="member">JCreateArray</ref>();</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_add_item_to_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name,<sp/>array,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(array);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a334d83830ecb03448c9802f28079dea2" kindref="member">JDetachItemViaPointer</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*parent,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>the<sp/>first<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref>-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>the<sp/>last<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>parent-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>the<sp/>detached<sp/>item<sp/>doesn&apos;t<sp/>point<sp/>anywhere<sp/>anymore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a4fb6f94ef8b668d4ac58a49669cab90f" kindref="member">JDetachItemFromArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which)</highlight></codeline>
<codeline lineno="2112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8c_1a334d83830ecb03448c9802f28079dea2" kindref="member">JDetachItemViaPointer</ref>(array,<sp/>_get_array_item(array,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)which));</highlight></codeline>
<codeline lineno="2121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1af895529b28a3a7ee2e65e75ae1703abb" kindref="member">JDeleteItemFromArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which)</highlight></codeline>
<codeline lineno="2124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(<ref refid="n__cjson_8c_1a4fb6f94ef8b668d4ac58a49669cab90f" kindref="member">JDetachItemFromArray</ref>(array,<sp/>which));</highlight></codeline>
<codeline lineno="2129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a533601a6f77ba811a5c031cec1950345" kindref="member">JDetachItemFromObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*to_detach<sp/>=<sp/><ref refid="n__cjson_8c_1a4bceae2bd457a4070dd31eb9838d2890" kindref="member">JGetObjectItem</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8c_1a334d83830ecb03448c9802f28079dea2" kindref="member">JDetachItemViaPointer</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>to_detach);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1ada527734c6f772c3e72ba2c7d9750dc0" kindref="member">JDetachItemFromObjectCaseSensitive</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*to_detach<sp/>=<sp/><ref refid="n__cjson_8c_1a758e796dd7c6420625c71c9c44b580cc" kindref="member">JGetObjectItemCaseSensitive</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8c_1a334d83830ecb03448c9802f28079dea2" kindref="member">JDetachItemViaPointer</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>to_detach);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a469200cf78eb64693c306b8c2bb8fca6" kindref="member">JDeleteItemFromObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(<ref refid="n__cjson_8c_1a533601a6f77ba811a5c031cec1950345" kindref="member">JDetachItemFromObject</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a4d2345eb658b861b6be499ae156eb4d5" kindref="member">JDeleteItemFromObjectCaseSensitive</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(<ref refid="n__cjson_8c_1ada527734c6f772c3e72ba2c7d9750dc0" kindref="member">JDetachItemFromObjectCaseSensitive</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Replace<sp/>array/object<sp/>items<sp/>with<sp/>new<sp/>ones.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a67d8128a4a64c4554afcf33c41487633" kindref="member">JInsertItemInArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*newitem)</highlight></codeline>
<codeline lineno="2171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL<sp/>||<sp/>newitem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*after_inserted<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>after_inserted<sp/>=<sp/>_get_array_item(array,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)which);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(after_inserted<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_add_item_to_array(array,<sp/>newitem);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>after_inserted;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>after_inserted-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>after_inserted-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>newitem;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(after_inserted<sp/>==<sp/>array-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>newitem;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref>-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>newitem;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a0ef15ee7acb72042a7ab2fdcf088b090" kindref="member">JReplaceItemViaPointer</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/>replacement)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/>NULL<sp/>||<sp/>replacement<sp/>==<sp/>NULL<sp/>||<sp/>item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replacement<sp/>==<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>replacement-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>replacement-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replacement-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>replacement;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replacement-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref>-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>replacement;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>==<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>replacement;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(item);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a3382107cdb7fbf8bb00d0a59ce8c02f3" kindref="member">JReplaceItemInArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*newitem)</highlight></codeline>
<codeline lineno="2229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL<sp/>||<sp/>newitem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a0ef15ee7acb72042a7ab2fdcf088b090" kindref="member">JReplaceItemViaPointer</ref>(array,<sp/>_get_array_item(array,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)which),<sp/>newitem);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>_replace_item_in_object(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*replacement,<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>case_sensitive)</highlight></codeline>
<codeline lineno="2242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>replacement<sp/>==<sp/>NULL<sp/>||<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>replace<sp/>the<sp/>name<sp/>in<sp/>the<sp/>replacement<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(replacement-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/><ref refid="n__cjson_8h_1ab186903675fdf0b3d22cf3e7a69994bf" kindref="member">JStringIsConst</ref>)<sp/>&amp;&amp;<sp/>(replacement-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(replacement-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>replacement-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_j_strdup((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)string);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>replacement-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;=<sp/>~JStringIsConst;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a0ef15ee7acb72042a7ab2fdcf088b090" kindref="member">JReplaceItemViaPointer</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>_get_object_item(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>case_sensitive),<sp/>replacement);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a90435b417a6abdb321c4c300bdf8b75b" kindref="member">JReplaceItemInObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*newitem)</highlight></codeline>
<codeline lineno="2260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>newitem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>_replace_item_in_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>newitem,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1ae3eaa58eeca1eb3a5821e21286dc72bd" kindref="member">JReplaceItemInObjectCaseSensitive</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*newitem)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/>NULL<sp/>||<sp/>newitem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>_replace_item_in_object(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>newitem,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1adaddb988266e6e575640409a6a0be5c3" kindref="member">JCreateTrue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref>;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a00be99e078924c53073e1681c28e1c6d" kindref="member">JCreateFalse</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1afb1330c4aa3655e158b561c2e0ad2a75" kindref="member">JCreateBool</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>b)</highlight></codeline>
<codeline lineno="2294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/>b<sp/>?<sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref><sp/>:<sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a2b7ab5698623cdd98ec0f67d7b2e9d63" kindref="member">JCreateNumber</ref>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>num)</highlight></codeline>
<codeline lineno="2303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref><sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saturate<sp/>valueint<sp/>in<sp/>the<sp/>case<sp/>of<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;=<sp/><ref refid="note_8h_1a445107097b19783483070744407468d9" kindref="member">JINTEGER_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/><ref refid="note_8h_1a445107097b19783483070744407468d9" kindref="member">JINTEGER_MAX</ref>;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&lt;=<sp/><ref refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" kindref="member">JINTEGER_MIN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/><ref refid="note_8h_1a882dbbae976880c3bc34c7a6e6ac2f9a" kindref="member">JINTEGER_MIN</ref>;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/>(<ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref>)num;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a320f486837e3fa4f707c798611d91ba4" kindref="member">JCreateInteger</ref>(<ref refid="note_8h_1ab76f50f98a2aef9bf6ea1e6c7a2c8cbb" kindref="member">JINTEGER</ref><sp/>integer)</highlight></codeline>
<codeline lineno="2322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref><sp/>=<sp/>(<ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref>)integer;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/>integer;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a35c2c511d2619727f474696e85660352" kindref="member">JCreateString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_j_strdup((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)string);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(item);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a7171faa2a8de38aab570450e819e926d" kindref="member">JCreateStringValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_cast_away_const(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1afa11dec571f4c3985754e2f609a799da" kindref="member">JCreateStringReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref><sp/>|<sp/><ref refid="n__cjson_8h_1abd6ed1a437e8e4047b403a36bace79b0" kindref="member">JIsReference</ref>;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_cast_away_const(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a97684efc6b3d73db3cf54a855b60d005" kindref="member">JCreateObjectReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*child)</highlight></codeline>
<codeline lineno="2367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref><sp/>|<sp/><ref refid="n__cjson_8h_1abd6ed1a437e8e4047b403a36bace79b0" kindref="member">JIsReference</ref>;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>(<ref refid="struct_j" kindref="compound">J</ref>*)_cast_away_const(child);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1af4930956f6841bb5e36942158feff882" kindref="member">JCreateArrayReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*child)</highlight></codeline>
<codeline lineno="2380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref><sp/>|<sp/><ref refid="n__cjson_8h_1abd6ed1a437e8e4047b403a36bace79b0" kindref="member">JIsReference</ref>;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>(<ref refid="struct_j" kindref="compound">J</ref>*)_cast_away_const(child);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a07564cbd47175516168c942a4daca221" kindref="member">JCreateRaw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*raw)</highlight></codeline>
<codeline lineno="2393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a40980c81dba7b14912dd5643a3a98ce3" kindref="member">JRaw</ref>;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_j_strdup((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)raw);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(item);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1ac5ac8ffe60d80b9897e47dc286956f3b" kindref="member">JCreateArray</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref>=<ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref>;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item)<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref>;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>Arrays:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a0c2f36112496670bc7377f1ec2837be2" kindref="member">JCreateIntArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="2433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*n<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*a<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((count<sp/>&lt;<sp/>0)<sp/>||<sp/>(numbers<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="n__cjson_8c_1ac5ac8ffe60d80b9897e47dc286956f3b" kindref="member">JCreateArray</ref>();</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>a<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>(size_t)count);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="n__cjson_8c_1a2b7ab5698623cdd98ec0f67d7b2e9d63" kindref="member">JCreateNumber</ref>(numbers[i]);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n)<sp/>{</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(a);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!i)<sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_suffix_object(p,<sp/>n);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1a1bd7e929cf495d1fc053b25ed728bb16" kindref="member">JCreateNumberArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9c9eb17c00d2f5af0a9fd4f3bc43bdc6" kindref="member">JNUMBER</ref><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="2462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*n<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*a<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((count<sp/>&lt;<sp/>0)<sp/>||<sp/>(numbers<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="n__cjson_8c_1ac5ac8ffe60d80b9897e47dc286956f3b" kindref="member">JCreateArray</ref>();</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>a<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>(size_t)count);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="n__cjson_8c_1a2b7ab5698623cdd98ec0f67d7b2e9d63" kindref="member">JCreateNumber</ref>(numbers[i]);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!n)<sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(a);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!i)<sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_suffix_object(p,<sp/>n);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1ad165ef4baa1b760813215297555874f3" kindref="member">JCreateStringArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**strings,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*n<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*a<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((count<sp/>&lt;<sp/>0)<sp/>||<sp/>(strings<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="n__cjson_8c_1ac5ac8ffe60d80b9897e47dc286956f3b" kindref="member">JCreateArray</ref>();</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>a<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>(size_t)count);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="n__cjson_8c_1a35c2c511d2619727f474696e85660352" kindref="member">JCreateString</ref>(strings[i]);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!n)<sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(a);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!i)<sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_suffix_object(p,n);</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Duplication<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*)<sp/><ref refid="n__cjson_8c_1add8aba87cfed1c71a1be28773cd62779" kindref="member">JDuplicate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*item,<sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>recurse)</highlight></codeline>
<codeline lineno="2523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*newitem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*newchild<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bail<sp/>on<sp/>bad<sp/>ptr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item)<sp/>{</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>new<sp/>item<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>newitem<sp/>=<sp/>_jNew_Item();</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newitem)<sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>over<sp/>all<sp/>vars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>(~JIsReference);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1a55e3d5d8de0cc6aff4d92c1b1228f7ea" kindref="member">valueint</ref>;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref><sp/>=<sp/>item-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref>;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)_j_strdup((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)item-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newitem-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>=<sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref>&amp;<ref refid="n__cjson_8h_1ab186903675fdf0b3d22cf3e7a69994bf" kindref="member">JStringIsConst</ref>)<sp/>?<sp/>item-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref><sp/>:<sp/>(char*)_j_strdup((unsigned<sp/>char*)item-&gt;string);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newitem-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>non-recursive,<sp/>then<sp/>we&apos;re<sp/>done!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!recurse)<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newitem;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Walk<sp/>the<sp/>-&gt;next<sp/>chain<sp/>for<sp/>the<sp/>child.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/>item-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(child<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newchild<sp/>=<sp/><ref refid="n__cjson_8c_1add8aba87cfed1c71a1be28773cd62779" kindref="member">JDuplicate</ref>(child,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>Duplicate<sp/>(with<sp/>recurse)<sp/>each<sp/>item<sp/>in<sp/>the<sp/>-&gt;next<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newchild)<sp/>{</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>newitem-&gt;child<sp/>already<sp/>set,<sp/>then<sp/>crosswire<sp/>-&gt;prev<sp/>and<sp/>-&gt;next<sp/>and<sp/>move<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref><sp/>=<sp/>newchild;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newchild-&gt;<ref refid="struct_j_1a970543539919061d72e5973433964bee" kindref="member">prev</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>newchild;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>newitem-&gt;child<sp/>and<sp/>move<sp/>to<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newitem-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref><sp/>=<sp/>newchild;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>newchild;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>child-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newitem;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newitem<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(newitem);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="n__cjson_8c_1a34f0eda948e36394026a0c2d927bbed5" kindref="member">JMinify</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json)</highlight></codeline>
<codeline lineno="2589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*into<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)json;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(json<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*json)<sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json++;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Whitespace<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json++;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json++;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*json==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json++;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(json[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double-slash<sp/>comments,<sp/>to<sp/>end<sp/>of<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*json<sp/>&amp;&amp;<sp/>(*json<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json++;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(json[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>multiline<sp/>comments.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*json<sp/>&amp;&amp;<sp/>!((*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(json[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json++;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>string<sp/>literals,<sp/>which<sp/>are<sp/>\&quot;<sp/>sensitive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*into++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*json++;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*json<sp/>&amp;&amp;<sp/>(*json<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*json<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*into++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*json++;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*into++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*json++;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*into++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*json++;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>other<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*into++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*json++;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>null-terminate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>*into<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a88cfb9e3b03ac17ba67d037f76037dbc" kindref="member">JIsInvalid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1add66c6533bb4eb0e8da570a0859fc4e2" kindref="member">JInvalid</ref>;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a457bc8d0d7e568fd974b36e9d10ec24d" kindref="member">JIsFalse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1af3451fac120016cabb032443098328e1" kindref="member">JIsTrue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xff)<sp/>==<sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref>;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a7018dd9b9399e168495a42da2ca30c32" kindref="member">JIsBool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>(<ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref><sp/>|<sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a58e9e823e7eb8675b8dd652994816d10" kindref="member">JIsNull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1a8be837cc65db843920c5bb2508208b44" kindref="member">JNULL</ref>;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a90966d05e3d50b9c6f664be5bb0246ec" kindref="member">JIsNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a35c8801a08c0fd4de08759c36bd7d8ad" kindref="member">JIsString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2686"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1ad2e8fbc0e1b1484f3593d95e32335c12" kindref="member">JIsArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref>;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a46958f34e3c76bef78fff3e9f78a7af8" kindref="member">JIsObject</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref>;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a38fc30cb88e2b0e194eb1b15def5c85d" kindref="member">JIsRaw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)</highlight></codeline>
<codeline lineno="2710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>==<sp/><ref refid="n__cjson_8h_1a40980c81dba7b14912dd5643a3a98ce3" kindref="member">JRaw</ref>;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><ref refid="n__cjson_8h_1a5f460c51c54d1548d58c1ebf4985a347" kindref="member">N_CJSON_PUBLIC</ref>(<ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref>)<sp/><ref refid="n__cjson_8c_1a29a204614c3c8a73a1eed2482f31ab15" kindref="member">JCompare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1abcfad9bdd54f2729b7e1c3891289f8dd" kindref="member">Jbool</ref><sp/>case_sensitive)</highlight></codeline>
<codeline lineno="2718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((a<sp/>==<sp/>NULL)<sp/>||<sp/>(b<sp/>==<sp/>NULL)<sp/>||<sp/>((a-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>!=<sp/>(b-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF))<sp/>||<sp/><ref refid="n__cjson_8c_1a88cfb9e3b03ac17ba67d037f76037dbc" kindref="member">JIsInvalid</ref>(a))<sp/>{</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>type<sp/>is<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>:</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref>:</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a8be837cc65db843920c5bb2508208b44" kindref="member">JNULL</ref>:</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>:</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>:</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a40980c81dba7b14912dd5643a3a98ce3" kindref="member">JRaw</ref>:</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref>:</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref>:</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>identical<sp/>objects<sp/>are<sp/>equal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="struct_j_1a1bb6f40b6adc8640b4beb11102b21c4b" kindref="member">type</ref><sp/>&amp;<sp/>0xFF)<sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>these<sp/>cases<sp/>and<sp/>equal<sp/>type<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a4c4e8a545657ef9148ffb476b0a93074" kindref="member">JFalse</ref>:</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1af3f87fd9d106ef925670d3b0d5303413" kindref="member">JTrue</ref>:</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a8be837cc65db843920c5bb2508208b44" kindref="member">JNULL</ref>:</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a81a6942a78096063c9de50c2b5f756d6" kindref="member">JNumber</ref>:</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref><sp/>==<sp/>b-&gt;<ref refid="struct_j_1ac62cf00a5cadeafc84d8d9fec38cfa50" kindref="member">valuenumber</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1ab9e8c51828f7f79c9fcf2220d24b03ec" kindref="member">JString</ref>:</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a40980c81dba7b14912dd5643a3a98ce3" kindref="member">JRaw</ref>:</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((a-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>==<sp/>NULL)<sp/>||<sp/>(b-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref><sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(a-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>,<sp/>b-&gt;<ref refid="struct_j_1a54f8d507791671d5f5951e8cae540232" kindref="member">valuestring</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a9948138a2efa4524c27f4381b75edf78" kindref="member">JArray</ref>:<sp/>{</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*a_element<sp/>=<sp/>a-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*b_element<sp/>=<sp/>b-&gt;<ref refid="struct_j_1ab4ff5a4f92fa47b521015ef15e6da518" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>(a_element<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(b_element<sp/>!=<sp/>NULL);)<sp/>{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n__cjson_8c_1a29a204614c3c8a73a1eed2482f31ab15" kindref="member">JCompare</ref>(a_element,<sp/>b_element,<sp/>case_sensitive))<sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_element<sp/>=<sp/>a_element-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_element<sp/>=<sp/>b_element-&gt;<ref refid="struct_j_1aa07e8b542090fe62bf0469e85d69c37c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>of<sp/>the<sp/>arrays<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>other<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_element<sp/>!=<sp/>b_element)<sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a45e5b1c47300f1543cfaf97606da88b3" kindref="member">JObject</ref>:<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*a_element<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*b_element<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1abf5a971e7edd30b9fdc23322cb275e23" kindref="member">JArrayForEach</ref>(a_element,<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO<sp/>This<sp/>has<sp/>O(n^2)<sp/>runtime,<sp/>which<sp/>is<sp/>horrible!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_element<sp/>=<sp/>_get_object_item(b,<sp/>a_element-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>,<sp/>case_sensitive);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b_element<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n__cjson_8c_1a29a204614c3c8a73a1eed2482f31ab15" kindref="member">JCompare</ref>(a_element,<sp/>b_element,<sp/>case_sensitive))<sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>doing<sp/>this<sp/>twice,<sp/>once<sp/>on<sp/>a<sp/>and<sp/>b<sp/>to<sp/>prevent<sp/>true<sp/>comparison<sp/>if<sp/>a<sp/>subset<sp/>of<sp/>b</highlight></codeline>
<codeline lineno="2805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:<sp/>Do<sp/>this<sp/>the<sp/>proper<sp/>way,<sp/>this<sp/>is<sp/>just<sp/>a<sp/>fix<sp/>for<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1abf5a971e7edd30b9fdc23322cb275e23" kindref="member">JArrayForEach</ref>(b_element,<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_element<sp/>=<sp/>_get_object_item(a,<sp/>b_element-&gt;<ref refid="struct_j_1aedd40ac50e584c7b93e0046e404ae543" kindref="member">string</ref>,<sp/>case_sensitive);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_element<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n__cjson_8c_1a29a204614c3c8a73a1eed2482f31ab15" kindref="member">JCompare</ref>(b_element,<sp/>a_element,<sp/>case_sensitive))<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2823"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/note-c/note-c/n_cjson.c"/>
  </compounddef>
</doxygen>
