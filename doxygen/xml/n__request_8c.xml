<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="n__request_8c" kind="file" language="C++">
    <compoundname>n_request.c</compoundname>
    <includes local="yes">n_lib.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/note-c/note-c/n_request.c</label>
        <link refid="n__request_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>n_lib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="n__request_8c_1a8334a93acebb34e7bc188f767dc42f90" prot="public" static="no">
        <name>CRC_FIELD_LENGTH</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="31" column="9" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__request_8c_1a370d78366b4c13731108b1afd745b4ce" prot="public" static="no">
        <name>CRC_FIELD_NAME_OFFSET</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="32" column="9" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__request_8c_1ac5f2372cc25a915c8dccd2924c7c6f19" prot="public" static="no">
        <name>CRC_FIELD_NAME_TEST</name>
        <initializer>&quot;\&quot;crc\&quot;:\&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="33" column="9" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__request_8c_1a302e523cec0a3e9548e90ded8c2faeae" prot="public" static="no">
        <name>ERR_FIELD_NAME_TEST</name>
        <initializer>&quot;\&quot;err\&quot;:\&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="34" column="9" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="n__request_8c_1a91dc508f11c6b8eab15b0767981e4dc5" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int RETRY_DELAY_MS</definition>
        <argsstring></argsstring>
        <name>RETRY_DELAY_MS</name>
        <initializer>= 500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="17" column="18" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__request_8c_1a80721fd73588e6c02eb5c16a54a0eec7" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t cardTransactionTimeoutOverrideSecs</definition>
        <argsstring></argsstring>
        <name>cardTransactionTimeoutOverrideSecs</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="20" column="10" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__request_8c_1aebcf84f5111ed46b77b211518ede072b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int suppressShowTransactions</definition>
        <argsstring></argsstring>
        <name>suppressShowTransactions</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="23" column="12" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__request_8c_1ac1d3a148b17a5684b5220cc6c79fbb17" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool resetRequired</definition>
        <argsstring></argsstring>
        <name>resetRequired</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="26" column="13" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__request_8c_1a5f447498340486db8c90005523ad326d" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t seqNo</definition>
        <argsstring></argsstring>
        <name>seqNo</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="30" column="17" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__request_8c_1a92ba0fe503c1eb59e182cbc6fd82db63" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool notecardFirmwareSupportsCrc</definition>
        <argsstring></argsstring>
        <name>notecardFirmwareSupportsCrc</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="39" column="13" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__request_8c_1aa4c319e0c579ff559958558f469b6ea7" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t lut[16]</definition>
        <argsstring>[16]</argsstring>
        <name>lut</name>
        <initializer>= {
    0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
    0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
    0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="836" column="17" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="836" bodyend="840"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="n__request_8c_1a6b672c730320e3665496fbaabf13ca74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t _crc32</definition>
        <argsstring>(const void *data, size_t length)</argsstring>
        <name>_crc32</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Compute the CRC32 of the passed in buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Small lookup-table half-byte CRC32 algorithm. See <ulink url="https://create.stephan-brumme.com/crc32/#half-byte">https://create.stephan-brumme.com/crc32/#half-byte</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CRC32 of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="853" column="16" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="853" bodyend="866" declfile="/home/runner/work/note-c/note-c/n_request.c" declline="35" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1ad1b27a89fc59916e6daad6cecae0b210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * _crcAdd</definition>
        <argsstring>(char *json, uint16_t seqno)</argsstring>
        <name>_crcAdd</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>seqno</declname>
        </param>
        <briefdescription>
<para>Append a &quot;crc&quot; field to the passed in JSON buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The &quot;crc&quot; field has a value of the form &quot;SSSS:CCCCCCCC&quot;, where SSSS is the passed in sequence number and CCCCCCCC is the CRC32.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON buffer to both add the CRC32 to and to compute the CRC32 over. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seqno</parametername>
</parameternamelist>
<parameterdescription>
<para>A 16-bit sequence number to include as a part of the CRC.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dynamically-allocated version of the passed in buffer with the CRC field added or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="881" column="13" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="881" bodyend="926" declfile="/home/runner/work/note-c/note-c/n_request.c" declline="36" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a77212d94f43f7009ebbc0ca5508cf01d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _crcError</definition>
        <argsstring>(char *json, uint16_t shouldBeSeqno)</argsstring>
        <name>_crcError</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>shouldBeSeqno</declname>
        </param>
        <briefdescription>
<para>Check the passed in JSON for CRC and sequence number errors. </para>
        </briefdescription>
        <detaileddescription>
<para>If the calculated CRC32 doesn&apos;t match what&apos;s in the buffer, that&apos;s an error. If the sequence number in the buffer doesn&apos;t match shouldBeSeqno, that&apos;s an error. If there is no CRC field in the buffer, that&apos;s not an error UNLESS this function has been given a buffer with a CRC field before. In this case, the lack of a CRC field is an error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON buffer for which the CRC should be checked. Note that the CRC is stripped from the input JSON regardless of whether or not there was an error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shouldBeSeqno</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected sequence number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if there&apos;s an error and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="note"><para>The CRC is stripped from the input JSON regardless of whether or not there was an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="947" column="13" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="947" bodyend="988" declfile="/home/runner/work/note-c/note-c/n_request.c" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1ab5ac61df8f850598c5aa7695fae8f61b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>static J * _errDoc</definition>
        <argsstring>(uint32_t id, const char *errmsg)</argsstring>
        <name>_errDoc</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>errmsg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="55" column="11" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="55" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a4cdf32ad3878aa407786a9702c7b147c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _noteResumeTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>_noteResumeTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resume showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="80" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a01f2ef4edcefdf1569e419e43c312ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _noteSuspendTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>_noteSuspendTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Suppress showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="88" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1aed8f2d554498e5c1360b1e6ae0d43a5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t _noteTransaction_calculateTimeoutMs</definition>
        <argsstring>(J *req, bool isReq)</argsstring>
        <name>_noteTransaction_calculateTimeoutMs</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isReq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="117" column="17" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="117" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1ab0427f0cd3e286d8020309ea88687d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSuspendTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSuspendTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Suppress showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="153" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a27085ec262c1b7e69d4f8998e2a5219c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteResumeTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>NoteResumeTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resume showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="161" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1ae5d81f097b364f4011d87e9934db363c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteSetRequestTimeout</definition>
        <argsstring>(uint32_t overrideSecs)</argsstring>
        <name>NoteSetRequestTimeout</name>
        <param>
          <type>uint32_t</type>
          <declname>overrideSecs</declname>
        </param>
        <briefdescription>
<para>Set the request timeout for Notecard transactions. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides control for transactions which must be tailored based upon the nature of the transaction being performed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overrideSecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in seconds (0 for default).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previous timeout value that was overridden. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="166" column="10" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a76f6fa9b4401f7ba8563bc3a548ad59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteNewRequest</definition>
        <argsstring>(const char *request)</argsstring>
        <name>NoteNewRequest</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Create a new request JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a dynamically allocated <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with one field <computeroutput>&quot;req&quot;</computeroutput> whose value is the passed in request string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the Notecard API request (e.g., &quot;card.version&quot;).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a newly allocated JSON object with the &quot;req&quot; field populated, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="173" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="173" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a93f6be68d755b58784aa60d656440a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteNewCommand</definition>
        <argsstring>(const char *request)</argsstring>
        <name>NoteNewCommand</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Create a new command JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a dynamically allocated <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with one field <computeroutput>&quot;cmd&quot;</computeroutput> whose value is the passed in request string. Commands are similar to requests, but the Notecard does not send a response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the Notecard API command (e.g., &quot;card.restart&quot;).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a newly allocated JSON object with the &quot;cmd&quot; field populated, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="182" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="182" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1ab1227db7501f0b979ed894fb764790e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRequest</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteRequest</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not. The response from the Notecard, if any, is freed and not returned to the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if successful and <computeroutput>false</computeroutput> if an error occurs (e.g. out of memory or the response from the Notecard has an &quot;err&quot; field). If req is a command rather than a request, a <computeroutput>true</computeroutput> return value indicates that the command was sent without error. However, since the Notecard sends no response to commands, it does not guarantee that the command was received and processed by the Notecard.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1a234931d7639db0c292c27308aafbae75" kindref="member">NoteRequestResponse</ref> if you need to work with the response. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="191" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="191" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a7eef6ff395f1e94934d3f9eb99bbcb9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRequestWithRetry</definition>
        <argsstring>(J *req, uint32_t timeoutSeconds)</argsstring>
        <name>NoteRequestWithRetry</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutSeconds</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard, retrying until it succeeds or times out. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not. The response from the Notecard, if any, is freed and not returned to the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time limit for retries, in seconds, if there is no response, or if the response contains an I/O error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if successful and <computeroutput>false</computeroutput> if an error occurs (e.g. out of memory or the response from the Notecard has an &quot;err&quot; field).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1aef1204c75ca0b2300f5ea55bb52586c5" kindref="member">NoteRequestResponseWithRetry</ref> if you need to work with the response. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="205" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="205" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a234931d7639db0c292c27308aafbae75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteRequestResponse</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteRequestResponse</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="220" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="220" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1aef1204c75ca0b2300f5ea55bb52586c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteRequestResponseWithRetry</definition>
        <argsstring>(J *req, uint32_t timeoutSeconds)</argsstring>
        <name>NoteRequestResponseWithRetry</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutSeconds</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard, retrying until it succeeds or times out, then return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time limit for retries, in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="note"><para>Timeouts may occur when either there is no response, or if the response contains an I/O error.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="234" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="234" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a8b39b3aa0c27493a4fa81509cc8d527d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * NoteRequestResponseJSON</definition>
        <argsstring>(const char *reqJSON)</argsstring>
        <name>NoteRequestResponseJSON</name>
        <param>
          <type>const char *</type>
          <declname>reqJSON</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response as JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike NoteRequestResponse, this function expects the request to be a valid JSON C-string, rather than a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. The string is expected to be newline-terminated, otherwise the call produces undefined behavior. The response is returned as a dynamically allocated JSON C-string. The response is newline-terminated, just like the request. The caller is responsible for freeing the response string. If the request was a command (i.e. it uses &quot;cmd&quot; instead of &quot;req&quot;), this function returns NULL, since commands do not have a response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reqJSON</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid newline-terminated JSON C-string containing the request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newline-terminated JSON C-string with the response, or NULL if there was no response or if there was an error.</para>
</simplesect>
<simplesect kind="note"><para>When a &quot;cmd&quot; is sent, it is not possible to determine if an error occurred.</para>
</simplesect>
<simplesect kind="note"><para>Unlike the <computeroutput>NoteRequest*</computeroutput> functions, this function does not automatically free the request JSON string. It is not possible to know if the parameter is a string literal. As such, it is the caller&apos;s responsibility to manage the memory associated with the request string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="279" column="7" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="279" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a96424058d58bf4c3318eeb2c0fb3123d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * NoteTransaction</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteTransaction</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>This function doesn&apos;t free the passed in request object. The caller is responsible for freeing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="411" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a2748f51ec6b6540e66e7441c8d278199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J * _noteTransactionShouldLock</definition>
        <argsstring>(J *req, bool lockNotecard)</argsstring>
        <name>_noteTransactionShouldLock</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lockNotecard</declname>
        </param>
        <briefdescription>
<para>Same as <computeroutput>NoteTransaction</computeroutput>, but takes an additional parameter that indicates if the Notecard should be locked. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> cJSON request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotecard</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>true</computeroutput> if the Notecard should be locked and <computeroutput>false</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> cJSON object with the response, or NULL if there is insufficient memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="428" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="428" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a6c62afa66443f9dbb0a36bf9f76e9896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteResetRequired</definition>
        <argsstring>(void)</argsstring>
        <name>NoteResetRequired</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Mark that a reset will be required before doing further I/O on a given port. </para>
        </briefdescription>
        <detaileddescription>
<para>Mark that a Notecard reset is required on the next transaction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="756" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="756" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a6358096b5a9e5c69a4f56b12e80092fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteReset</definition>
        <argsstring>(void)</argsstring>
        <name>NoteReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize or re-initialize the I/O inferface (I2C/UART). </para>
        </briefdescription>
        <detaileddescription>
<para>Reset the Notecard, clearing any error state.</para>
<para><simplesect kind="return"><para>True if the reset was successful and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="766" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="766" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a1385294098059d94d366e2fd843358e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteErrorContains</definition>
        <argsstring>(const char *errstr, const char *errtype)</argsstring>
        <name>NoteErrorContains</name>
        <param>
          <type>const char *</type>
          <declname>errstr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>errtype</declname>
        </param>
        <briefdescription>
<para>Check if an error string contains a specific error type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errstr</parametername>
</parameternamelist>
<parameterdescription>
<para>The error string to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The error type to search for in errstr.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the error string contains the specified error type, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="note"><para>Only Notecard errors enclosed in <computeroutput>{}</computeroutput> (e.g. <computeroutput>{io}</computeroutput> for an I/O error) are guaranteed by the API. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="774" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="774" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1a3b8d73d3dc3b3315b1be8260e83f10ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteErrorClean</definition>
        <argsstring>(char *errbuf)</argsstring>
        <name>NoteErrorClean</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
        </param>
        <briefdescription>
<para>Clean up an error string by removing all bracketed tags. </para>
        </briefdescription>
        <detaileddescription>
<para>Notecard errors are enclosed in <computeroutput>{}</computeroutput> (e.g. <computeroutput>{io}</computeroutput> for an I/O error). This function takes the input string and removes all bracketed errors from it, meaning it removes any substrings matching the pattern <computeroutput>{some error string}</computeroutput>, including the braces.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A C-string to to clean of errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="779" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="779" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="n__request_8c_1ae33aff884d3eeec8dc0e729f078f28cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t _n_atoh</definition>
        <argsstring>(char *p, int maxLen)</argsstring>
        <name>_n_atoh</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxLen</declname>
        </param>
        <briefdescription>
<para>Convert a hex string to a 64-bit unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The hex string to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the hex string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_request.c" line="809" column="10" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="809" bodyend="834"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Written by Ray Ozzie and Blues Inc. team.</para>
<para>Copyright (c) 2019 Blues Inc. MIT License. Use of this source code is governed by licenses granted by the copyright holder including that found in the <ulink url="https://github.com/blues/note-c/blob/master/LICENSE">LICENSE</ulink> file. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;n_lib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RETRY_DELAY_MS<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>value<sp/>that<sp/>optionally<sp/>overrides<sp/>CARD_INTER_TRANSACTION_TIMEOUT_SEC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">uint32_t<sp/><ref refid="n__request_8c_1a80721fd73588e6c02eb5c16a54a0eec7" kindref="member">cardTransactionTimeoutOverrideSecs</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>flow<sp/>tracing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>suppressShowTransactions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flag<sp/>that<sp/>gets<sp/>set<sp/>whenever<sp/>an<sp/>error<sp/>occurs<sp/>that<sp/>should<sp/>force<sp/>a<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resetRequired<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CRC<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>seqNo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRC_FIELD_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22<sp/><sp/></highlight><highlight class="comment">//<sp/>,&quot;crc&quot;:&quot;SSSS:CCCCCCCC&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRC_FIELD_NAME_OFFSET<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRC_FIELD_NAME_TEST<sp/><sp/><sp/><sp/><sp/>&quot;\&quot;crc\&quot;:\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERR_FIELD_NAME_TEST<sp/><sp/><sp/><sp/><sp/>&quot;\&quot;err\&quot;:\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">NOTE_C_STATIC<sp/>int32_t<sp/>_crc32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>_crcAdd(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/>uint16_t<sp/>seqno);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_crcError(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/>uint16_t<sp/>shouldBeSeqno);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>notecardFirmwareSupportsCrc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/>_errDoc(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errmsg)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*rspdoc<sp/>=<sp/><ref refid="n__cjson_8h_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rspdoc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1acd34fa0f3d7bf8e5c50ed49c07382b03" kindref="member">JAddStringToObject</ref>(rspdoc,<sp/>c_err,<sp/>errmsg);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1acd34fa0f3d7bf8e5c50ed49c07382b03" kindref="member">JAddStringToObject</ref>(rspdoc,<sp/></highlight><highlight class="stringliteral">&quot;src&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;note-c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1aea0d2474a0bf90be182134d90272c75b" kindref="member">JAddIntToObject</ref>(rspdoc,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(suppressShowTransactions<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevel(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[ERROR]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevel(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;err\&quot;:\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevel(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/>errmsg);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevelLn(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,\&quot;src\&quot;:\&quot;note-c\&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>error<sp/>document!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rspdoc;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a4cdf32ad3878aa407786a9702c7b147c" kindref="member">_noteResumeTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>suppressShowTransactions--;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a01f2ef4edcefdf1569e419e43c312ce5" kindref="member">_noteSuspendTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>suppressShowTransactions++;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">NOTE_C_STATIC<sp/>uint32_t<sp/>_noteTransaction_calculateTimeoutMs(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReq)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result<sp/>=<sp/>((CARD_INTER_TRANSACTION_TIMEOUT_SEC<sp/>-<sp/>1)<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interrogate<sp/>the<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(req,<sp/>(isReq<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;req&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;cmd&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;note.add&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;milliseconds&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Using<sp/>`milliseconds`<sp/>parameter<sp/>value<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timeout.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;milliseconds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Using<sp/>`seconds`<sp/>parameter<sp/>value<sp/>for<sp/>timeout.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="n__cjson__helpers_8c_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal">)<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(req,<sp/>(isReq<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;req&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;cmd&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;web.&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;web.*<sp/>request<sp/>received.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;milliseconds&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Using<sp/>`milliseconds`<sp/>parameter<sp/>value<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timeout.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;milliseconds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Using<sp/>`seconds`<sp/>parameter<sp/>value<sp/>for<sp/>timeout.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="n__cjson__helpers_8c_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal">)<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>one<sp/>second<sp/>to<sp/>the<sp/>timeout,<sp/>to<sp/>provide<sp/>time<sp/>for<sp/>the<sp/>Notecard<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timeout<sp/>first,<sp/>then<sp/>report<sp/>the<sp/>timeout<sp/>to<sp/>the<sp/>host,<sp/>when<sp/>applicable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>1000;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1ab0427f0cd3e286d8020309ea88687d09" kindref="member">NoteSuspendTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__request_8c_1a01f2ef4edcefdf1569e419e43c312ce5" kindref="member">_noteSuspendTransactionDebug</ref>();</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a27085ec262c1b7e69d4f8998e2a5219c" kindref="member">NoteResumeTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__request_8c_1a4cdf32ad3878aa407786a9702c7b147c" kindref="member">_noteResumeTransactionDebug</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">uint32_t<sp/><ref refid="n__request_8c_1ae5d81f097b364f4011d87e9934db363c" kindref="member">NoteSetRequestTimeout</ref>(uint32_t<sp/>overrideSecs)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>previous<sp/>=<sp/>CARD_INTER_TRANSACTION_TIMEOUT_SEC;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__request_8c_1a80721fd73588e6c02eb5c16a54a0eec7" kindref="member">cardTransactionTimeoutOverrideSecs</ref><sp/>=<sp/>overrideSecs;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>previous;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="n__request_8c_1a76f6fa9b4401f7ba8563bc3a548ad59b" kindref="member">NoteNewRequest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*reqdoc<sp/>=<sp/><ref refid="n__cjson_8h_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqdoc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1acd34fa0f3d7bf8e5c50ed49c07382b03" kindref="member">JAddStringToObject</ref>(reqdoc,<sp/>c_req,<sp/>request);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqdoc;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="n__request_8c_1a93f6be68d755b58784aa60d656440a26" kindref="member">NoteNewCommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*reqdoc<sp/>=<sp/><ref refid="n__cjson_8h_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqdoc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1acd34fa0f3d7bf8e5c50ed49c07382b03" kindref="member">JAddStringToObject</ref>(reqdoc,<sp/>c_cmd,<sp/>request);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqdoc;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1ab1227db7501f0b979ed894fb764790e3" kindref="member">NoteRequest</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp<sp/>=<sp/><ref refid="n__request_8c_1a234931d7639db0c292c27308aafbae75" kindref="member">NoteRequestResponse</ref>(req);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>a<sp/>transaction<sp/>error,<sp/>and<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1aafb4b69e85bd5d9c2d1534688fd4176d" kindref="member">JIsNullString</ref>(rsp,<sp/>c_err);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(rsp);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a7eef6ff395f1e94934d3f9eb99bbcb9a" kindref="member">NoteRequestWithRetry</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/>uint32_t<sp/>timeoutSeconds)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp<sp/>=<sp/><ref refid="n__request_8c_1aef1204c75ca0b2300f5ea55bb52586c5" kindref="member">NoteRequestResponseWithRetry</ref>(req,<sp/>timeoutSeconds);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>response<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>a<sp/>transaction<sp/>error,<sp/>and<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1aafb4b69e85bd5d9c2d1534688fd4176d" kindref="member">JIsNullString</ref>(rsp,<sp/>c_err);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(rsp);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="n__request_8c_1a234931d7639db0c292c27308aafbae75" kindref="member">NoteRequestResponse</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>if<sp/>null<sp/>request.<sp/>This<sp/>allows<sp/>safe<sp/>execution<sp/>of<sp/>the<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NoteRequestResponse(NoteNewRequest(&quot;xxx&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp<sp/>=<sp/><ref refid="n__request_8c_1a96424058d58bf4c3318eeb2c0fb3123d" kindref="member">NoteTransaction</ref>(req);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>request<sp/>and<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(req);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rsp;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="n__request_8c_1aef1204c75ca0b2300f5ea55bb52586c5" kindref="member">NoteRequestResponseWithRetry</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/>uint32_t<sp/>timeoutSeconds)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>if<sp/>null<sp/>request.<sp/>This<sp/>allows<sp/>safe<sp/>execution<sp/>of<sp/>the<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NoteRequestResponse(NoteNewRequest(&quot;xxx&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>expiry<sp/>time<sp/>in<sp/>milliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>startMs<sp/>=<sp/>_GetMs();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>timeoutMs<sp/>=<sp/>timeoutSeconds<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsp<sp/>=<sp/><ref refid="n__request_8c_1a96424058d58bf4c3318eeb2c0fb3123d" kindref="member">NoteTransaction</ref>(req);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>if<sp/>there<sp/>is<sp/>no<sp/>response,<sp/>or<sp/>if<sp/>there<sp/>is<sp/>an<sp/>io<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rsp<sp/>==<sp/>NULL)<sp/>||<sp/>(<ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp,<sp/>c_err,<sp/>c_ioerr)<sp/>&amp;&amp;<sp/>!<ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp,<sp/>c_err,<sp/>c_unsupported)))<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>error<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(rsp);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>loop<sp/>on<sp/>non-null<sp/>response<sp/>without<sp/>io<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>loop<sp/>on<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_GetMs()<sp/>-<sp/>startMs<sp/>&gt;=<sp/>timeoutMs)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(req);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rsp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="n__request_8c_1a8b39b3aa0c27493a4fa81509cc8d527d" kindref="member">NoteRequestResponseJSON</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reqJSON)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>transactionTimeoutMs<sp/>=<sp/>(CARD_INTER_TRANSACTION_TIMEOUT_SEC<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rspJSON<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*allocatedJSON<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>required<sp/>to<sp/>free<sp/>the<sp/>string<sp/>if<sp/>it<sp/>is<sp/>not<sp/>newline-terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCmdPipeline<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqJSON<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>get<sp/>access<sp/>to<sp/>the<sp/>Notecard<sp/>before<sp/>transacting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_TransactionStart(transactionTimeoutMs))<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>tokenize<sp/>the<sp/>string<sp/>to<sp/>search<sp/>for<sp/>multiple<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>commands<sp/>(cannot<sp/>use<sp/>strtok)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endPtr;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>newlinePtr<sp/>=<sp/>strchr(reqJSON,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>string<sp/>is<sp/>not<sp/>newline-terminated,<sp/>then<sp/>allocate<sp/>a<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>and<sp/>terminate<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>newlinePtr)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>JSON<sp/>strings<sp/>should<sp/>be<sp/>newline-terminated<sp/>to<sp/>meet<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specification,<sp/>however<sp/>this<sp/>is<sp/>required<sp/>to<sp/>ensure<sp/>backward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compatibility<sp/>with<sp/>the<sp/>previous<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocLen<sp/>=<sp/>strlen(reqJSON);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>allocLen)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;request:<sp/>jsonbuf<sp/>zero<sp/>length&quot;</highlight><highlight class="normal">,<sp/>c_bad));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a7ac988c4204339520399f37a04eb4110" kindref="member">NOTE_C_LOG_WARN</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>due<sp/>to<sp/>malformed<sp/>request<sp/>(not<sp/>newline-terminated)&quot;</highlight><highlight class="normal">,<sp/>c_bad));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocatedJSON<sp/>=<sp/>_Malloc(allocLen<sp/>+<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>+2<sp/>for<sp/>newline<sp/>and<sp/>null-terminator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocatedJSON<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;request:<sp/>jsonbuf<sp/>malloc<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>c_mem));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(allocatedJSON,<sp/>reqJSON,<sp/>allocLen);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocatedJSON[allocLen]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocatedJSON[allocLen<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqJSON<sp/>=<sp/>allocatedJSON;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endPtr<sp/>=<sp/>&amp;allocatedJSON[allocLen];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isCmdPipeline<sp/>=<sp/>!(strlen(newlinePtr)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endPtr<sp/>=<sp/>newlinePtr;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reqLen<sp/>=<sp/>((endPtr<sp/>-<sp/>reqJSON)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCmd<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(reqJSON,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;cmd\&quot;:&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>call<sp/>`JParse()`<sp/>after<sp/>verifying<sp/>the<sp/>provided<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>appears<sp/>to<sp/>contain<sp/>a<sp/>command<sp/>(i.e.<sp/>we<sp/>find<sp/>`&quot;cmd&quot;:`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*jsonObj<sp/>=<sp/><ref refid="n__cjson_8h_1a0ddc9f5b66eb47b37db980a1ac6748be" kindref="member">JParse</ref>(reqJSON);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!jsonObj)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>JSON.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>newlinePtr)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reqJSON);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isCmd<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(jsonObj,<sp/></highlight><highlight class="stringliteral">&quot;cmd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(jsonObj);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isCmd)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errstr<sp/>=<sp/>_Transaction(reqJSON,<sp/>reqLen,<sp/>&amp;rspJSON,<sp/>transactionTimeoutMs);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errstr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(errstr);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>ID<sp/>from<sp/>the<sp/>request<sp/>JSON,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*req<sp/>=<sp/><ref refid="n__cjson_8h_1a0ddc9f5b66eb47b37db980a1ac6748be" kindref="member">JParse</ref>(reqJSON);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(req);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>_errDoc()<sp/>to<sp/>create<sp/>a<sp/>well-formed<sp/>JSON<sp/>error<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*errdoc<sp/>=<sp/>_errDoc(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>errstr);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errdoc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errdocJSON<sp/>=<sp/><ref refid="n__cjson_8h_1a8c7f9de70140d9af951c5b972aabf863" kindref="member">JPrintUnformatted</ref>(errdoc);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(errdoc);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errdocJSON<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>errdocJSONLen<sp/>=<sp/>strlen(errdocJSON);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rspJSON<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>_Malloc(errdocJSONLen+2);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rspJSON<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(rspJSON,<sp/>errdocJSON,<sp/>errdocJSONLen);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rspJSON[errdocJSONLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rspJSON[errdocJSONLen]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)errdocJSON);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocatedJSON)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)allocatedJSON);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocatedJSON<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it&apos;s<sp/>a<sp/>command,<sp/>the<sp/>Notecard<sp/>will<sp/>not<sp/>respond,<sp/>so<sp/>we<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>for<sp/>the<sp/>response<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errstr<sp/>=<sp/>_Transaction(reqJSON,<sp/>reqLen,<sp/>NULL,<sp/>transactionTimeoutMs);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqJSON<sp/>=<sp/>(endPtr<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>command<sp/>in<sp/>the<sp/>pipeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errstr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(errstr);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>if<sp/>we<sp/>allocated<sp/>a<sp/>new<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)isCmdPipeline;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocatedJSON)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)allocatedJSON);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isCmdPipeline)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for(;;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>_TransactionStop();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rspJSON;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="n__request_8c_1a96424058d58bf4c3318eeb2c0fb3123d" kindref="member">NoteTransaction</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a2748f51ec6b6540e66e7441c8d278199" kindref="member">_noteTransactionShouldLock</ref>(req,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="n__request_8c_1a2748f51ec6b6540e66e7441c8d278199" kindref="member">_noteTransactionShouldLock</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lockNotecard)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>in<sp/>case<sp/>of<sp/>memory<sp/>failure<sp/>of<sp/>the<sp/>requestor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;NULL<sp/>request&quot;</highlight><highlight class="normal">,<sp/>c_bad));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serialize<sp/>the<sp/>JSON<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json<sp/>=<sp/><ref refid="n__cjson_8h_1a8c7f9de70140d9af951c5b972aabf863" kindref="member">JPrintUnformatted</ref>(req);<sp/></highlight><highlight class="comment">//<sp/>`json`<sp/>allocated,<sp/>must<sp/>be<sp/>freed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(json<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_TransactionStop();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>serialize<sp/>JSON<sp/>request&quot;</highlight><highlight class="normal">,<sp/>c_mem));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>request<sp/>or<sp/>command<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reqApi<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a66cca753ac78c92d0904ad74a33b8c92" kindref="member">JGetString</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;req&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reqFound<sp/>=<sp/>reqApi[0];<sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>non-empty<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmdApi<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a66cca753ac78c92d0904ad74a33b8c92" kindref="member">JGetString</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;cmd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cmdFound<sp/>=<sp/>cmdApi[0];<sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>non-empty<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>neither<sp/>`&quot;req&quot;`<sp/>nor<sp/>`&quot;cmd&quot;`<sp/>are<sp/>found,<sp/>then<sp/>we<sp/>have<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>condition.<sp/>If<sp/>both<sp/>are<sp/>present,<sp/>then<sp/>we<sp/>have<sp/>undefined<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reqFound<sp/>&amp;&amp;<sp/>!cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(json);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;neither<sp/>req<sp/>nor<sp/>cmd<sp/>found<sp/>in<sp/>API<sp/>invocation<sp/>(invalid<sp/>JSON)&quot;</highlight><highlight class="normal">,<sp/>c_bad));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqFound<sp/>&amp;&amp;<sp/>cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(json);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;both<sp/>req<sp/>and<sp/>cmd<sp/>present<sp/>in<sp/>API<sp/>invocation<sp/>(undefined<sp/>behavior)&quot;</highlight><highlight class="normal">,<sp/>c_bad));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>ID<sp/>of<sp/>the<sp/>request<sp/>so<sp/>that<sp/>errors<sp/>can<sp/>be<sp/>returned<sp/>with<sp/>the<sp/>same<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a00b1ca83bdb8cc849114b973dd862d65" kindref="member">JGetInt</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>Notecard<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_TransactionStart(CARD_INTER_TRANSACTION_TIMEOUT_SEC<sp/>*<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(json);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errStr<sp/>=<sp/><ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;Notecard<sp/>not<sp/>ready<sp/>(CTX/RTX)<sp/>{io}&quot;</highlight><highlight class="normal">,<sp/>c_ioerr);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(errStr);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_errDoc(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>errStr);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inject<sp/>the<sp/>user<sp/>agent<sp/>object<sp/>only<sp/>when<sp/>we&apos;re<sp/>doing<sp/>a<sp/>`hub.set`<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specifying<sp/>the<sp/>product<sp/>UID<sp/>together.<sp/>The<sp/>goal<sp/>is<sp/>to<sp/>only<sp/>piggyback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>agent<sp/>data<sp/>when<sp/>the<sp/>host<sp/>is<sp/>initializing<sp/>the<sp/>Notecard,<sp/>as<sp/>opposed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>every<sp/>time<sp/>the<sp/>host<sp/>does<sp/>a<sp/>`hub.set`<sp/>to<sp/>change<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_DISABLE_USER_AGENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(req,<sp/>(reqFound<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;req&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;cmd&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;hub.set&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="n__cjson__helpers_8c_1a6cfeede8f787bbfd890ec7deae8aca24" kindref="member">JIsPresent</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;product&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*body<sp/>=<sp/><ref refid="note_8h_1a0bb27773cb7cf2e5b994261fbe835103" kindref="member">NoteUserAgent</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a3430617fcd905e9d3d997354cb7e23cc" kindref="member">JAddItemToObject</ref>(req,<sp/></highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>body);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Added<sp/>user-agent<sp/>to<sp/>request&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>user-agent<sp/>to<sp/>request&quot;</highlight><highlight class="normal">,<sp/>c_mem));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>transaction<sp/>timeout<sp/>based<sp/>on<sp/>the<sp/>parameters<sp/>in<sp/>the<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>transactionTimeoutMs<sp/>=<sp/>_noteTransaction_calculateTimeoutMs(req,<sp/>reqFound);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>a<sp/>CRC<sp/>value,<sp/>so<sp/>the<sp/>request<sp/>may<sp/>be<sp/>retried<sp/>if<sp/>it<sp/>is<sp/>received</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>in<sp/>a<sp/>corrupted<sp/>state.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>NOTE:<sp/>This<sp/>can<sp/>only<sp/>performed<sp/>on<sp/>requests,<sp/>because<sp/>commands<sp/>do<sp/>not<sp/>have<sp/>a</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;response<sp/>channel&apos;.<sp/>As<sp/>such,<sp/>we<sp/>have<sp/>no<sp/>ability<sp/>to<sp/>understand<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>command<sp/>failed<sp/>and<sp/>should<sp/>be<sp/>retried.<sp/>A<sp/>sequence<sp/>number<sp/>is<sp/>included</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>part<sp/>of<sp/>the<sp/>CRC<sp/>data,<sp/>so<sp/>that<sp/>two<sp/>identical<sp/>but<sp/>separate<sp/>requests</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>not<sp/>mistaken<sp/>as<sp/>the<sp/>same<sp/>request<sp/>being<sp/>retried.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>req<sp/><sp/><sp/>cmd<sp/><sp/>response</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>found<sp/>found<sp/>expected</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-----<sp/>-----<sp/>--------</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/>ERROR</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/>1<sp/>(UB)</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>crcAddedToRequest<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqFound)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newJson<sp/>=<sp/>_crcAdd(json,<sp/>seqNo);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newJson<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(json);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json<sp/>=<sp/>newJson;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crcAddedToRequest<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>lock<sp/>on<sp/>the<sp/>Notecard.<sp/><sp/>This<sp/>is<sp/>required<sp/>to<sp/>ensure<sp/>that<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>multiple<sp/>threads<sp/>trying<sp/>to<sp/>access<sp/>the<sp/>Notecard<sp/>at<sp/>the<sp/>same<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockNotecard)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>reset<sp/>of<sp/>the<sp/>I/O<sp/>interface<sp/>is<sp/>required<sp/>for<sp/>any<sp/>reason,<sp/>do<sp/>it<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resetRequired)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Resetting<sp/>Notecard<sp/>I/O<sp/>Interface...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((resetRequired<sp/>=<sp/>!_Reset()))<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockNotecard)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(json);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_TransactionStop();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errStr<sp/>=<sp/><ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>reset<sp/>Notecard<sp/>interface<sp/>{io}&quot;</highlight><highlight class="normal">,<sp/>c_iobad);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(errStr);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_errDoc(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>errStr);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>performing<sp/>retries,<sp/>this<sp/>is<sp/>where<sp/>we<sp/>come<sp/>back<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>failed<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rspJsonStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeartbeat<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>lastRequestRetries<sp/>=<sp/>0;<sp/>lastRequestRetries<sp/>&lt;=<sp/>CARD_REQUEST_RETRIES_ALLOWED;<sp/>++lastRequestRetries)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>on<sp/>retry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(rsp);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rspJsonStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trace<sp/>request<sp/>unless<sp/>suppressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isHeartbeat<sp/>&amp;&amp;<sp/>suppressShowTransactions<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a260d740972b2082c72f77b416713f5a0" kindref="member">NOTE_C_LOG_INFO</ref>(json);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In-place<sp/>replacement<sp/>of<sp/>NULL-terminator<sp/>with<sp/>a<sp/>newline<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Notecard<sp/>expects<sp/>a<sp/>newline-terminated<sp/>string<sp/>to<sp/>understand<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>the<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jsonLen<sp/>=<sp/>strlen(json);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json[jsonLen]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jsonTxLen;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHeartbeat)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Heartbeat<sp/>responses<sp/>have<sp/>no<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonTxLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonTxLen<sp/>=<sp/>(jsonLen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>the<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/>_Transaction(json,<sp/>jsonTxLen,<sp/>NULL,<sp/>transactionTimeoutMs);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>break;<sp/><sp/>//<sp/>No<sp/>response<sp/>expected<sp/>for<sp/>commands<sp/>and<sp/>no<sp/>ability<sp/>to<sp/>retry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/>_Transaction(json,<sp/>jsonTxLen,<sp/>&amp;rspJsonStr,<sp/>transactionTimeoutMs);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>NULL-terminator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json[jsonLen]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>retry<sp/>logic</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>transaction<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errStr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(rspJsonStr);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>an<sp/>I/O<sp/>error<sp/>on<sp/>the<sp/>transaction,<sp/>retry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__request_8c_1a1385294098059d94d366e2fd843358e5" kindref="member">NoteErrorContains</ref>(errStr,<sp/>c_ioerr))<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a7ac988c4204339520399f37a04eb4110" kindref="member">NOTE_C_LOG_WARN</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;retrying...<sp/>transaction<sp/>failure&quot;</highlight><highlight class="normal">,<sp/>c_iobad));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resetRequired<sp/>=<sp/>!_Reset();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DelayMs(RETRY_DELAY_MS);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>I/O<sp/>error,<sp/>retry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;transaction<sp/>failure&quot;</highlight><highlight class="normal">,<sp/>c_bad));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Fatal<sp/>error,<sp/>do<sp/>not<sp/>retry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;Command<sp/>successfully<sp/>sent<sp/>to<sp/>Notecard&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>response<sp/>expected<sp/>and<sp/>no<sp/>further<sp/>ability<sp/>to<sp/>retry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inspect<sp/>the<sp/>Notecard<sp/>Response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rspJsonStr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>response<sp/>is<sp/>NULL,<sp/>then<sp/>we<sp/>have<sp/>a<sp/>timeout<sp/>or<sp/>other<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/><ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;response<sp/>expected,<sp/>but<sp/>response<sp/>is<sp/>NULL<sp/>{io}&quot;</highlight><highlight class="normal">,<sp/>c_ioerr);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a7ac988c4204339520399f37a04eb4110" kindref="member">NOTE_C_LOG_WARN</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;retrying...<sp/>no<sp/>response&quot;</highlight><highlight class="normal">,<sp/>c_iobad));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DelayMs(RETRY_DELAY_MS);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>I/O<sp/>error,<sp/>retry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>sent<sp/>a<sp/>CRC<sp/>in<sp/>the<sp/>request,<sp/>examine<sp/>the<sp/>response<sp/>JSON<sp/>to<sp/>see<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>has<sp/>a<sp/>CRC<sp/>error.<sp/><sp/>Note<sp/>that<sp/>the<sp/>CRC<sp/>is<sp/>stripped<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rspJsonStr<sp/>as<sp/>a<sp/>side-effect<sp/>of<sp/>this<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crcAddedToRequest<sp/>&amp;&amp;<sp/>_crcError(rspJsonStr,<sp/>seqNo))<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(rspJsonStr);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/><ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;CRC<sp/>error<sp/>{io}&quot;</highlight><highlight class="normal">,<sp/>c_iobad);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a7ac988c4204339520399f37a04eb4110" kindref="member">NOTE_C_LOG_WARN</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;retrying...<sp/>CRC<sp/>error&quot;</highlight><highlight class="normal">,<sp/>c_iobad));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DelayMs(RETRY_DELAY_MS);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBadBin<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isIoError<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isHeartbeat<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>detection<sp/>/<sp/>classification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsp<sp/>=<sp/><ref refid="n__cjson_8h_1a0ddc9f5b66eb47b37db980a1ac6748be" kindref="member">JParse</ref>(rspJsonStr);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isBadBin<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp,<sp/>c_err,<sp/>c_badbinerr);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isIoError<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp,<sp/>c_err,<sp/>c_ioerr)<sp/>&amp;&amp;<sp/>!<ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp,<sp/>c_err,<sp/>c_unsupported);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isHeartbeat<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a31742b8fc463be8e85fe6f1b269bf9bb" kindref="member">JContainsString</ref>(rsp,<sp/>c_err,<sp/>c_heartbeat);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>to<sp/>parse<sp/>response<sp/>as<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isIoError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevel(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[ERROR]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevel(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>JSON<sp/>{io}:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DebugWithLevel(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>,<sp/>rspJsonStr);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(c_ioerr);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHeartbeat)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Heartbeat<sp/>responses<sp/>are<sp/>not<sp/>traditional<sp/>errors,<sp/>log<sp/>and<sp/>resume<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(rspJsonStr);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>status<sp/>=<sp/><ref refid="n__cjson__helpers_8c_1a66cca753ac78c92d0904ad74a33b8c92" kindref="member">JGetString</ref>(rsp,<sp/>c_status);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(status,<sp/>c_heartbeat));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_noteHeartbeat(status))<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/><ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;host<sp/>abandoned<sp/>transaction<sp/>{heartbeat}&quot;</highlight><highlight class="normal">,<sp/>c_heartbeat);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__request_8c_1a6c62afa66443f9dbb0a36bf9f76e9896" kindref="member">NoteResetRequired</ref>();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)status;<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>unused<sp/>variable<sp/>warning<sp/>when<sp/>NOTE_C_LOW_MEM<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--lastRequestRetries;<sp/></highlight><highlight class="comment">//<sp/>Heartbeats<sp/>do<sp/>not<sp/>count<sp/>against<sp/>retry<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isIoError<sp/>||<sp/>isBadBin)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" kindref="member">NOTE_C_LOG_ERROR</ref>(<ref refid="n__cjson__helpers_8c_1a66cca753ac78c92d0904ad74a33b8c92" kindref="member">JGetString</ref>(rsp,<sp/>c_err));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isBadBin)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" kindref="member">NOTE_C_LOG_DEBUG</ref>(</highlight><highlight class="stringliteral">&quot;{bad-bin}<sp/>errors<sp/>not<sp/>eligible<sp/>for<sp/>retry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Free(rspJsonStr);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errStr<sp/>=<sp/><ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;corrupt<sp/>response<sp/>{io}&quot;</highlight><highlight class="normal">,<sp/>c_ioerr);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a7ac988c4204339520399f37a04eb4110" kindref="member">NOTE_C_LOG_WARN</ref>(<ref refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" kindref="member">ERRSTR</ref>(</highlight><highlight class="stringliteral">&quot;retrying...<sp/>corrupt<sp/>response&quot;</highlight><highlight class="normal">,<sp/>c_iobad));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DelayMs(RETRY_DELAY_MS);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transaction<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>retry<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>original<sp/>serialized<sp/>JSON<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>_Free(json);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>processing<sp/>complete,<sp/>regardless<sp/>of<sp/>success<sp/>or<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>advance<sp/>the<sp/>request<sp/>sequence<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>seqNo++;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>an<sp/>empty<sp/>object<sp/>(with<sp/>no<sp/>err<sp/>field)<sp/>when<sp/>no<sp/>response<sp/>is<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmdFound)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockNotecard)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_TransactionStop();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__cjson_8h_1a1265d938bfff299c33d208367ec6d7cd" kindref="member">JCreateObject</ref>();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>error<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errStr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson_8h_1a200e39becef910970302806821377a02" kindref="member">JDelete</ref>(rsp);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__request_8c_1a6c62afa66443f9dbb0a36bf9f76e9896" kindref="member">NoteResetRequired</ref>();<sp/></highlight><highlight class="comment">//<sp/>queue<sp/>up<sp/>a<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*errRsp<sp/>=<sp/>_errDoc(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>errStr);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockNotecard)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_TransactionStop();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errRsp;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>and<sp/>discard<sp/>the<sp/>response<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(suppressShowTransactions<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a260d740972b2082c72f77b416713f5a0" kindref="member">NOTE_C_LOG_INFO</ref>(rspJsonStr);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>_Free(rspJsonStr);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>the<sp/>Notecard<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockNotecard)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inform<sp/>the<sp/>Notecard<sp/>that<sp/>the<sp/>transaction<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>the<sp/>Notecard<sp/>(ESP)<sp/>to<sp/>drop<sp/>into<sp/>low<sp/>power<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>_TransactionStop();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rsp;</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a6c62afa66443f9dbb0a36bf9f76e9896" kindref="member">NoteResetRequired</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>resetRequired<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a6358096b5a9e5c69a4f56b12e80092fa" kindref="member">NoteReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>resetRequired<sp/>=<sp/>!_Reset();</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!resetRequired;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a1385294098059d94d366e2fd843358e5" kindref="member">NoteErrorContains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errstr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errtype)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(strstr(errstr,<sp/>errtype)<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__request_8c_1a3b8d73d3dc3b3315b1be8260e83f10ab" kindref="member">NoteErrorClean</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf)</highlight></codeline>
<codeline lineno="780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end<sp/>=<sp/>&amp;errbuf[strlen(errbuf)+1];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*beginBrace<sp/>=<sp/>strchr(errbuf,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beginBrace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beginBrace&gt;errbuf<sp/>&amp;&amp;<sp/>*(beginBrace-1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginBrace--;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endBrace<sp/>=<sp/>strchr(beginBrace,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endBrace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*afterBrace<sp/>=<sp/>endBrace<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(beginBrace,<sp/>afterBrace,<sp/>end-afterBrace);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">uint64_t<sp/><ref refid="n__request_8c_1ae33aff884d3eeec8dc0e729f078f28cf" kindref="member">_n_atoh</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxLen)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ep<sp/>=<sp/>p+maxLen;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>ep)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lcase<sp/>=<sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>space<sp/>=<sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ucase<sp/>=<sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!digit<sp/>&amp;&amp;<sp/>!lcase<sp/>&amp;&amp;<sp/>!space<sp/>&amp;&amp;<sp/>!ucase)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>*=<sp/>16;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digit)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>ch<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lcase)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>10<sp/>+<sp/>(ch<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ucase)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>10<sp/>+<sp/>(ch<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lut[16]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,<sp/>0x1DB71064,<sp/>0x3B6E20C8,<sp/>0x26D930AC,<sp/>0x76DC4190,<sp/>0x6B6B51F4,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>0x4DB26158,<sp/>0x5005713C,<sp/>0xEDB88320,<sp/>0xF00F9344,<sp/>0xD6D6A3E8,<sp/>0xCB61B38C,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>0x9B64C2B0,<sp/>0x86D3D2D4,<sp/>0xA00AE278,<sp/>0xBDBDF21C</highlight></codeline>
<codeline lineno="840"><highlight class="normal">};</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal">NOTE_C_STATIC<sp/>int32_t<sp/>_crc32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>previousCrc32<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>crc<sp/>=<sp/>~previousCrc32;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>current<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>data;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length--)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>lut[(crc<sp/>^<sp/><sp/>*current<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;<sp/>0x0F]<sp/>^<sp/>(crc<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>lut[(crc<sp/>^<sp/>(*current<sp/>&gt;&gt;<sp/>4))<sp/>&amp;<sp/>0x0F]<sp/>^<sp/>(crc<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current++;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~crc;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_crcAdd(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/>uint16_t<sp/>seqno)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>block<sp/>the<sp/>size<sp/>of<sp/>the<sp/>input<sp/>json<sp/>plus<sp/>the<sp/>size<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>field<sp/>to<sp/>be<sp/>added.<sp/><sp/>Note<sp/>that<sp/>the<sp/>input<sp/>JSON<sp/>ends<sp/>in<sp/>&apos;&quot;}&apos;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>replaced<sp/>with<sp/>a<sp/>combination<sp/>of<sp/>4<sp/>hex<sp/>digits<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seqno<sp/>plus<sp/>8<sp/>hex<sp/>digits<sp/>of<sp/>the<sp/>CRC32,<sp/>and<sp/>the<sp/>&apos;}&apos;<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transformed<sp/>into<sp/>&apos;,&quot;crc&quot;:&quot;SSSS:CCCCCCCC&quot;}&apos;<sp/>where<sp/>SSSS<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seqno<sp/>and<sp/>CCCCCCCC<sp/>is<sp/>the<sp/>CRC32.<sp/><sp/>Note<sp/>that<sp/>the<sp/>comma<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replaced<sp/>with<sp/>a<sp/>space<sp/>if<sp/>the<sp/>input<sp/>json<sp/>doesn&apos;t<sp/>contain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>fields,<sp/>so<sp/>that<sp/>we<sp/>always<sp/>return<sp/>compliant<sp/>JSON.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jsonLen<sp/>=<sp/>strlen(json);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>JSON<sp/>is<sp/>&quot;{}&quot;<sp/>and<sp/>must<sp/>end<sp/>with<sp/>a<sp/>closing<sp/>&quot;}&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonLen<sp/>&lt;<sp/>2<sp/>||<sp/>json[jsonLen-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newJson<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>_Malloc(jsonLen+<ref refid="n__request_8c_1a8334a93acebb34e7bc188f767dc42f90" kindref="member">CRC_FIELD_LENGTH</ref>+1);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newJson<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmptyObject<sp/>=<sp/>(memchr(json,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">,<sp/>jsonLen)<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newJsonLen<sp/>=<sp/>jsonLen-1;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(newJson,<sp/>json,<sp/>newJsonLen);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/>(isEmptyObject<sp/>?<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson_8c_1ac6ddb64243b66cb4940c0e534f72d9bf" kindref="member">_n_htoa16</ref>(seqno,<sp/>(uint8_t<sp/>*)<sp/>&amp;newJson[newJsonLen]);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>newJsonLen<sp/>+=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1abd0243952793292731ee3493f0337ab5" kindref="member">_n_htoa32</ref>(_crc32(json,<sp/>jsonLen),<sp/>&amp;newJson[newJsonLen]);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>newJsonLen<sp/>+=<sp/>8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+22<sp/>==<sp/>CRC_FIELD_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>newJson[newJsonLen]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null-terminated<sp/>as<sp/>it<sp/>came<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newJson;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_crcError(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/>uint16_t<sp/>shouldBeSeqno)</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trim<sp/>whitespace<sp/>(specifically<sp/>&quot;\r\n&quot;)<sp/>for<sp/>CRC<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jsonLen<sp/>=<sp/>strlen(json);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(jsonLen<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>json[jsonLen<sp/>-<sp/>1]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonLen--;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>CRC<sp/>check<sp/>if<sp/>the<sp/>response<sp/>contains<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>JSON<sp/>string<sp/>begins<sp/>with<sp/>&quot;{&quot;.<sp/>Therefore,<sp/>the<sp/>presence<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>message<sp/>in<sp/>a<sp/>well-formed<sp/>JSON<sp/>string<sp/>MUST<sp/>result<sp/>in<sp/>a<sp/>non-zero<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(json,<sp/><ref refid="n__request_8c_1a302e523cec0a3e9548e90ded8c2faeae" kindref="member">ERR_FIELD_NAME_TEST</ref>))<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>if<sp/>invalid<sp/>JSON<sp/>or<sp/>is<sp/>too<sp/>short<sp/>to<sp/>contain<sp/>a<sp/>CRC<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>length<sp/>is<sp/>&quot;{}&quot;<sp/>(2<sp/>bytes)<sp/>+<sp/>CRC_FIELD_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>JSON<sp/>ends<sp/>with<sp/>a<sp/>closing<sp/>&quot;}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((jsonLen<sp/>&lt;<sp/>(<ref refid="n__request_8c_1a8334a93acebb34e7bc188f767dc42f90" kindref="member">CRC_FIELD_LENGTH</ref><sp/>+<sp/>2))<sp/>||<sp/>(json[jsonLen<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>it<sp/>has<sp/>a<sp/>compliant<sp/>CRC<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fieldOffset<sp/>=<sp/>((jsonLen<sp/>-<sp/>1)<sp/>-<sp/><ref refid="n__request_8c_1a8334a93acebb34e7bc188f767dc42f90" kindref="member">CRC_FIELD_LENGTH</ref>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(&amp;json[fieldOffset<sp/>+<sp/><ref refid="n__request_8c_1a370d78366b4c13731108b1afd745b4ce" kindref="member">CRC_FIELD_NAME_OFFSET</ref>],<sp/><ref refid="n__request_8c_1ac5f2372cc25a915c8dccd2924c7c6f19" kindref="member">CRC_FIELD_NAME_TEST</ref>,<sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="n__request_8c_1ac5f2372cc25a915c8dccd2924c7c6f19" kindref="member">CRC_FIELD_NAME_TEST</ref>)<sp/>-<sp/>1))<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;ve<sp/>seen<sp/>a<sp/>CRC<sp/>before,<sp/>we<sp/>should<sp/>see<sp/>one<sp/>every<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardFirmwareSupportsCrc;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>we&apos;ve<sp/>seen<sp/>at<sp/>least<sp/>one<sp/>CRC<sp/>from<sp/>the<sp/>Notecard,<sp/>so<sp/>we<sp/>should<sp/>expect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardFirmwareSupportsCrc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>CRC<sp/>field<sp/>and<sp/>the<sp/>sequence<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>&amp;json[fieldOffset<sp/>+<sp/><ref refid="n__request_8c_1a370d78366b4c13731108b1afd745b4ce" kindref="member">CRC_FIELD_NAME_OFFSET</ref><sp/>+<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="n__request_8c_1ac5f2372cc25a915c8dccd2924c7c6f19" kindref="member">CRC_FIELD_NAME_TEST</ref>)<sp/>-<sp/>1)];</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>actualSeqno<sp/>=<sp/>(uint16_t)<sp/><ref refid="n__request_8c_1ae33aff884d3eeec8dc0e729f078f28cf" kindref="member">_n_atoh</ref>(p,<sp/>4);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>actualCrc32<sp/>=<sp/>(uint32_t)<sp/><ref refid="n__request_8c_1ae33aff884d3eeec8dc0e729f078f28cf" kindref="member">_n_atoh</ref>(p+5,<sp/>8);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>json[fieldOffset++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>json[fieldOffset]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>shouldBeCrc32<sp/>=<sp/>_crc32(json,<sp/>fieldOffset);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(shouldBeSeqno<sp/>!=<sp/>actualSeqno<sp/>||<sp/>shouldBeCrc32<sp/>!=<sp/>actualCrc32);</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/note-c/note-c/n_request.c"/>
  </compounddef>
</doxygen>
