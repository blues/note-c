<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="n__hooks_8c" kind="file" language="C++">
    <compoundname>n_hooks.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">n_lib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/note-c/note-c/n_hooks.c</label>
        <link refid="n__hooks_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="6">
        <label>n_lib.h</label>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="n__hooks_8c_1a2c23dd59243eb4f2501fe69cde1deea9" prot="public" static="no">
        <name>NOTE_C_SHOW_MALLOC</name>
        <initializer>false</initializer>
        <briefdescription>
<para>Show malloc operations for debugging in very low mem environments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="33" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* nNoteResetFn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>nNoteResetFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="190" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="n__hooks_8c_1a753312e174bebcad9a3ecf0fa96821a9" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char *(* nTransactionFn) (const char *, size_t, char **, uint32_t)</definition>
        <argsstring>)(const char *, size_t, char **, uint32_t)</argsstring>
        <name>nTransactionFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="191" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="n__hooks_8c_1a13a0e59f2661e0014727cb4b3ddc0a80" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char *(* nReceiveFn) (uint8_t *, uint32_t *, bool, uint32_t, uint32_t *)</definition>
        <argsstring>)(uint8_t *, uint32_t *, bool, uint32_t, uint32_t *)</argsstring>
        <name>nReceiveFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="192" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="n__hooks_8c_1afcd9a6b3c1dd2d7f0ec6ffebb77142f5" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char *(* nTransmitFn) (uint8_t *, uint32_t, bool)</definition>
        <argsstring>)(uint8_t *, uint32_t, bool)</argsstring>
        <name>nTransmitFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="193" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="193" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref></type>
        <definition>debugOutputFn hookDebugOutput</definition>
        <argsstring></argsstring>
        <name>hookDebugOutput</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s debug interface, if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="45" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookLockI2C</definition>
        <argsstring></argsstring>
        <name>hookLockI2C</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C lock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="51" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookUnlockI2C</definition>
        <argsstring></argsstring>
        <name>hookUnlockI2C</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C unlock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="57" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookLockNote</definition>
        <argsstring></argsstring>
        <name>hookLockNote</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Notecard lock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="63" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookUnlockNote</definition>
        <argsstring></argsstring>
        <name>hookUnlockNote</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Notecard lock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="69" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a2862300245c7f82df19c4f3a3a79f759" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref></type>
        <definition>txnStartFn hookTransactionStart</definition>
        <argsstring></argsstring>
        <name>hookTransactionStart</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s transaction initiation function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="75" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1aee65145a7f7916880913d039ee9dec70" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref></type>
        <definition>txnStopFn hookTransactionStop</definition>
        <argsstring></argsstring>
        <name>hookTransactionStop</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s transaction completion function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="81" column="18" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
        <definition>mallocFn hookMalloc</definition>
        <argsstring></argsstring>
        <name>hookMalloc</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s memory allocation function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="87" column="17" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
        <definition>freeFn hookFree</definition>
        <argsstring></argsstring>
        <name>hookFree</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s memory free function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="93" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
        <definition>delayMsFn hookDelayMs</definition>
        <argsstring></argsstring>
        <name>hookDelayMs</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s delay function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="99" column="18" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
        <definition>getMsFn hookGetMs</definition>
        <argsstring></argsstring>
        <name>hookGetMs</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s millis timing function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="105" column="16" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a48f69fbeca8948317c8f049b03a85f46" prot="public" static="yes" mutable="no">
        <type>volatile int</type>
        <definition>volatile int hookActiveInterface</definition>
        <argsstring></argsstring>
        <name>hookActiveInterface</name>
        <initializer>= <ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref></initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s current active interface. Value is one of: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>NOTE_C_INTERFACE_NONE (default)</para>
</listitem><listitem><para>NOTE_C_INTERFACE_SERIAL</para>
</listitem><listitem><para>NOTE_C_INTERFACE_I2C </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="115" column="21" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a8b924ad75dc42dbb9f55e39bbb383e53" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
        <definition>serialResetFn hookSerialReset</definition>
        <argsstring></argsstring>
        <name>hookSerialReset</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial reset function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="122" column="22" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1adc5dbf6a449a062dc2ce585b377e01c8" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
        <definition>serialTransmitFn hookSerialTransmit</definition>
        <argsstring></argsstring>
        <name>hookSerialTransmit</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial transmit function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="128" column="25" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a85a763552201e904319a46d7bbaffb2f" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
        <definition>serialAvailableFn hookSerialAvailable</definition>
        <argsstring></argsstring>
        <name>hookSerialAvailable</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial data available function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="134" column="26" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1abb53cb4c8b5875405005a10f8e5dd276" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
        <definition>serialReceiveFn hookSerialReceive</definition>
        <argsstring></argsstring>
        <name>hookSerialReceive</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial receive function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="140" column="24" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t i2cAddress</definition>
        <argsstring></argsstring>
        <name>i2cAddress</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="146" column="17" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t i2cMax</definition>
        <argsstring></argsstring>
        <name>i2cMax</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C maximum segment size, in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="152" column="17" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a57e8dca746e7d85e7eabfb0b7bee4572" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
        <definition>i2cResetFn hookI2CReset</definition>
        <argsstring></argsstring>
        <name>hookI2CReset</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C reset function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="158" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1aa0d2d6474eba5963389d55f795968cb6" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
        <definition>i2cTransmitFn hookI2CTransmit</definition>
        <argsstring></argsstring>
        <name>hookI2CTransmit</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s transmit function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="164" column="22" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a263455cdbf1fc17b92a975c7535f1950" prot="public" static="yes" mutable="no">
        <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
        <definition>i2cReceiveFn hookI2CReceive</definition>
        <argsstring></argsstring>
        <name>hookI2CReceive</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C receive function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="170" column="21" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a5064ea7aba8d5bddc160b2a5e9bfc33f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int noteLogLevel</definition>
        <argsstring></argsstring>
        <name>noteLogLevel</name>
        <initializer>= <ref refid="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" kindref="member">NOTE_C_LOG_LEVEL</ref></initializer>
        <briefdescription>
<para>Variable used to determine the runtime logging level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="186" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a8737ad3248b6dac65e86ef1a25006214" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" kindref="member">nNoteResetFn</ref></type>
        <definition>nNoteResetFn notecardReset</definition>
        <argsstring></argsstring>
        <name>notecardReset</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="194" column="21" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a53f1359b15079660b271b90d656ed834" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1a753312e174bebcad9a3ecf0fa96821a9" kindref="member">nTransactionFn</ref></type>
        <definition>nTransactionFn notecardTransaction</definition>
        <argsstring></argsstring>
        <name>notecardTransaction</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="195" column="23" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a6592398c3b60ccf3c888358512213f2e" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1a13a0e59f2661e0014727cb4b3ddc0a80" kindref="member">nReceiveFn</ref></type>
        <definition>nReceiveFn notecardChunkedReceive</definition>
        <argsstring></argsstring>
        <name>notecardChunkedReceive</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="196" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1ae93982124c2907135e221064abb3abcc" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1afcd9a6b3c1dd2d7f0ec6ffebb77142f5" kindref="member">nTransmitFn</ref></type>
        <definition>nTransmitFn notecardChunkedTransmit</definition>
        <argsstring></argsstring>
        <name>notecardChunkedTransmit</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="197" column="20" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="197" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="n__hooks_8c_1a77448627bb79c6051b577ad344b14fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int NoteGetActiveInterface</definition>
        <argsstring>(void)</argsstring>
        <name>NoteGetActiveInterface</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the active, platform-specific communications method. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the currently active communication interface.</para>
<para><simplesect kind="return"><para>The active interface. One of:<itemizedlist>
<listitem><para>NOTE_C_INTERFACE_NONE (default)</para>
</listitem><listitem><para>NOTE_C_INTERFACE_SERIAL</para>
</listitem><listitem><para>NOTE_C_INTERFACE_I2C </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="209" column="5" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ab0f74f15fe12ad4340180f6c38a49c2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _noteSetActiveInterface</definition>
        <argsstring>(int interface)</argsstring>
        <name>_noteSetActiveInterface</name>
        <param>
          <type>int</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="214" column="13" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="214" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a8b4baf1bb5b117eb312682e215e8f209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetActiveInterface</definition>
        <argsstring>(int interface)</argsstring>
        <name>NoteSetActiveInterface</name>
        <param>
          <type>int</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
<para>Set the active communication interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired interface to use. One of:<itemizedlist>
<listitem><para>NOTE_C_INTERFACE_NONE (default)</para>
</listitem><listitem><para>NOTE_C_INTERFACE_SERIAL</para>
</listitem><listitem><para>NOTE_C_INTERFACE_I2C</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="241" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="241" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a57a711029fed4148da73679ff2c8a154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDefault</definition>
        <argsstring>(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn)</argsstring>
        <name>NoteSetFnDefault</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>millisfn</declname>
        </param>
        <briefdescription>
<para>Set the default system functions (memory allocation, delay, timing). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory allocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory deallocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for millisecond delays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to get millisecond counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>These functions are used if no other system functions are set. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="248" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="248" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ad334248744d5387da78ca09c3498f397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFn</definition>
        <argsstring>(mallocFn mallocHook, freeFn freeHook, delayMsFn delayMsHook, getMsFn getMsHook)</argsstring>
        <name>NoteSetFn</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freeHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayMsHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>getMsHook</declname>
        </param>
        <briefdescription>
<para>Set the system hook functions (memory allocation, delay, timing). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory allocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for memory deallocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function for millisecond delays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to get millisecond counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function overrides any previously set system functions. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="266" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="266" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a6844f5cd4d6e38d65c090dba954321b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDebugOutput</definition>
        <argsstring>(debugOutputFn fn)</argsstring>
        <name>NoteSetFnDebugOutput</name>
        <param>
          <type><ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the debug output function hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the debug output function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="294" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="294" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a6101cadde16da16c179c1a3f0842b4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _noteIsDebugOutputActive</definition>
        <argsstring>(void)</argsstring>
        <name>_noteIsDebugOutputActive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if a debug output function has been set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether a debug ouput function was provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="308" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a946facc30c7f3b5f1820db01fde9fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnTransaction</definition>
        <argsstring>(txnStartFn startFn, txnStopFn stopFn)</argsstring>
        <name>NoteSetFnTransaction</name>
        <param>
          <type><ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref></type>
          <declname>startFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref></type>
          <declname>stopFn</declname>
        </param>
        <briefdescription>
<para>Set the transaction hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when starting a transaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when stopping a transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="313" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="313" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a81210c0d43535f1945083f7b3fcad67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn, mutexFn lockNotefn, mutexFn unlockNotefn)</argsstring>
        <name>NoteSetFnMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockNotefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockNotefn</declname>
        </param>
        <briefdescription>
<para>Set the mutex functions for I2C and Notecard access protection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock I2C access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock I2C access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock Notecard access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock Notecard access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="321" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a6879f42e34e075aec82b499fd5ddd12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2CMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn)</argsstring>
        <name>NoteSetFnI2CMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <briefdescription>
<para>Set the I2C mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock I2C access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock I2C access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="329" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a534aa37f7e753dd06a847f429f8e743f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnNoteMutex</definition>
        <argsstring>(mutexFn lockFn, mutexFn unlockFn)</argsstring>
        <name>NoteSetFnNoteMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockFn</declname>
        </param>
        <briefdescription>
<para>Set the Notecard mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to lock Notecard access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to unlock Notecard access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="335" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a85c66fdcef6d9ea044a9adc37af5afa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnSerial</definition>
        <argsstring>(serialResetFn resetFn, serialTransmitFn transmitFn, serialAvailableFn availFn, serialReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnSerial</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific serial communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the serial peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via serial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to check if serial data is available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive serial data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function overrides any previously set serial functions. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to serial. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="341" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="341" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aa0d08eb556c9cf1ec28c3cd5f86d3eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnSerialDefault</definition>
        <argsstring>(serialResetFn resetFn, serialTransmitFn transmitFn, serialAvailableFn availFn, serialReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnSerialDefault</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the default serial communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the serial peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via serial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to check if serial data is available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive serial data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>These functions are used if no other serial functions are set. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to serial, if unset. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="356" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="356" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1abeb555883ff039880048164763c3b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2C</definition>
        <argsstring>(uint32_t notecardAddr, uint32_t maxTransmitSize, i2cResetFn resetFn, i2cTransmitFn transmitFn, i2cReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnI2C</name>
        <param>
          <type>uint32_t</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific I2C communication hook functions, address and MTU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C address of the Notecard (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to transmit in a single I2C segment (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the I2C peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via I2C. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive data via I2C.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function overrides any previously set I2C functions. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to I2C. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="381" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="381" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a840dff8348b52999ccc3b1673a3170df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2CDefault</definition>
        <argsstring>(uint32_t notecardAddr, uint32_t maxTransmitSize, i2cResetFn resetFn, i2cTransmitFn transmitFn, i2cReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnI2CDefault</name>
        <param>
          <type>uint32_t</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the default I2C communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C address of the Notecard (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to transmit in a single I2C segment (0 for default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to reset the I2C peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to transmit data via I2C. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific function to receive data via I2C.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>These functions are used if no other I2C functions are set. </para>
</simplesect>
<simplesect kind="note"><para>This operation will set the active interface to I2C, if unset. </para>
</simplesect>
<simplesect kind="note"><para>This operation will lock Notecard access while in progress, if Notecard mutex functions have been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="399" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="399" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a8648db242df0d5ac68334ab93ee5fa0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDisabled</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSetFnDisabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set the platform-specific communications method to be disabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Disable all Notecard communication functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="433" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="433" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a8b39ccd734b1d0602cf6f3612a25e5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetLogLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>NoteSetLogLevel</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the current log level for debug output filtering. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level to set:<itemizedlist>
<listitem><para>NOTE_C_LOG_LEVEL_ERROR</para>
</listitem><listitem><para>NOTE_C_LOG_LEVEL_WARN</para>
</listitem><listitem><para>NOTE_C_LOG_LEVEL_INFO</para>
</listitem><listitem><para>NOTE_C_LOG_LEVEL_DEBUG </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="444" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="444" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a17c60e911144d80329e264eba37e215d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugIntln</definition>
        <argsstring>(const char *msg, int n)</argsstring>
        <name>NoteDebugIntln</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Output a debug message with an integer value appended, terminated by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to append to the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="453" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="453" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1afac93e9bae7c5cc4c7094f41accde0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugln</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>NoteDebugln</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message followed by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="464" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="464" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1acc098e468887e7622ee6ecda06fe1fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebug</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>NoteDebug</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="474" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="474" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevel</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevel</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message with a specified log level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level for this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The message will be dropped if the specified level is less than or equal to the current log level. </para>
</simplesect>
<simplesect kind="note"><para>See the NOTE_C_LOG_LEVEL_* macros for possible values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="485" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="485" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aea4a872558f91cfdba679dea15e39b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevelLn</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevelLn</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output a debug message with a specified log level, followed by a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level for this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The message will be dropped if the specified level is less than or equal to the current log level. </para>
</simplesect>
<simplesect kind="note"><para>See the NOTE_C_LOG_LEVEL_* macros for possible values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="499" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="499" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a4dcd12c5b2ec9d2acd78363a2e41e698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteGetMs</definition>
        <argsstring>(void)</argsstring>
        <name>NoteGetMs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current milliseconds value from the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the current millisecond counter value.</para>
<para><simplesect kind="return"><para>The current milliseconds value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="520" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="520" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a30ebf8f80fc647865819c842adc53816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDelayMs</definition>
        <argsstring>(uint32_t ms)</argsstring>
        <name>NoteDelayMs</name>
        <param>
          <type>uint32_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Use platform hook to delay for the specified number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milliseconds to delay. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="528" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="528" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1abd0243952793292731ee3493f0337ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _n_htoa32</definition>
        <argsstring>(uint32_t n, char *p)</argsstring>
        <name>_n_htoa32</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Convert number to a hex string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to return it into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="544" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="544" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ae66d7015d2a0810abfc656b88e6e6a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * NoteMalloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>NoteMalloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory chunk using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of bytes to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated memory, or NULL if allocation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="569" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="569" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a34e3da9b2215a8b7052dccc2365e3085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>NoteFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="595" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="595" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a195386217d2b20709846d45780af2013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteLockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteLockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para>Lock I2C access for thread safety. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="616" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="616" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a2a4589fef84a01f2a1bee1c5a7053fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteUnlockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteUnlockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlock I2C access. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="628" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="628" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1afd46ace1fd670f07801485fcb580335c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _noteLockNote</definition>
        <argsstring>(void)</argsstring>
        <name>_noteLockNote</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the Notecard using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="657" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="657" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a021742c6f823672fe1a65a4a44456bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _noteUnlockNote</definition>
        <argsstring>(void)</argsstring>
        <name>_noteUnlockNote</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock the Notecard using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="669" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="669" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a072fdb2cc28eaa8f3ce69d1319d2e928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _noteTransactionStart</definition>
        <argsstring>(uint32_t timeoutMs)</argsstring>
        <name>_noteTransactionStart</name>
        <param>
          <type>uint32_t</type>
          <declname>timeoutMs</declname>
        </param>
        <briefdescription>
<para>Indicate that we&apos;re initiating a transaction using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="681" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="681" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aa6aeb469e576179e87b4656bb1fac0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _noteTransactionStop</definition>
        <argsstring>(void)</argsstring>
        <name>_noteTransactionStop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Indicate that we&apos;ve completed a transaction using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="694" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="694" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a3454c54d190d3a03d748ca2b38c57a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnDebugOutput</definition>
        <argsstring>(debugOutputFn *fn)</argsstring>
        <name>NoteGetFnDebugOutput</name>
        <param>
          <type><ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref> *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Get the currently set debug output function hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current debug output function pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="701" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="701" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a0bb77ab0431d89f36ff32ecbb6b005fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnTransaction</definition>
        <argsstring>(txnStartFn *startFn, txnStopFn *stopFn)</argsstring>
        <name>NoteGetFnTransaction</name>
        <param>
          <type><ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref> *</type>
          <declname>startFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref> *</type>
          <declname>stopFn</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific transaction hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current transaction start function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current transaction stop function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="725" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="725" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a357a6aca3b4ea07d29f521884f1875a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnMutex</definition>
        <argsstring>(mutexFn *lockI2Cfn, mutexFn *unlockI2Cfn, mutexFn *lockNotefn, mutexFn *unlockNotefn)</argsstring>
        <name>NoteGetFnMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockNotefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockNotefn</declname>
        </param>
        <briefdescription>
<para>Get the currently set mutex functions for I2C and Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C unlock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Note lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Note unlock function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="737" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="737" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a14670a712ba4812bdbaaddbf3189f1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnI2CMutex</definition>
        <argsstring>(mutexFn *lockI2Cfn, mutexFn *unlockI2Cfn)</argsstring>
        <name>NoteGetFnI2CMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockI2Cfn</declname>
        </param>
        <briefdescription>
<para>Get the currently set I2C mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C unlock function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="754" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="754" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1abc8585fc3143b157ac27fc5938378249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnNoteMutex</definition>
        <argsstring>(mutexFn *lockFn, mutexFn *unlockFn)</argsstring>
        <name>NoteGetFnNoteMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>lockFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref> *</type>
          <declname>unlockFn</declname>
        </param>
        <briefdescription>
<para>Get the currently set Notecard mutex functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Notecard lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Notecard unlock function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="764" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="764" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a7f3bdc32e515a57d8cfe959cc021b76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFn</definition>
        <argsstring>(mallocFn *mallocHook, freeFn *freeHook, delayMsFn *delayMsHook, getMsFn *getMsHook)</argsstring>
        <name>NoteGetFn</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref> *</type>
          <declname>mallocHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref> *</type>
          <declname>freeHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref> *</type>
          <declname>delayMsHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref> *</type>
          <declname>getMsHook</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific memory and timing hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current memory allocation function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current memory deallocation function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current delay function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current millisecond counter function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="774" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="774" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a2bd990e82a522241e86b03bbcbb6bb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnSerial</definition>
        <argsstring>(serialResetFn *resetFn, serialTransmitFn *transmitFn, serialAvailableFn *availFn, serialReceiveFn *receiveFn)</argsstring>
        <name>NoteGetFnSerial</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref> *</type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref> *</type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref> *</type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref> *</type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific serial communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial available function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current serial receive function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="793" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="793" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a16d6a60ccab426ff4311c590e909c8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetFnI2C</definition>
        <argsstring>(uint32_t *notecardAddr, uint32_t *maxTransmitSize, i2cResetFn *resetFn, i2cTransmitFn *transmitFn, i2cReceiveFn *receiveFn)</argsstring>
        <name>NoteGetFnI2C</name>
        <param>
          <type>uint32_t *</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref> *</type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref> *</type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref> *</type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Get the platform-specific I2C communication hook functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current Notecard I2C address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current maximum transmit size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C receive function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any of the passed in pointers can be NULL if the caller is not interested in that particular function pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="812" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="812" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aa23d9b92604e9b490710a707cd0aa37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetI2CAddress</definition>
        <argsstring>(uint32_t *i2cAddr)</argsstring>
        <name>NoteGetI2CAddress</name>
        <param>
          <type>uint32_t *</type>
          <declname>i2cAddr</declname>
        </param>
        <briefdescription>
<para>Get the current I2C address for Notecard communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i2cAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="835" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="835" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ad5d209218245579877cdbfb667208dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteGetI2CMtu</definition>
        <argsstring>(uint32_t *i2cMtu)</argsstring>
        <name>NoteGetI2CMtu</name>
        <param>
          <type>uint32_t *</type>
          <declname>i2cMtu</declname>
        </param>
        <briefdescription>
<para>Get the current MTU for I2C communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The MTU is the maximum number of bytes that can be sent to or received from the Notecard in a single I2C transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i2cMtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current I2C MTU. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="842" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="842" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a7f58c813abb147c229e40a9a788b207a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _noteSerialReset</definition>
        <argsstring>(void)</argsstring>
        <name>_noteSerialReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset the Serial bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the Serial bus was reset successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="855" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="855" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a8caed79901b583db2f73a5ee83a8af10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _noteSerialTransmit</definition>
        <argsstring>(uint8_t *text, size_t len, bool flush)</argsstring>
        <name>_noteSerialTransmit</name>
        <param>
          <type>uint8_t *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Transmit bytes over Serial using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> to flush the bytes upon transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="871" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="871" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a459939c3c18d1f280524204128d2f0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _noteSerialAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>_noteSerialAvailable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if Serial bus is available using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the Serial bus is available to read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="885" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="885" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aaee728c30e45215635c9e765d92cc41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char _noteSerialReceive</definition>
        <argsstring>(void)</argsstring>
        <name>_noteSerialReceive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain a character from the Serial bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A character from the Serial bus. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="900" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="900" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1adc22665fff87637952f0f020725d0dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _noteI2CReset</definition>
        <argsstring>(uint16_t DevAddress)</argsstring>
        <name>_noteI2CReset</name>
        <param>
          <type>uint16_t</type>
          <declname>DevAddress</declname>
        </param>
        <briefdescription>
<para>Reset the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the I2C bus was reset successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="914" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="914" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a34012db92ae2a71ecd304cdede054bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * _noteI2CTransmit</definition>
        <argsstring>(uint16_t DevAddress, uint8_t *pBuffer, uint16_t Size)</argsstring>
        <name>_noteI2CTransmit</name>
        <param>
          <type>uint16_t</type>
          <declname>DevAddress</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
<para>Transmit bytes over I2C using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DevAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C address for transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string from the platform-specific hook, or an error string if the bus is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="932" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="932" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aeaeed60584fb47e2d3b70ab0688af9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * _noteI2CReceive</definition>
        <argsstring>(uint16_t DevAddress, uint8_t *pBuffer, uint16_t Size, uint32_t *available)</argsstring>
        <name>_noteI2CReceive</name>
        <param>
          <type>uint16_t</type>
          <declname>DevAddress</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>available</declname>
        </param>
        <briefdescription>
<para>Receive bytes from I2C using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DevAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C address for transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>(out) A buffer in which to place received bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>(out) The number of bytes left to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string from the platform-specific hook, or an error string if the bus is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="951" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a57dcffb142faaef2714839d27afe5be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CAddress</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CAddress</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the I2C address of the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the current I2C address being used for Notecard communication.</para>
<para><simplesect kind="return"><para>The current I2C address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="965" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="965" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a057865626ae6b0fe8e456056c581a7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetI2CAddress</definition>
        <argsstring>(uint32_t i2cAddr)</argsstring>
        <name>NoteSetI2CAddress</name>
        <param>
          <type>uint32_t</type>
          <declname>i2cAddr</declname>
        </param>
        <briefdescription>
<para>Set the I2C address for Notecard communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2cAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address to use for the Notecard. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="973" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="973" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a5464955345634f810de1360880a629c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetI2CMtu</definition>
        <argsstring>(uint32_t i2cMtu)</argsstring>
        <name>NoteSetI2CMtu</name>
        <param>
          <type>uint32_t</type>
          <declname>i2cMtu</declname>
        </param>
        <briefdescription>
<para>Set the MTU for I2C communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The MTU is the maximum number of bytes that can be sent to or received from the Notecard in a single I2C transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2cMtu</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum transmission unit (MTU) for I2C communication. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="978" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="978" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a35bbb8179be3a72ab7ec302dcbfad9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CMax</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CMax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine the maximum number of bytes for each segment of data sent to the Notecard over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the current MTU for I2C communication with the Notecard.</para>
<para><simplesect kind="return"><para>A 32-bit integer of the maximum number of bytes per I2C segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="990" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="990" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a773fd9eb553ff57f86937b75c2dbc384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _noteHardReset</definition>
        <argsstring>(void)</argsstring>
        <name>_noteHardReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform a hard reset on the Notecard using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the Notecard has been reset successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="1011" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="1011" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a9008e01443608aa771d06afd7ff32d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * _noteJSONTransaction</definition>
        <argsstring>(const char *request, size_t reqLen, char **response, uint32_t timeoutMs)</argsstring>
        <name>_noteJSONTransaction</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reqLen</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>response</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutMs</declname>
        </param>
        <briefdescription>
<para>Perform a JSON request to the Notecard using the currently-set platform hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the JSON request object, which MUST BE terminated with a newline character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reqLen</parametername>
</parameternamelist>
<parameterdescription>
<para>the string length of the JSON request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] A c-string buffer that will contain the newline (&apos;<linebreak/>
&apos;) terminated JSON response from the Notercard. If NULL, no response will be captured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in milliseconds, to wait for data to arrive. Passing zero (0) disables the timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if successful, or an error string if the transaction failed or the hook has not been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="1038" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="1038" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ab9ee4728c0004f1fb57d58ee0514e66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * _noteChunkedReceive</definition>
        <argsstring>(uint8_t *buffer, uint32_t *size, bool delay, uint32_t timeoutMs, uint32_t *available)</argsstring>
        <name>_noteChunkedReceive</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutMs</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>available</declname>
        </param>
        <briefdescription>
<para>Receive bytes over from the Notecard using the currently-set platform hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to receive bytes into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>(in/out)<itemizedlist>
<listitem><para>(in) The size of the buffer in bytes.</para>
</listitem><listitem><para>(out) The length of the received data in bytes. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Respect standard processing delays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in milliseconds, to wait for data to arrive. Passing zero (0) disables the timeout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>(in/out)<itemizedlist>
<listitem><para>(in) The amount of bytes to request. Sending zero (0) will initiate a priming query when using the I2C interface.</para>
</listitem><listitem><para>(out) The amount of bytes unable to fit into the provided buffer. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string with an error, or <computeroutput>NULL</computeroutput> if no error ocurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="1064" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="1064" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ae370bfa806a398890b3cdbd6bc0d0aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * _noteChunkedTransmit</definition>
        <argsstring>(uint8_t *buffer, uint32_t size, bool delay)</argsstring>
        <name>_noteChunkedTransmit</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Transmit bytes over to the Notecard using the currently-set platform hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of bytes in the buffer to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Respect standard processing delays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string with an error, or <computeroutput>NULL</computeroutput> if no error ocurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="1083" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="1083" bodyend="1089"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Hooks allow libraries dependent on note-c to provide platform- or MCU-specific functions for common functions like I2C locking/unlocking, memory allocation and freeing, delays, and communicating with the Notecard over I2C and Serial. Using these hooks, note-c is able to manage Notecard transaction logic, and defer to platform functionality, when needed.</para>
<para>Written by Ray Ozzie and Blues Inc. team.</para>
<para>Copyright (c) 2019 Blues Inc. MIT License. Use of this source code is governed by licenses granted by the copyright holder including that found in the <ulink url="https://github.com/blues/note-c/blob/master/LICENSE">LICENSE</ulink> file. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;n_lib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="31"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_SHOW_MALLOC<sp/><sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_C_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Externalized<sp/>Hooks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="56"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref><sp/>hookTransactionStart<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref><sp/>hookTransactionStop<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>hookMalloc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>hookFree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>hookDelayMs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>hookGetMs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hookActiveInterface<sp/>=<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>hookSerialReset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>hookSerialTransmit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="133"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>hookSerialAvailable<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="139"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>hookSerialReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="145"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">NOTE_C_STATIC<sp/>uint32_t<sp/>i2cAddress<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="151"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">NOTE_C_STATIC<sp/>uint32_t<sp/>i2cMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>hookI2CReset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>hookI2CTransmit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="169"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>hookI2CReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">NOTE_C_STATIC<sp/>heartbeatFn<sp/>hookHeartbeat<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hookHeartbeatContext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noteLogLevel<sp/>=<sp/><ref refid="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" kindref="member">NOTE_C_LOG_LEVEL</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>hooks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" kindref="member">nNoteResetFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*nTransactionFn)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*nReceiveFn)<sp/>(uint8_t<sp/>*,<sp/>uint32_t<sp/>*,<sp/>bool,<sp/>uint32_t,<sp/>uint32_t<sp/>*);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*nTransmitFn)<sp/>(uint8_t<sp/>*,<sp/>uint32_t,<sp/>bool);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" kindref="member">nNoteResetFn</ref><sp/>notecardReset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__hooks_8c_1a753312e174bebcad9a3ecf0fa96821a9" kindref="member">nTransactionFn</ref><sp/>notecardTransaction<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__hooks_8c_1a13a0e59f2661e0014727cb4b3ddc0a80" kindref="member">nReceiveFn</ref><sp/>notecardChunkedReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">NOTE_C_STATIC<sp/><ref refid="n__hooks_8c_1afcd9a6b3c1dd2d7f0ec6ffebb77142f5" kindref="member">nTransmitFn</ref><sp/>notecardChunkedTransmit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a77448627bb79c6051b577ad344b14fb2" kindref="member">NoteGetActiveInterface</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookActiveInterface;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_noteSetActiveInterface(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interface)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>hookActiveInterface<sp/>=<sp/>interface;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(interface)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref>:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardReset<sp/>=<sp/>_serialNoteReset;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardTransaction<sp/>=<sp/>_serialNoteTransaction;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardChunkedReceive<sp/>=<sp/>_serialChunkedReceive;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardChunkedTransmit<sp/>=<sp/>_serialChunkedTransmit;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref>:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardReset<sp/>=<sp/>_i2cNoteReset;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardTransaction<sp/>=<sp/>_i2cNoteTransaction;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardChunkedReceive<sp/>=<sp/>_i2cNoteChunkedReceive;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardChunkedTransmit<sp/>=<sp/>_i2cNoteChunkedTransmit;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookActiveInterface<sp/>=<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>;<sp/></highlight><highlight class="comment">//<sp/>unrecognized<sp/>interfaces<sp/>are<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardReset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardTransaction<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardChunkedReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecardChunkedTransmit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a8b4baf1bb5b117eb312682e215e8f209" kindref="member">NoteSetActiveInterface</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interface)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>_noteSetActiveInterface(interface);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a57a711029fed4148da73679ff2c8a154" kindref="member">NoteSetFnDefault</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocfn,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freefn,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayfn,<sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>millisfn)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookMalloc<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookMalloc<sp/>=<sp/>mallocfn;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookFree<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookFree<sp/>=<sp/>freefn;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookDelayMs<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookDelayMs<sp/>=<sp/>delayfn;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookGetMs<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookGetMs<sp/>=<sp/>millisfn;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1ad334248744d5387da78ca09c3498f397" kindref="member">NoteSetFn</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocHook,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freeHook,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayMsHook,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>getMsHook)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>hookMalloc<sp/>=<sp/>mallocHook;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>hookFree<sp/>=<sp/>freeHook;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>hookDelayMs<sp/>=<sp/>delayMsHook;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>hookGetMs<sp/>=<sp/>getMsHook;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="284"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteSetFnHeartbeat(heartbeatFn<sp/>fn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>hookHeartbeat<sp/>=<sp/>fn;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>hookHeartbeatContext<sp/>=<sp/>context;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6844f5cd4d6e38d65c090dba954321b4" kindref="member">NoteSetFnDebugOutput</ref>(<ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref><sp/>fn)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>=<sp/>fn;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6101cadde16da16c179c1a3f0842b4a1" kindref="member">_noteIsDebugOutputActive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a946facc30c7f3b5f1820db01fde9fa4d" kindref="member">NoteSetFnTransaction</ref>(<ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref><sp/>startFn,<sp/><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref><sp/>stopFn)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>hookTransactionStart<sp/>=<sp/>startFn;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>hookTransactionStop<sp/>=<sp/>stopFn;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a81210c0d43535f1945083f7b3fcad67a" kindref="member">NoteSetFnMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockNotefn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockNotefn)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>=<sp/>lockI2Cfn;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>=<sp/>unlockI2Cfn;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>=<sp/>lockNotefn;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>=<sp/>unlockNotefn;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6879f42e34e075aec82b499fd5ddd12a" kindref="member">NoteSetFnI2CMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>=<sp/>lockI2Cfn;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>=<sp/>unlockI2Cfn;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a534aa37f7e753dd06a847f429f8e743f" kindref="member">NoteSetFnNoteMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockFn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockFn)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>=<sp/>lockFn;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>=<sp/>unlockFn;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a85c66fdcef6d9ea044a9adc37af5afa7" kindref="member">NoteSetFnSerial</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>receiveFn)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>hookSerialReset<sp/>=<sp/>resetFn;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>hookSerialTransmit<sp/>=<sp/>transmitFn;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>hookSerialAvailable<sp/>=<sp/>availFn;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>hookSerialReceive<sp/>=<sp/>receiveFn;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>_noteSetActiveInterface(<ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aa0d08eb556c9cf1ec28c3cd5f86d3eaa" kindref="member">NoteSetFnSerialDefault</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>receiveFn)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookSerialReset<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookSerialReset<sp/>=<sp/>resetFn;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookSerialTransmit<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookSerialTransmit<sp/>=<sp/>transmitFn;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookSerialAvailable<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookSerialAvailable<sp/>=<sp/>availFn;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookSerialReceive<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookSerialReceive<sp/>=<sp/>receiveFn;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_noteSetActiveInterface(<ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1abeb555883ff039880048164763c3b9f0" kindref="member">NoteSetFnI2C</ref>(uint32_t<sp/>notecardAddr,<sp/>uint32_t<sp/>maxTransmitSize,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>receiveFn)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>i2cAddress<sp/>=<sp/>notecardAddr;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>i2cMax<sp/>=<sp/>maxTransmitSize;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>hookI2CReset<sp/>=<sp/>resetFn;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>hookI2CTransmit<sp/>=<sp/>transmitFn;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>hookI2CReceive<sp/>=<sp/>receiveFn;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>_noteSetActiveInterface(<ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a840dff8348b52999ccc3b1673a3170df" kindref="member">NoteSetFnI2CDefault</ref>(uint32_t<sp/>notecardAddr,<sp/>uint32_t<sp/>maxTransmitSize,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>receiveFn)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cAddress<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2cAddress<sp/>=<sp/>notecardAddr;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cMax<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2cMax<sp/>=<sp/>maxTransmitSize;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookI2CReset<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookI2CReset<sp/>=<sp/>resetFn;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookI2CTransmit<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookI2CTransmit<sp/>=<sp/>transmitFn;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookI2CReceive<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookI2CReceive<sp/>=<sp/>receiveFn;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_noteSetActiveInterface(<ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="432"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a8648db242df0d5ac68334ab93ee5fa0e" kindref="member">NoteSetFnDisabled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>_noteSetActiveInterface(<ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runtime<sp/>hook<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a8b39ccd734b1d0602cf6f3612a25e5bd" kindref="member">NoteSetLogLevel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>noteLogLevel<sp/>=<sp/>level;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)level;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a17c60e911144d80329e264eba37e215d" kindref="member">NoteDebugIntln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Debug(msg);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[16];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__cjson__helpers_8c_1a3fe8a8eeb1d78a8eb52ed720a36b99c6" kindref="member">JItoA</ref>(n,<sp/>str);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(str);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(c_newline);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1afac93e9bae7c5cc4c7094f41accde0a6" kindref="member">NoteDebugln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(msg);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(c_newline);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)msg;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1acc098e468887e7622ee6ecda06fe1fb5" kindref="member">NoteDebug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a6101cadde16da16c179c1a3f0842b4a1" kindref="member">_noteIsDebugOutputActive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(msg);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)msg;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;<sp/>noteLogLevel)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(msg);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)level;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)msg;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aea4a872558f91cfdba679dea15e39b9c" kindref="member">NoteDebugWithLevelLn</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;<sp/>noteLogLevel)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>_DebugWithLevel(level,<sp/>msg);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>_DebugWithLevel(level,<sp/>c_newline);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)level;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)msg;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="519"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a4dcd12c5b2ec9d2acd78363a2e41e698" kindref="member">NoteGetMs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookGetMs<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookGetMs();</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a30ebf8f80fc647865819c842adc53816" kindref="member">NoteDelayMs</ref>(uint32_t<sp/>ms)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookDelayMs<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookDelayMs(ms);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="543"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1abd0243952793292731ee3493f0337ab5" kindref="member">_n_htoa32</ref>(uint32_t<sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nibble<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>28)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nibble<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>(nibble-10);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>nibble;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_C_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t),<sp/></highlight><highlight class="stringliteral">&quot;Pointer<sp/>size<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">NOTE_C_STATIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_n_ptoa32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1abd0243952793292731ee3493f0337ab5" kindref="member">_n_htoa32</ref>((uint32_t)ptr,<sp/>str);</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE_C_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!NOTE_C_LOW_MEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1ae66d7015d2a0810abfc656b88e6e6a34" kindref="member">NoteMalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookMalloc<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>hookMalloc(size);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_C_SHOW_MALLOC<sp/>&amp;&amp;<sp/>!defined(NOTE_C_LOW_MEM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a6101cadde16da16c179c1a3f0842b4a1" kindref="member">_noteIsDebugOutputActive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;malloc<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>size<sp/>to<sp/>a<sp/>string<sp/>and<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[16];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__cjson__helpers_8c_1a3fe8a8eeb1d78a8eb52ed720a36b99c6" kindref="member">JItoA</ref>(size,<sp/>str);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(str);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>string<sp/>and<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_n_ptoa32(p,<sp/>str);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(str);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NOTE_C_SHOW_MALLOC<sp/>&amp;&amp;<sp/>!defined(NOTE_C_LOW_MEM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a34e3da9b2215a8b7052dccc2365e3085" kindref="member">NoteFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookFree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_C_SHOW_MALLOC<sp/>&amp;&amp;<sp/>!defined(NOTE_C_LOW_MEM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a6101cadde16da16c179c1a3f0842b4a1" kindref="member">_noteIsDebugOutputActive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;free<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>string<sp/>and<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[16];</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_n_ptoa32(p,<sp/>str);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(str);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NOTE_C_SHOW_MALLOC<sp/>&amp;&amp;<sp/>!defined(NOTE_C_LOW_MEM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookFree(ptr);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="615"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a195386217d2b20709846d45780af2013" kindref="member">NoteLockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref>();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="627"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a2a4589fef84a01f2a1bee1c5a7053fc6" kindref="member">NoteUnlockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref>();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="642"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_noteHeartbeat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*heartbeatJson)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookHeartbeat<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookHeartbeat(heartbeatJson,<sp/>hookHeartbeatContext);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="656"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1afd46ace1fd670f07801485fcb580335c" kindref="member">_noteLockNote</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref>();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="668"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a021742c6f823672fe1a65a4a44456bcf" kindref="member">_noteUnlockNote</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref>();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="680"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a072fdb2cc28eaa8f3ce69d1319d2e928" kindref="member">_noteTransactionStart</ref>(uint32_t<sp/>timeoutMs)</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookTransactionStart<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookTransactionStart(timeoutMs);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="693"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aa6aeb469e576179e87b4656bb1fac0e3" kindref="member">_noteTransactionStop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookTransactionStop<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookTransactionStop();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a3454c54d190d3a03d748ca2b38c57a63" kindref="member">NoteGetFnDebugOutput</ref>(<ref refid="note_8h_1a3535fb8de47cde1a60876b87f4a3cbfd" kindref="member">debugOutputFn</ref><sp/>*fn)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fn<sp/>=<sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_HEARTBEAT_CALLBACK</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteGetFnHeartbeat(heartbeatFn<sp/>*fn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**context)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fn<sp/>=<sp/>hookHeartbeat;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*context<sp/>=<sp/>hookHeartbeatContext;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a0bb77ab0431d89f36ff32ecbb6b005fa" kindref="member">NoteGetFnTransaction</ref>(<ref refid="note_8h_1a86b98dc5a2ddf7465a0792d30ce3b221" kindref="member">txnStartFn</ref><sp/>*startFn,<sp/><ref refid="note_8h_1a563ad03ff093058d955306e551e32c0d" kindref="member">txnStopFn</ref><sp/>*stopFn)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*startFn<sp/>=<sp/>hookTransactionStart;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stopFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stopFn<sp/>=<sp/>hookTransactionStop;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a357a6aca3b4ea07d29f521884f1875a7" kindref="member">NoteGetFnMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockNotefn,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockNotefn)</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockI2Cfn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lockI2Cfn<sp/>=<sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlockI2Cfn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unlockI2Cfn<sp/>=<sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockNotefn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lockNotefn<sp/>=<sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlockNotefn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unlockNotefn<sp/>=<sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a14670a712ba4812bdbaaddbf3189f1b7" kindref="member">NoteGetFnI2CMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockI2Cfn)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockI2Cfn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lockI2Cfn<sp/>=<sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref>;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlockI2Cfn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unlockI2Cfn<sp/>=<sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref>;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1abc8585fc3143b157ac27fc5938378249" kindref="member">NoteGetFnNoteMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*lockFn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>*unlockFn)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lockFn<sp/>=<sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlockFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unlockFn<sp/>=<sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref>;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a7f3bdc32e515a57d8cfe959cc021b76b" kindref="member">NoteGetFn</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>*mallocHook,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>*freeHook,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>*delayMsHook,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>*getMsHook)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mallocHook<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mallocHook<sp/>=<sp/>hookMalloc;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freeHook<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*freeHook<sp/>=<sp/>hookFree;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delayMsHook<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*delayMsHook<sp/>=<sp/>hookDelayMs;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getMsHook<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*getMsHook<sp/>=<sp/>hookGetMs;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a2bd990e82a522241e86b03bbcbb6bb08" kindref="member">NoteGetFnSerial</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>*resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>*transmitFn,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>*availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>*receiveFn)</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resetFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*resetFn<sp/>=<sp/>hookSerialReset;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transmitFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*transmitFn<sp/>=<sp/>hookSerialTransmit;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*availFn<sp/>=<sp/>hookSerialAvailable;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(receiveFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*receiveFn<sp/>=<sp/>hookSerialReceive;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a16d6a60ccab426ff4311c590e909c8f7" kindref="member">NoteGetFnI2C</ref>(uint32_t<sp/>*notecardAddr,<sp/>uint32_t<sp/>*maxTransmitSize,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>*resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>*transmitFn,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>*receiveFn)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>_LockNote();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardAddr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*notecardAddr<sp/>=<sp/>i2cAddress;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxTransmitSize<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*maxTransmitSize<sp/>=<sp/>i2cMax;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resetFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*resetFn<sp/>=<sp/>hookI2CReset;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transmitFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*transmitFn<sp/>=<sp/>hookI2CTransmit;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(receiveFn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*receiveFn<sp/>=<sp/>hookI2CReceive;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>_UnlockNote();</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aa23d9b92604e9b490710a707cd0aa37c" kindref="member">NoteGetI2CAddress</ref>(uint32_t<sp/>*i2cAddr)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cAddr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*i2cAddr<sp/>=<sp/>i2cAddress;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1ad5d209218245579877cdbfb667208dcc" kindref="member">NoteGetI2CMtu</ref>(uint32_t<sp/>*i2cMtu)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cMtu<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*i2cMtu<sp/>=<sp/>i2cMax;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="854"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a7f58c813abb147c229e40a9a788b207a" kindref="member">_noteSerialReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref><sp/>&amp;&amp;<sp/>hookSerialReset<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookSerialReset();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="870"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a8caed79901b583db2f73a5ee83a8af10" kindref="member">_noteSerialTransmit</ref>(uint8_t<sp/>*text,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush)</highlight></codeline>
<codeline lineno="872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref><sp/>&amp;&amp;<sp/>hookSerialTransmit<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hookSerialTransmit(text,<sp/>len,<sp/>flush);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="884"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a459939c3c18d1f280524204128d2f0a2" kindref="member">_noteSerialAvailable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref><sp/>&amp;&amp;<sp/>hookSerialAvailable<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookSerialAvailable();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="899"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aaee728c30e45215635c9e765d92cc41f" kindref="member">_noteSerialReceive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55baa46fc83c20e50c34632c3b4f2b13d901" kindref="member">NOTE_C_INTERFACE_SERIAL</ref><sp/>&amp;&amp;<sp/>hookSerialReceive<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookSerialReceive();</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="913"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1adc22665fff87637952f0f020725d0dd0" kindref="member">_noteI2CReset</ref>(uint16_t<sp/>DevAddress)</highlight></codeline>
<codeline lineno="915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref><sp/>&amp;&amp;<sp/>hookI2CReset<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookI2CReset(DevAddress);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="931"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a34012db92ae2a71ecd304cdede054bda" kindref="member">_noteI2CTransmit</ref>(uint16_t<sp/>DevAddress,<sp/>uint8_t*<sp/>pBuffer,<sp/>uint16_t<sp/>Size)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref><sp/>&amp;&amp;<sp/>hookI2CTransmit<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookI2CTransmit(DevAddress,<sp/>pBuffer,<sp/>Size);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>not<sp/>active&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="950"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1aeaeed60584fb47e2d3b70ab0688af9c2" kindref="member">_noteI2CReceive</ref>(uint16_t<sp/>DevAddress,<sp/>uint8_t*<sp/>pBuffer,<sp/>uint16_t<sp/>Size,<sp/>uint32_t<sp/>*available)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bae19491225ca3b908854248c1fd384168" kindref="member">NOTE_C_INTERFACE_I2C</ref><sp/>&amp;&amp;<sp/>hookI2CReceive<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hookI2CReceive(DevAddress,<sp/>pBuffer,<sp/>Size,<sp/>available);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>not<sp/>active&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="964"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a57dcffb142faaef2714839d27afe5be0" kindref="member">NoteI2CAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cAddress<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3107c5344909029555deedfacb21b43a" kindref="member">NOTE_I2C_ADDR_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2cAddress;</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a057865626ae6b0fe8e456056c581a7a4" kindref="member">NoteSetI2CAddress</ref>(uint32_t<sp/>i2cAddr)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>i2cAddress<sp/>=<sp/>i2cAddr;</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a5464955345634f810de1360880a629c4" kindref="member">NoteSetI2CMtu</ref>(uint32_t<sp/>i2cMtu)</highlight></codeline>
<codeline lineno="979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>i2cMax<sp/>=<sp/>i2cMtu;</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="989"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a35bbb8179be3a72ab7ec302dcbfad9e7" kindref="member">NoteI2CMax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Many<sp/>Arduino<sp/>libraries<sp/>(such<sp/>as<sp/>ESP32)<sp/>have<sp/>a<sp/>limit<sp/>less<sp/>than<sp/>32,<sp/>so<sp/>if<sp/>the<sp/>max<sp/>isn&apos;t<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>assume<sp/>the<sp/>worst<sp/>and<sp/>segment<sp/>the<sp/>I2C<sp/>messages<sp/>into<sp/>very<sp/>tiny<sp/>chunks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cMax<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a163b1c2136ac105797aab34b532367dc" kindref="member">NOTE_I2C_MTU_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>design<sp/>specs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2cMax<sp/>&gt;<sp/><ref refid="note_8h_1ae354e639aef31cd771bd0a22ec84a9fe" kindref="member">NOTE_I2C_MTU_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2cMax<sp/>=<sp/><ref refid="note_8h_1ae354e639aef31cd771bd0a22ec84a9fe" kindref="member">NOTE_I2C_MTU_MAX</ref>;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2cMax;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a773fd9eb553ff57f86937b75c2dbc384" kindref="member">_noteHardReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardReset<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardReset();</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="1037"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a9008e01443608aa771d06afd7ff32d84" kindref="member">_noteJSONTransaction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reqLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**response,<sp/>uint32_t<sp/>timeoutMs)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardTransaction<sp/>==<sp/>NULL<sp/>||<sp/>hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>valid<sp/>interface<sp/>must<sp/>be<sp/>selected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardTransaction(request,<sp/>reqLen,<sp/>response,<sp/>timeoutMs);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1ab9ee4728c0004f1fb57d58ee0514e66d" kindref="member">_noteChunkedReceive</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>*size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delay,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timeoutMs,<sp/>uint32_t<sp/>*available)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardChunkedReceive<sp/>==<sp/>NULL<sp/>||<sp/>hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>valid<sp/>interface<sp/>must<sp/>be<sp/>selected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardChunkedReceive(buffer,<sp/>size,<sp/>delay,<sp/>timeoutMs,<sp/>available);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1ae370bfa806a398890b3cdbd6bc0d0aa7" kindref="member">_noteChunkedTransmit</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delay)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardChunkedTransmit<sp/>==<sp/>NULL<sp/>||<sp/>hookActiveInterface<sp/>==<sp/><ref refid="note_8h_1a06fc87d81c62e9abb8790b6e5713c55bacb56e9352c414d3703a2b4aa0dbd81c1" kindref="member">NOTE_C_INTERFACE_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>valid<sp/>interface<sp/>must<sp/>be<sp/>selected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardChunkedTransmit(buffer,<sp/>size,<sp/>delay);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/note-c/note-c/n_hooks.c"/>
  </compounddef>
</doxygen>
